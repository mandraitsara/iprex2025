<?php/*   _|_|_|  _|_|_|    _| _|        _|    _|  _|        CBO FrameWork _|        _|_|_|    _|        (c) 2018 Cédric Bouillon _|        _|    _|  _|   _|_|_|  _|_|_|    _|_|_|_|--------------------------------------------------------Contrôleur Ajax EMBALLAGES------------------------------------------------------*/ini_set('display_errors',1);error_reporting(0);// Évite les problèmes de génération de PDF suite à des Warning// Initialisation du mode d'appel$mode       = isset($_REQUEST['mode']) ? $_REQUEST['mode'] : '';// Intégration de la configuration du FrameWork et des autorisationsrequire_once '../php/config.php';// Instanciation des Managers$consommablesManager = new ConsommablesManager($cnx);$logsManager = new LogManager($cnx);$fonctionNom = 'mode'.ucfirst($mode);if (function_exists($fonctionNom)) {	$fonctionNom();}/* ------------------------------------MODE - Modale Emballage Famille (admin)------------------------------------*/function modeModalConsommablesFamille() {    global	    $cnx,	    $utilisateur,	    $consommablesManager;    // On vérifie qu'on est bien loggé    if (!isset($_SESSION['logged_user'])) { exit;}	$emballage_famille_id = isset($_REQUEST['id']) ? intval($_REQUEST['id']) : 0;	$emballage_famille    = $emballage_famille_id > 0 ? $consommablesManager->getConsommablesFamille($emballage_famille_id) : new ConsommablesFamille([]);	// On instancie l'utilisateur en session s'il ne l'est pas déjà	if (!isset($utilisateur)) {		$utilisateur = unserialize($_SESSION['logged_user']);    }	$vuesManager = new VueManager($cnx);	// Retour Titre	echo '<i class="fa fa-box-open"></i>';	echo $emballage_famille_id > 0 ? $emballage_famille->getNom() : "Nouvelle famille d'emballage&hellip;";	// Séparateur Titre/Body pour le callback aJax	echo '^';	// Retour Body ?>	<form class="container-fluid" id="formConsommablesFamilleAddUpd">        <input type="hidden" name="mode" value="saveConsommablesFamille"/>        <input type="hidden" name="emballage_famille_id" id="input_id" value="<?php echo $emballage_famille_id; ?>"/>		<div class="row">			<div class="col-12 col-lg-8 input-group mb-2">                <div class="input-group-prepend">                    <span class="input-group-text">Nom</span>                </div>                <input type="text" class="form-control" placeholder="Nom ou libellé" name="nom" id="input_nom" value="<?php echo $emballage_famille->getNom(); ?>">                <div class="invalid-feedback">Un nom est obligatoire.</div>            </div>            <div class="col-12 col-lg-4 input-group mb-2">                <div class="input-group-prepend">                    <span class="input-group-text">Code</span>                </div>                <input type="text" class="form-control" placeholder="Code interne" name="code" id="input_code" value="<?php echo $emballage_famille->getCode(); ?>">                <div class="invalid-feedback">Le code est obligatoire.</div>            </div>        </div>        <div class="row">            <div class="col-12 col-lg-8 input-group mb-2">                <select class="selectpicker form-control show-tick" name="vues[]" title="Vues associées" multiple data-selected-text-format="count > 1" data-actions-box="true">                    <?php                    foreach ($vuesManager->getVuesListe(['emballages' => true]) as $vuemb) { ?>                        <option value="<?php echo $vuemb->getId(); ?>" <?php echo in_array($vuemb->getId(), $emballage_famille->getVuesIds()) ? 'selected' : ''; ?>><?php echo $vuemb->getNom(); ?></option>                    <?php } // FIN boucle vues emballages                    ?>                </select>            </div>            <div class="col-4 col-lg-2 mb-2 text-right">                <input type="checkbox" class="togglemaster" data-toggle="toggle" name="activation"					<?php echo $emballage_famille->isActif() ? 'checked' : ''; ?>                       data-on="Activé"                       data-off="Désactivé"                       data-onstyle="success"                       data-offstyle="danger"                />            </div>		</div>	</form>    <div class="row mt-2">        <div class="col doublon d-none">            <div class="alert alert-danger">                <i class="fa fa-exclamation-circle mr-1"></i> Ce code interne existe déjà !            </div>        </div>    </div>	<?php	// Séparateur Body/Footer pour le callback aJax	echo '^';	// Retour boutons footer si une famille d'emballage existant (bouton supprimer)    if ($emballage_famille_id > 0) {	?>	    <button type="button" class="btn btn-danger btn-sm btnSupprimeConsommablesFamille">            <i class="fa fa-times fa-lg vmiddle mr-1"></i> Supprimer	    </button>	<?php    } // FIN test édition utilisateur existant	exit;} // FIN mode/* -------------------------------------------------MODE - Enregistre une famille d'emballage (add/upd)--------------------------------------------------*/function modeSaveConsommablesFamille() {    global	    $consommablesManager,		$cnx;	// Vérification des données	$emballage_famille_id    = isset($_REQUEST['emballage_famille_id'])   ? intval($_REQUEST['emballage_famille_id'])       : 0;	$nom             = isset($_REQUEST['nom'])            ? strtoupper(trim($_REQUEST['nom']))      : '';	$code            = isset($_REQUEST['code'])           ? strtoupper(trim($_REQUEST['code']))     : '';	$vues            = isset($_REQUEST['vues']) && is_array($_REQUEST['vues'])          ? $_REQUEST['vues']     : [];	$activation      = isset($_REQUEST['activation'])     ? 1 : 0;	// Si pas de code ou de nom, on ne vas pas plus loin...	if ($nom == '' || $code == '') {		echo '-1';		exit;	} // FIN test champs requis	// On vérifie que le code n'existe pas déjà    if ($code !== '' && $consommablesManager->checkFamilleExisteDeja($code, $emballage_famille_id)) {        echo '-1';        exit;    } // FIN contrôle existe déjà	// Instanciation de l'objet EMBALLAGEFAMILE (hydraté ou vide)	$consommablesFamille = $emballage_famille_id > 0 ? $consommablesManager->getConsommablesFamille($emballage_famille_id) : new ConsommablesFamille([]);	// mise à jour des champs de base	$consommablesFamille->setNom($nom);	$consommablesFamille->setCode($code);	$consommablesFamille->setDate_maj(date('Y-m-d H:i:s'));	$consommablesFamille->setActif($activation);	// Si création, on enregistre la date et le type emballage	if ($emballage_famille_id == 0) {		$consommablesFamille->setId_type(1); // 1 pour emballages		$consommablesFamille->setDate_add(date('Y-m-d H:i:s'));	}    // Enregistrement et retour pour callBack ajax    $retour = $consommablesManager->saveConsommablesFamille($consommablesFamille);	// Enregistrement des vues associés	$consommablesManager->saveConsommablesFamillesVues($consommablesFamille, $vues);    // Logs    $logsManager = new LogManager($cnx);    $log = new Log([]);    if ($retour) {		$log->setLog_type('info');		if ($emballage_famille_id == 0) {		    $log->setLog_texte("Création d'une nouvelle famille d'emballage : " . $code);        } else {			$log->setLog_texte("Mise à jour des informations de la famille d'emballage #" . (int)$emballage_famille_id);        }    } else {		$log->setLog_type('danger');		if ($emballage_famille_id == 0) {			$log->setLog_texte("ERREUR lors de la création d'une nouvelle famille d'emballage : " . $code);		} else {			$log->setLog_texte("ERREUR lors de la mise à jour des informations de la famille d'emballage #" . (int)$emballage_famille_id);		}    } // FIN test retour création/maj pour log	$logsManager->saveLog($log);	echo $retour !== false ? '1' : '0';	exit;} // FIN mode/* -----------------------------------------------MODE - Affiche la liste des familles d'emballages------------------------------------------------*/function modeShowListeEmballagesFamilles() {    global	    $utilisateur,	    $consommablesManager;	$id_type = isset($_REQUEST['id_type']) ? intval($_REQUEST['id_type']) : 0;    $params = [            'show_inactifs'     => true,            'show_supprimes'    => false,            'get_nonconso'      => true,            'get_stock'         => true    ];    if ($id_type > 0) {        $params['id_type'] = $id_type;    }	$listeFamillesEmballages = $consommablesManager->getListeConsommablesFamilles($params);	// Si aucun emballage a afficher	if (empty($listeFamillesEmballages)) { ?>        <div class="alert alert-danger">            <i class="fa fa-times-circle text-28 vmiddle mr-1"></i> <strong>Aucune famille d'emballage !</strong>        </div>    <?php	// Sinon, affichage de la liste des familles d'emballages	} else { ?>        <div class="alert alert-danger d-md-none text-center">            <i class="fa fa-exclamation-circle text-28 mb-1"></i> <p>Connectez-vous depuis un apareil permettant un affichage plus large pour afficher cet écran&hellip;</p>        </div>        <table class="admin w-100 d-none d-md-table">            <thead>                <tr>				    <?php                    // On affiche l'ID que si on est développeur                    if ($utilisateur->isDev()) { ?><th class="w-court-admin-cell d-none d-xl-table-cell">ID</th><?php } ?>                    <th>Nom</th>                    <th class="w-court-admin-cell">Code</th>                    <th>Disponible dans les vues</th>                    <th class="text-center">Quantité</th>                    <th class="text-center w-court-admin-cell">Actif</th>                    <th class="t-actions w-mini-admin-cell">Edition</th>                    <th class="t-actions w-mini-admin-cell">Emballages</th>                </tr>            </thead>            <tbody>			    <?php                // Boucle sur les emballages				foreach ($listeFamillesEmballages as $consommablesFamille) {					?>                    <tr<?php echo $consommablesFamille->getStock_actuel() < 1 ? ' class="tr-stock-vide"' : ''; ?>>						<?php						// On affiche l'ID que si on est développeur                        if ($utilisateur->isDev()) { ?>                            <td class="w-court-admin-cell d-none d-xl-table-cell"><span class="badge badge-pill badge-warning"><?php echo $consommablesFamille->getId();?></span></td>                        <?php } ?>                        <td class="text-18"><a href="<?php echo __CBO_ROOT_URL__?>admin-emballages.php?f=<?php                            echo base64_encode($consommablesFamille->getId()); ?>" class=""><?php echo $consommablesFamille->getNom();?></a></td>                        <td class="w-court-admin-cell nowrap"><code class="text-14 gris-5"><?php echo $consommablesFamille->getCode();?></code></td>                        <td><?php                            if (!is_array($consommablesFamille->getVues()) || empty($consommablesFamille->getVues())) { ?>                                <span class="gris-9">&mdash;</span>                            <?php }                            foreach ($consommablesFamille->getVues() as $famvue) { ?>                                <span class="badge badge-info text-14 mr-1"><?php echo $famvue->getNom(); ?></span>                            <?php                            } // FIN boucle sur les vues                            ?></td>                        <td class="text-center"><span class="badge badge-pill badge-<?php echo $consommablesFamille->getStock_actuel() > 0 ? 'secondary' : 'danger'; ?> text-14">                                <?php echo $consommablesFamille->getStock_actuel(); ?>                            </span>                        </td>                        <td class="text-center w-court-admin-cell"><i class="fa fa-fw fa-lg fa-<?php echo $consommablesFamille->isActif() ? 'check-circle text-success' : 'times-circle text-danger'; ?>"></i></td>                        <td class="t-actions w-mini-admin-cell"><button type="button" class="btn btn-sm btn-secondary" data-toggle="modal" data-target="#modalConsommablesFamille" data-emballage-famille-id="<?php                            echo $consommablesFamille->getId(); ?>"><i class="fa fa-edit"></i> </button></td>                        <td class="t-actions w-mini-admin-cell"><a href="<?php echo __CBO_ROOT_URL__?>admin-emballages.php?f=<?php							echo base64_encode($consommablesFamille->getId()); ?>" class="btn btn-sm btn-secondary"><i class="fa fa-ellipsis-h"></i> </a></td>                        </tr>                <?php				} // FIN boucle emballages ?>            </tbody>        </table>	<?php } // FIN test emballages à afficher    exit;} // FIN mode/* ---------------------------------------MODE - Supprime une famille d'emballage---------------------------------------*/function modeSupprConsommablesFamille() {    global        $consommablesManager,        $logsManager;    //  -> On ne supprime pas réellement pour les raisons de traçabilité, on passe le champ "supprime" à 1    // On récupère l'ID de la famille d'emballage, si il n'est pas clairement identifié, on ne va pas plus loin    $id_emballage_famille = isset($_REQUEST['id_emballage_famille']) ? intval($_REQUEST['id_emballage_famille']) : 0;    if ($id_emballage_famille == 0) { exit; }    // Instanciation de l'objet Emballage    $consommablesFamille = $consommablesManager->getConsommablesFamille($id_emballage_famille);    // On passe le statut à supprimé	$consommablesFamille->setSupprime(1);    // On désactive	$consommablesFamille->setActif(0);    // On enregistre la date de modification	$consommablesFamille->setDate_maj(date('Y-m-d H:i:s'));	// Si la mise à jour s'est bien passé en BDD    if ($consommablesManager->saveConsommablesFamille($consommablesFamille)) {        // On sauvegarde dans les LOGS        $log = new Log([]);        $log->setLog_texte("Suppression d'une famille d'emballage (champ 'supprime' à 1) : ID #" . $id_emballage_famille);        $log->setLog_type('warning');		$logsManager->saveLog($log);    } // FIN test suppression OK pour Log    exit;} // FIN mode/* --------------------------------------------------MODE - Vérifie si famille existe déjà (admin/modale)---------------------------------------------------*/function modeCheckFamilleExisteDeja() {    global $consommablesManager;    $id     = isset($_REQUEST['id'])        ? (int)$_REQUEST['id']      : 0;    $code   = isset($_REQUEST['code'])      ? trim($_REQUEST['code'])   : '';	echo $consommablesManager->checkFamilleExisteDeja($code, $id) ? 1 : 0;} // FIN mode/* ---------------------------------------------------MODE - Affiche la liste des fournisseurs d'emballage----------------------------------------------------*/function modeShowListeEmballagesFrs() {	global        $cnx,	    $utilisateur;	$tiersManager = new TiersManager($cnx);	$params = [	        'type' => 1,               // Type 1 = Emballage            'show_inactifs' => true    ];	$listeFrsEmballages = $tiersManager->getListeFournisseurs($params);	// Si aucun emballage a afficher	if (empty($listeFrsEmballages)) { ?>        <div class="alert alert-danger">            <i class="fa fa-times-circle text-28 vmiddle mr-1"></i> <strong>Aucun fournisseur d'emballage.</strong>        </div>		<?php		// Sinon, affichage de la liste des familles d'emballages	} else { ?>        <div class="alert alert-danger d-md-none text-center">            <i class="fa fa-exclamation-circle text-28 mb-1"></i> <p>Connectez-vous depuis un apareil permettant un affichage plus large pour afficher cet écran&hellip;</p>        </div>        <table class="admin w-100 d-none d-md-table">            <thead>            <tr>				<?php				// On affiche l'ID que si on est développeur				if ($utilisateur->isDev()) { ?><th class="w-court-admin-cell d-none d-xl-table-cell">ID</th><?php } ?>                <th>Nom</th>                <th class="text-center w-court-admin-cell">Actif</th>                <th class="t-actions w-court-admin-cell">Détails</th>            </tr>            </thead>            <tbody>			<?php			// Boucle sur les emballages			foreach ($listeFrsEmballages as $emballageFrs) {				?>                <tr>					<?php					// On affiche l'ID que si on est développeur					if ($utilisateur->isDev()) { ?>                        <td class="w-court-admin-cell d-none d-xl-table-cell"><span class="badge badge-pill badge-warning"><?php echo $emballageFrs->getId();?></span></td>					<?php } ?>                    <td class="text-18"><?php echo $emballageFrs->getNom();?></td>                    <td class="text-center w-court-admin-cell"><i class="fa fa-fw fa-lg fa-<?php echo $emballageFrs->isActif() ? 'check-circle text-success' : 'times-circle text-danger'; ?>"></i></td>                    <td class="t-actions w-court-admin-cell"><button type="button" class="btn btn-sm btn-secondary" data-toggle="modal" data-target="#modalEmballageFrs" data-emballage-frs-id="<?php						echo $emballageFrs->getId(); ?>"><i class="fa fa-edit"></i> </button></td>                </tr>				<?php			} // FIN boucle emballages ?>            </tbody>        </table>	<?php } // FIN test emballages à afficher	exit;} // FIN mode/* -----------------------------------------MODE - Modale Emballage Fournisseur (admin)-----------------------------------------*/function modeModalEmballageFrs() {	global        $cnx,        $utilisateur;	$tiersManager = new TiersManager($cnx);	// On vérifie qu'on est bien loggé	if (!isset($_SESSION['logged_user'])) { exit;}	$emballage_frs_id = isset($_REQUEST['id']) ? intval($_REQUEST['id']) : 0;	$emballage_frs    = $emballage_frs_id > 0 ? $tiersManager->getTiers($emballage_frs_id) : new Tiers([]);	// On instancie l'utilisateur en session s'il ne l'est pas déjà	if (!isset($utilisateur)) {		$utilisateur = unserialize($_SESSION['logged_user']);	}	// Retour Titre	echo '<i class="fa fa-box-open"></i>';	echo $emballage_frs_id > 0 ? $emballage_frs->getNom() : "Nouveau fournisseur d'emballage&hellip;";	// Séparateur Titre/Body pour le callback aJax	echo '^';	// Retour Body ?>    <form class="container-fluid" id="formEmballageFrsAddUpd">        <input type="hidden" name="mode" value="saveConsommableFrs"/>        <input type="hidden" name="emballage_frs_id" id="input_id" value="<?php echo $emballage_frs_id; ?>"/>        <div class="row">            <div class="col-12 col-lg-10 input-group mb-2">                <div class="input-group-prepend">                    <span class="input-group-text">Nom</span>                </div>                <input type="text" class="form-control" placeholder="Nom / raison sociale" name="nom" id="input_nom" value="<?php echo $emballage_frs->getNom(); ?>">                <div class="invalid-feedback">Un nom est obligatoire.</div>            </div>            <div class="col-12 col-lg-2 mb-2 text-right">                <input type="checkbox" class="togglemaster" data-toggle="toggle" name="activation"					<?php echo $emballage_frs->isActif() ? 'checked' : ''; ?>                       data-on="Activé"                       data-off="Désactivé"                       data-onstyle="success"                       data-offstyle="danger"                />            </div>        </div>    </form>	<?php	// Séparateur Body/Footer pour le callback aJax	echo '^';	// Retour boutons footer si une famille d'emballage existant (bouton supprimer)	if ($emballage_frs_id > 0) {		?>        <button type="button" class="btn btn-danger btn-sm btnSupprimeEmballageFrs">            <i class="fa fa-times fa-lg vmiddle mr-1"></i> Supprimer        </button>		<?php	} // FIN test édition utilisateur existant	exit;} // FIN mode/* -------------------------------------------------MODE - Enregistre un fournisseur d'emballage (add/upd)--------------------------------------------------*/function modesaveConsommableFrs() {	global	$consommablesManager,	$cnx;	$tiersManager = new TiersManager($cnx);	// Vérification des données	$emballage_frs_id   = isset($_REQUEST['emballage_frs_id'])  ? intval($_REQUEST['emballage_frs_id'])   : 0;	$nom                = isset($_REQUEST['nom'])               ? strtoupper(trim($_REQUEST['nom']))      : '';	$activation         = isset($_REQUEST['activation'])        ? 1 : 0;	// Si pas de code ou de nom, on ne vas pas plus loin...	if ($nom == '') {		echo '-1';		exit;	} // FIN test champs requis	// Instanciation de l'objet Fournisseur (hydraté ou vide)	$frs = $emballage_frs_id > 0 ? $tiersManager->getTiers($emballage_frs_id) : new Tiers([]);	// mise à jour des champs de base	$frs->setNom($nom);	$frs->setActif($activation);	// Enregistrement et retour pour callBack ajax	$retour = $tiersManager->saveTiers($frs);	// Logs	$logsManager = new LogManager($cnx);	$log = new Log([]);	if ($retour) {		$log->setLog_type('info');		if ($emballage_frs_id == 0) {			$log->setLog_texte("Création d'un nouveau fournisseur d'emballage : " . $nom);		} else {			$log->setLog_texte("Mise à jour des informations du fournisseur d'emballage #" . $emballage_frs_id);		}	} else {		$log->setLog_type('danger');		if ($emballage_frs_id == 0) {			$log->setLog_texte("ERREUR lors de la création du nouveau fournisseur d'emballage : " . $nom);		} else {			$log->setLog_texte("ERREUR lors de la mise à jour des informations du fournisseur d'emballage ID #" . $emballage_frs_id);		}	} // FIN test retour création/maj pour log	$logsManager->saveLog($log);	echo $retour !== false ? '1' : '0';	exit;} // FIN mode/* ---------------------------------------------------MODE - Affiche la liste des emballage----------------------------------------------------*/function modeShowListeEmballages() {	global        $cnx,		$utilisateur,	    $consommablesManager;	// Préparation pagination (Ajax)	$nbResultPpage      = 20;	$page               = isset($_REQUEST['page']) ? intval($_REQUEST['page']) : 1;	$filtresPagination  = '?mode=showListeEmballages';	$start              = ($page-1) * $nbResultPpage;	$params['start'] 			= $start;	$params['nb_result_page'] 	= $nbResultPpage;	$params['show_inactifs']    = true;	// Gestion des filtres (recherche)	$filtre_ref        =  isset($_REQUEST['filtre_ref'])       ? trim($_REQUEST['filtre_ref'])         : '';	$filtre_frs         =  isset($_REQUEST['filtre_frs'])        ? intval($_REQUEST['filtre_frs'])          : 0;	$filtre_conso         =  isset($_REQUEST['filtre_conso'])        ? intval($_REQUEST['filtre_conso'])          : 0;	$filtre_defec         =  isset($_REQUEST['filtre_defectueux'])        ? intval($_REQUEST['filtre_defectueux'])          : 0;	$filtre_famille     =  isset($_REQUEST['filtre_famille'])  && $_REQUEST['filtre_famille'] != ''  ? intval($_REQUEST['filtre_famille'])      : 0;	if ($filtre_famille    > 0  ) { $params['id_famille']   = $filtre_famille;  $filtresPagination.='&filtre_famille='.$filtre_famille; }	if ($filtre_frs    > 0  ) { $params['id_frs']   = $filtre_frs;  $filtresPagination.='&filtre_frs='.$filtre_frs; }	if ($filtre_conso    != 0  ) { $params['conso']   = $filtre_conso;  $filtresPagination.='&filtre_conso='.$filtre_conso; }	if ($filtre_defec    != 0  ) { $params['defec']   = $filtre_defec;  $filtresPagination.='&filtre_defectueux='.$filtre_defec; }	if ($filtre_ref != ''  ) { $params['ref']         = $filtre_ref;     $filtresPagination.='&filtre_ref='.$filtre_ref;       }	$listeEmballages = $consommablesManager->getListeEmballages($params);	// Si aucun emballage a afficher	if (empty($listeEmballages)) { ?>        <div class="alert alert-danger">            <i class="fa fa-times-circle text-28 vmiddle mr-1"></i> <strong>Aucun emballage&hellip;</strong>        </div>		<?php		// Sinon, affichage de la liste des produits	} else {		?>        <div class="alert alert-danger d-md-none text-center">            <i class="fa fa-exclamation-circle text-28 mb-1"></i> <p>Connectez-vous depuis un apareil permettant un affichage plus large pour afficher cet écran&hellip;</p>        </div>        <table class="admin w-100 d-none d-md-table">            <thead>                <tr>                    <?php                    // On affiche l'ID que si on est développeur                    if ($utilisateur->isDev()) { ?><th class="w-court-admin-cell d-none d-xl-table-cell">ID</th><?php } ?>                    <th>Famille</th>                    <th>Fournisseur</th>                    <th>Numéro de lot</th>                    <th>Reçu le</th>                    <th class="w-court-admin-cell text-center">Stock reçu</th>                    <th class="w-court-admin-cell text-center">Quantité</th>                    <th class="text-center">Défectueux</th>                    <th class="w-court-admin-cell text-center">En cours</th>                    <th class="t-actions w-court-admin-cell">Détails</th>                </tr>            </thead>            <tbody>			<?php			// Liste non vide, construction de la pagination...			$nbResults = $consommablesManager->getNb_results();			$pagination = new Pagination($page);    		$pagination->setUrl($filtresPagination);			$pagination->setNb_results($nbResults);			$pagination->setAjax_function(true);			$pagination->setNb_results_page($nbResultPpage);			$pagination->setNb_apres(2);			$pagination->setNb_avant(2);			// Boucle sur les emballages			foreach ($listeEmballages as $emb) { ?>                <tr<?php echo $emb->getStock_actuel() < 1 ? ' class="tr-stock-vide"' : ''; ?>>					<?php					// On affiche l'ID que si on est développeur					if ($utilisateur->isDev()) { ?>                        <td class="w-court-admin-cell d-none d-xl-table-cell"><span class="badge badge-pill badge-warning"><?php echo $emb->getId();?></span></td>					<?php } ?>                    <td><?php echo $emb->getNom_famille();?></td>                    <td><?php echo $emb->getNom_frs();?></td>                    <td><?php echo $emb->getNumlot_frs();?></td>                    <td><?php echo $emb->getDate_rcp() != '' ? Outils::dateSqlToFr($emb->getDate_rcp()) : '&mdash;';?></td>                    <td class="text-center text-16"><?php echo $emb->getStock_initial(); ?>                    <td class="text-center"><?php                        $cssBadge = 'secondary';                        if ($emb->getStock_actuel() < 1) {							$cssBadge = 'danger';                        } else if ($emb->getStock_actuel() == $emb->getStock_initial()) {							$cssBadge = 'success';						}						if ($emb->getStock_actuel() > 0 && $emb->getStock_actuel() < 3) {							$cssBadge = 'warning';						}                        echo '<span class="badge badge-pill badge-'.$cssBadge.' text-14">';                        echo $emb->getStock_actuel();						echo '</span>';						?>                    </td>                    </td>                    <td class="text-center">						<?php if (count($emb->getDefectueux()) > 0) { ?>                            <span class="badge-pill badge badge-danger text-14 pointeur" data-toggle="modal" data-target="#modalDefectueux" data-id-emb="<?php echo $emb->getId(); ?>"><?php echo $emb->getTotalDefectueux(); ?></span>						<?php } else { ?>                            <i class="fa fa-minus fa-fw fa-lg gris-c"></i>						<?php } ?>                    </td>                    <td class="text-center"><?php echo $emb->getEncours() == 1 ? '<i class="fa fa-check fa-lg text-success"></i>' : '&mdash;';?></td>                    <td class="t-actions w-court-admin-cell"><button type="button" class="btn btn-sm btn-secondary" data-toggle="modal" data-target="#modalEmballage" data-emballage-id="<?php						echo $emb->getId(); ?>"><i class="fa fa-edit"></i> </button></td>                </tr>            <?php			} // FIN boucle produits ?>            </tbody>        </table>		<?php		// Pagination (aJax)		if (isset($pagination)) {			// Pagination bas de page, verbose...			$pagination->setVerbose_pagination(1);			$pagination->setVerbose_position('right');			$pagination->setNature_resultats('emballage');			$pagination->setNb_apres(2);			$pagination->setNb_avant(2);			echo ($pagination->getPaginationHtml());		} // FIN test pagination	} // FIN test produits à afficher	exit;} // FIN mode/* -----------------------------------------MODE - Modale Emballage (admin)-----------------------------------------*/function modeModalEmballage() {	global        $cnx,	    $utilisateur,	    $consommablesManager;	$tiersManager = new TiersManager($cnx);	// On vérifie qu'on est bien loggé	if (!isset($_SESSION['logged_user'])) { exit;}	$emballage_id = isset($_REQUEST['id']) ? intval($_REQUEST['id']) : 0;	$emb    = $emballage_id > 0 ? $consommablesManager->getConsommable($emballage_id) : new Consommable([]);	// On instancie l'utilisateur en session s'il ne l'est pas déjà	if (!isset($utilisateur)) {		$utilisateur = unserialize($_SESSION['logged_user']);	}	// Retour Titre	echo '<i class="fa fa-box-open"></i>';	echo $emballage_id > 0 ? 'Lot d\'emballage '.$emb->getNumlot_frs() : "Réception d'un nouveau lot&hellip;";	// Séparateur Titre/Body pour le callback aJax	echo '^';	// Retour Body ?>    <form class="container-fluid" id="formEmballageAddUpd">        <input type="hidden" name="mode" value="saveConsommable"/>        <input type="hidden" name="emballage_id" id="input_id" value="<?php echo $emballage_id; ?>"/>        <!--<div class="row">            <div class="col-10">-->                <div class="row">                    <div class="col-6">                        <label class="mb-0 gris-7 texte-fin text-13">Famille :</label>                        <div class="input-group mb-3">                        <select class="selectpicker form-control show-tick" id="input_id_famille" name="id_famille" title="Famille d'emballage">							<?php							foreach ($consommablesManager->getListeConsommablesFamilles([]) as $fam) { ?>                                <option value="<?php echo $fam->getId();?>" <?php                                echo $emballage_id > 0 && $emb->getId_famille() == $fam->getId() ? 'selected' : '';                                ?>><?php echo $fam->getNom();?></option>							<?php } // FIN boucle sur les familles d'emballages ?>                        </select>                            <input type="hidden" id="input_id_famille_fb" class="form-control" />                            <div class="invalid-feedback">Sélectionnez la famille.</div>                        </div>                    </div>                    <div class="col-6">                        <label class="mb-0 gris-7 texte-fin text-13">Fournisseur :</label>                        <div class="input-group mb-3">                        <select class="selectpicker form-control show-tick" id="input_id_fournisseur" name="id_fournisseur" title="Fournisseur">							<?php							foreach ($tiersManager->getListeFournisseurs(['famille' => 1]) as $frs) { // Famille 1 = Emballages							    ?>                                <option value="<?php echo $frs->getId();?>" <?php								echo $emballage_id > 0 && $emb->getId_fournisseur() == $frs->getId() ? 'selected' : '';								?>><?php echo $frs->getNom();?></option>							<?php } // FIN boucle sur les fournisseurs d'emballages ?>                        </select>                            <input type="hidden" id="input_id_fournisseur_fb" class="form-control" />                            <div class="invalid-feedback">Sélectionnez le fournisseur.</div>                        </div>                    </div>                </div>                <div class="row">                    <div class="col-6 mt-1">                        <label class="mb-0 gris-7 texte-fin text-13">Numéro de lot fournisseur :</label>                        <div class="input-group mb-3">                            <div class="input-group-prepend">                                <span class="input-group-text"><i class="fa fa-barcode gris-9"></i></span>                            </div>                            <input type="text" class="form-control" id="input_numlot_frs" placeholder="Numéro de lot fournisseur" name="numlot_frs" value="<?php echo $emb->getNumlot_frs(); ?>">                            <div class="invalid-feedback">Le numéro de lot fournisseur est obligatoire.</div>                        </div>                    </div>                    <div class="col-<?php echo $emballage_id > 0 ? '3' : '6' ;?> mt-1">                        <label class="mb-0 gris-7 texte-fin text-13">Quantité réceptionnée :</label>                        <div class="input-group mb-3">                            <input type="text" class="form-control text-center" id="input_stock_initial" placeholder="0" name="stock_initial" value="<?php echo $emb->getStock_initial();?>">                            <div class="input-group-append">                                <span class="input-group-text">rouleaux</span>                            </div>                        </div>                    </div>                    <div class="<?php echo $emballage_id > 0 ? 'col-3' : 'd-none' ;?> mt-1">                        <label class="mb-0 gris-7 texte-fin text-13">Quantité disponible :</label>                        <div class="input-group mb-3">                            <input type="text" class="form-control text-center" id="input_stock_actuel" placeholder="0" name="stock_actuel" value="<?php echo $emb->getStock_actuel();?>">                            <div class="input-group-append">                                <span class="input-group-text">rouleaux</span>                            </div>                        </div>                    </div>                </div>                <div class="row">                    <div class="col-6 mt-1">                        <label class="mb-0 gris-7 texte-fin text-13">Date de réception :</label>                        <div class="input-group mb-3">                            <div class="input-group-prepend">                                <span class="input-group-text"><i class="fa fa-calendar-alt gris-9"></i></span>                            </div>                            <input type="text" class="datepicker form-control" id="input_date_rcp" placeholder="JJ/MM/AAAA" name="date_rcp" value="<?php echo $emb->getDate_rcp() != '' ? Outils::dateSqlToFr($emb->getDate_rcp()) : date('d/m/Y'); ?>">                        </div>                    </div>                </div>            </div>    </form>	<?php	// Séparateur Body/Footer pour le callback aJax	echo '^';	// Retour boutons footer si un emballage existant (bouton supprimer)	if ($emballage_id > 0) {		?>        <button type="button" class="btn btn-danger btn-sm btnSupprimeEmballage">            <i class="fa fa-sign-out-alt fa-lg vmiddle mr-1"></i> Sortie du lot        </button>		<?php	} // FIN test édition utilisateur existant	exit;} // FIN mode/* -------------------------------------------------MODE - Enregistre un lot d'emballage (add/upd)--------------------------------------------------*/function modesaveConsommable() {	global        $utilisateur,	    $cnx,	    $consommablesManager;	// Vérification des données	$emballage_id   = isset($_REQUEST['emballage_id'])   ? intval($_REQUEST['emballage_id'])         : 0;	$id_famille     = isset($_REQUEST['id_famille'])     ? intval($_REQUEST['id_famille'])           : 0;	$id_fournisseur = isset($_REQUEST['id_fournisseur']) ? intval($_REQUEST['id_fournisseur'])       : 0;	$stock_initial  = isset($_REQUEST['stock_initial'])  ? intval($_REQUEST['stock_initial'])        : 0;	$stock_actuel   = isset($_REQUEST['stock_actuel'])   ? intval($_REQUEST['stock_actuel'])         : 0;	$numlot_frs     = isset($_REQUEST['numlot_frs'])     ? trim(strtoupper($_REQUEST['numlot_frs'])) : '';	$date_rcp       = isset($_REQUEST['date_rcp'])       ? Outils::dateFrToSql($_REQUEST['date_rcp'])   : date('d/m/Y');	// Si données incomplètes, on ne vas pas plus loin...	if ($id_famille == 0 || $id_fournisseur == 0 || $numlot_frs == '') {		echo '-1';		exit;	} // FIN test champs requis	// Instanciation de l'objet Emballage (hydraté ou vide)	$emb = $emballage_id > 0 ? $consommablesManager->getConsommable($emballage_id) : new Consommable([]);	$old_stock_initial = $emb->getStock_initial(); // On récup l'ancienne valeur pour mise à jours du stock actuel	// mise à jour des champs de base	$emb->setStock_initial($stock_initial);	$emb->setId_famille($id_famille);	$emb->setId_fournisseur($id_fournisseur);	$emb->setNumlot_frs($numlot_frs);	$emb->setDate_rcp($date_rcp);	// Enregistrement et retour pour callBack ajax	$retour = $consommablesManager->saveConsommable($emb);	// Si nouveau lot, on enregistre aussi le stock	if ($emballage_id == 0) {		$emb->setId($retour);		$emb->setStock_actuel($stock_initial); // Le stock actuel est égal au stock initial		$consommablesManager->saveConsommable($emb);		$consommablesManager->saveConsommablesHisto($retour, $stock_initial);    // Si on a modifié le stock initial on historise le mouvement	} else if ($stock_initial != $old_stock_initial) {		$consommablesManager->saveConsommablesHisto($retour, $stock_initial - $old_stock_initial);		$emb->setStock_actuel($stock_initial);		// Si le stock actuel est supérieur au stock initial, on remet à niveau	    if ($emb->getStock_actuel() > $emb->getStock_initial()) {	        $emb->setStock_actuel($stock_initial);	        $consommablesManager->saveConsommable($emb);        }		$consommablesManager->saveConsommable($emb);    } // FIN save stock    // Si on a modifié le stock actuel sur un lot déjà existant (upd)    if ($emballage_id > 0 && $stock_actuel != $emb->getStock_actuel()) {        $emb->setStock_actuel($stock_actuel);        // Si le stock actuel est > 0, il n'est plus consommé, sinon il est consommé        if ($stock_actuel > 0) { $emb->setConsomme(0); }        else { $emb->setConsomme(1); }		$consommablesManager->saveConsommable($emb);    }	// Logs	$logsManager = new LogManager($cnx);	$log = new Log([]);	if ($retour) {		$log->setLog_type('info');		if ($emballage_id == 0) {			$log->setLog_texte("Création d'un nouveau lot d'emballage");		} else {			$log->setLog_texte("Mise à jour des informations lot d'emballage ID #" . $emballage_id);		}	} else {		$log->setLog_type('danger');		if ($emballage_id == 0) {			$log->setLog_texte("ERREUR lors de la création du nouveau lot d'emballage");		} else {			$log->setLog_texte("ERREUR lors de la mise à jour des informations du lot d'emballage ID #" . $emballage_id);		}	} // FIN test retour création/maj pour log	$logsManager->saveLog($log);	echo $retour !== false ? '1' : '0';	exit;} // FIN mode/* ---------------------------------------MODE - Supprime un emballage---------------------------------------*/function modeSupprEmballage() {	global	$consommablesManager,	$logsManager;	//  -> On ne supprime pas réellement pour les raisons de traçabilité, on passe le champ "supprime" à 1	$id_emballage = isset($_REQUEST['id_emballage']) ? intval($_REQUEST['id_emballage']) : 0;	if ($id_emballage == 0) { exit; }	// Instanciation de l'objet Emballage	$emb = $consommablesManager->getConsommable($id_emballage);	// On passe le statut à supprimé	$emb->setSupprime(1);	$emb->setEncours(0);	$emb->setDate_out(date('Y-m-d'));	// Si la mise à jour s'est bien passé en BDD	if ($consommablesManager->saveConsommable($emb)) {	    // On met le stock à zéro		$consommablesManager->purgeConsommablesHisto($emb);		// On vérifie qu'on a bien en emballage "en cours" parmis les restants pour cette famille, et si ce n'est pas le cas, on en attribue un...		$consommablesManager->cleanConsoParDefaut($emb->getId_famille());		// On sauvegarde dans les LOGS		$log = new Log([]);		$log->setLog_texte("Suppression de l'emballage (champ 'supprime' à 1) : ID #" . $id_emballage);		$log->setLog_type('warning');		$logsManager->saveLog($log);	} // FIN test suppression OK pour Log	exit;} // FIN mode/* ---------------------------------------MODE - Modale Nouvel Embalalge (Front)---------------------------------------*/function modeModalNouvelEmballageFront() {    global $cnx, $consommablesManager;    // Récupéarion des variables    $vue_code = isset($_REQUEST['vue_code']) ? trim(strtolower($_REQUEST['vue_code'])) : '';    $vueManager = new VueManager($cnx);    $vue = $vueManager->getVueByCode($vue_code);    if (!$vue instanceof Vue) { echo "Identifiaction de la vue impossible !<br>Code Erreur : MHKZDFBM"; exit; }    // On récupère toutes les familles d'emballage pour la vue dont l'emballage en cours n'a plus de stock	$params = [        'id_vue'    => $vue->getId(),        'get_emb'   => true    ];    $famillesEmbVue = $consommablesManager->getListeConsommablesFamilles($params);    // Si aucune famille hors stock    if (empty($famillesEmbVue)) { ?>        <div class="alert alert-danger">            <i class="fa fa-times-circle text-28 vmiddle mb-2 mt-2"></i><br><strong>Aucune famille d'emballage disponible en <?php echo $vue->getNom();?></strong>            <p class="text-16">Contactez un administrateur&hellip;</p>        </div>    <?php        exit;    } // FIN aucune famille hors stock    // Familles hors stock : sélection    ?>    <div class="row">        <div class="col">            <p class="text-16"><i class="fa fa-caret-down mr-1"></i>Sélectionnez la famille d'emballages à réapprovisionner :</p>        </div>    </div>    <div class="row justify-content-md-center">        <?php        foreach ($famillesEmbVue as $fam) { ?>            <div class="col-3 mb-3">                <div class="card bg-dark text-white pointeur carte-fam-add-emb" data-id-famille="<?php echo $fam->getId();?>" data-id-old-emb="<?php echo $fam->getEmb_encours() instanceof Consommable ? $fam->getEmb_encours()->getId() : ''; ?>">                    <div class="card-header text-uppercase"><span class="badge badge-info text-14 form-control texte-fin"><?php echo $fam->getCode(); ?></span></div>                    <div class="card-body">                        <h5><?php echo $fam->getNom();?></h5>                    </div>                </div>            </div>        <?php        } // FIN boucle familles        ?>    </div>    <?php    exit;} // FIN mode/* ---------------------------------------MODE - Modale Nouvel Embalalge (Front)----------------------------------------*/function modeModalNouvelEmballageFrontEtape2() {	global $cnx, $consommablesManager;	// Récupéarion des variables	$id_fam = isset($_REQUEST['id_fam']) ? intval($_REQUEST['id_fam']) : 0 ;	$id_old_emb = isset($_REQUEST['id_old_emb']) ? intval($_REQUEST['id_old_emb']) : 0;	$oldEmb = $id_old_emb > 0 ? $consommablesManager->getConsommable($id_old_emb) : false;	$fam = $consommablesManager->getConsommablesFamille($id_fam);	if (!$fam instanceof ConsommablesFamille) { echo "Identifiaction de la famille impossible !<br>Code Erreur : IAFRCJWJ"; exit; }	// On récupère les emballages de la famille qui n'est pas par défaut    $params = [        'id_famille'    => $id_fam,        'en_stock'       => true        //'exclu'         => $id_old_emb        //'conso'         => -1 // Pas consommé (il doit rester du stock)    ];    $embs = $consommablesManager->getListeEmballages($params);	// Si aucun autre emballage disponible	if (empty($embs)) { ?>        <div class="alert alert-danger">            <h4><span class="badge badge-danger"><?php echo $fam->getNom(); ?></span></h4>            <i class="fa fa-times-circle text-28 vmiddle mb-2 mt-2"></i><br><strong>Aucun emballage en stock disponible !</strong>            <p class="text-16">Contactez un administrateur&hellip;</p>        </div>		<?php		exit;	} // FIN aucune emballage en stock	// Emballages en stock de la famille    ?>    <div class="row">        <div class="col">            <h4 class="form-control text-20 bg-dark text-white">                <div class="nomargin nopadding"><?php echo $fam->getNom(); ?></div>				<?php if ($oldEmb) { ?>                    <div class="badge badge-success border border-light text-18 texte-fin padding-5"><?php echo $oldEmb->getNumlot_frs();?></div>                    <div class="texte-fin text-14"><?php echo $oldEmb->getNom_frs()?></div>                    <hr class="margin-5 border-white">                    <div class="text-14 texte-fin <?php echo $oldEmb->getStock_actuel() < 1 ? 'text-warning' : '';?>">Stock restant : <?php echo $oldEmb->getStock_actuel()?></div>				<?php } ?>            </h4>            <div><i class="fa fa-arrow-down mb-3"></i></div>        </div>    </div>    <div class="row justify-content-md-center">		<?php		foreach ($embs as $emb) { ?>            <div class="col-4 mb-3">                <div class="card bg-secondary text-white pointeur carte-new-emb-defaut" data-id-emballage="<?php echo $emb->getId();?>">                    <div class="card-header padding-5 text-14 gris-c"><?php echo Outils::cleanCut($emb->getNom_famille(),40);?></div>                    <div class="card-body padding-5">                        <div class="badge badge-<?php                        if ($oldEmb) {							echo $emb->getId() == $oldEmb->getId() ? 'success' : 'info';						} else { echo 'info'; } ?> border border-light texte-fin text-18 padding-5 mt-3"><?php echo $emb->getNumlot_frs();?></div>                        <p class="text-14 texte-fin nomargin"><?php echo $emb->getNom_frs(); ?></p>                    </div>                    <div class="card-footer <?php echo $emb->getStock_actuel() < 1 ? 'bg-danger' : ''; ?>">						<?php echo $emb->getStock_actuel() < 1 ? '<i class="fa fa-exclamation-triangle mr-1 text-warning"></i>' : ''; ?> Stock restant : <?php echo $emb->getStock_actuel();?>                    </div>                </div>            </div>			<?php		} // FIN boucle familles		?>    </div>	<?php	exit;} // FIN mode/* ---------------------------------------MODE - Modale Nouvel Embalalge (Front)---------------------------------------*/function modeSetNewEmballageEnCours() {	global $cnx, $consommablesManager;	$lotManager     = new LotManager($cnx);	$froidManager   = new FroidManager($cnx);	$vueManager     = new VueManager($cnx);	// Récupéarion des variables	$id_emb     = isset($_REQUEST['id_emb']) ? intval($_REQUEST['id_emb']) : 0;	$id_lot     = isset($_REQUEST['id_lot']) ? intval($_REQUEST['id_lot']) : 0;	$id_froid   = isset($_REQUEST['id_froid']) ? intval($_REQUEST['id_froid']) : 0;	$code_vue   = isset($_REQUEST['code_vue']) ? trim(strtolower($_REQUEST['code_vue'])) : '';	$lot        = $id_lot > 0 ? $lotManager->getLot($id_lot) : false;	$froid      = $id_froid > 0 ? $froidManager->getFroid($id_froid) : false;	$emb        = $consommablesManager->getConsommable($id_emb);	if (!$emb instanceof Consommable || (!$lot instanceof Lot && !$froid instanceof Froid && $code_vue != 'emb')) { exit;}	$oldemb = $consommablesManager->getEmballageEnCoursByFamille($emb->getId_famille());	// On décrémente le stock actuel de l'ancien emballage    $newStockActuel = $oldemb->getStock_actuel() == 0 ? 0 : $oldemb->getStock_actuel() -1;    $oldemb->setStock_actuel($newStockActuel);    if ($newStockActuel < 1) {		$oldemb->setConsomme(1);    }    $consommablesManager->saveConsommable($oldemb);    // Si on change d'emballage, on décrémente le nouveau	if ($oldemb->getId() != $emb->getId()) {		$newStockActuel = $emb->getStock_actuel() == 0 ? 0 : $emb->getStock_actuel() -1;		$emb->setStock_actuel($newStockActuel);		$consommablesManager->saveConsommable($emb);    }    // On historise le mouvement de stock	$vue = $vueManager->getVueByCode($code_vue);	$id_vue = $vue instanceof Vue ? $vue->getId() : 0;	$consommablesManager->saveConsommablesHisto($oldemb, -1, $id_vue);	// Mise à jour de l'emballage	if ($consommablesManager->setEmballageEnCours($emb)) {		if (!$oldemb instanceof Consommable) { return false; }		// Si on ne change pas de lot, on ne fais pas de changement        if ($oldemb->getId() == $emb->getId()) {			$consommablesManager->setChangementRouleau($oldemb, $emb);			// Log			$log = new Log([]);			$log->setLog_type('info');			$log->setLog_texte("[FO] Changement de rouleau sur le même lot ID #" . $oldemb->getId()) ;			$logsManager = new LogManager($cnx);			$logsManager->saveLog($log);            exit;        }	    // Si la mise à jour a réussie et que l'ancien rouleau est bien instancié, on le note en BDD        $objet = $lot instanceof Lot ? $lot : $froid;        if ($code_vue == 'emb') { $objet = null; }		$consommablesManager->setChangementRouleau($oldemb, $emb, $objet);		// Log		$log = new Log([]);		$log->setLog_type('info');		$log->setLog_texte("[FO] Changement de rouleau ID " . $oldemb->getId() . " par " . $emb->getId()) ;		$logsManager = new LogManager($cnx);		$logsManager->saveLog($log);    } // FIN test mise à jour réussie	exit;} // FIN mode/* ---------------------------------------MODE - Déclare un défectueux---------------------------------------*/function modeDeclareDefectueux() {	global $cnx, $consommablesManager;	$id_emb = isset($_REQUEST['id_emb']) ? intval($_REQUEST['id_emb']) : 0;    if ($id_emb == 0) { exit; }    $emb = $consommablesManager->getConsommable($id_emb);    if (!$emb instanceof Consommable) { exit; }    $id_lot = isset($_REQUEST['id_lot']) ? intval($_REQUEST['id_lot']) : 0;    $id_froid = isset($_REQUEST['id_froid']) ? intval($_REQUEST['id_froid']) : 0;	$consommablesManager->addDefectueux($emb, $id_lot, $id_froid);	// Log	$log = new Log([]);	$log->setLog_type('info');	$log->setLog_texte("[FO] Déclaration d'un emballage défectueur sur le lot d'emballage ID " . $id_emb) ;	$logsManager = new LogManager($cnx);	$logsManager->saveLog($log);    exit;} // FIN mode/* ---------------------------------------MODE - Modale détail des défectueux---------------------------------------*/function modeModalDefectueux() {    global $consommablesManager;    $emb_id = isset($_REQUEST['id']) ? intval($_REQUEST['id']) : 0;    $emballage = $consommablesManager->getConsommable($emb_id);    if (!$emballage instanceof Consommable) { exit('ERREUR'); }    echo "<i class='fa fa-box-open mr-2 gris-9 text-14'></i>Défectueux de l'emballage N°".$emballage->getNumlot_frs();    echo '^'; // Séparateur Titre/Body    ?>    <table class="admin w-100 d-none d-md-table">        <thead>            <tr>                <th>Date</th>                <th>Quantième</th>                <th>Lot</th>                <th>Traitement</th>                <th>Nb de défectueux</th>            </tr>        </thead>        <tbody>        <?php        // Boucle sur l'array de sous-objets Defectueux        foreach ($emballage->getDefectueux() as $def) { ?>            <tr>                <td><?php echo Outils::dateSqlToFr($def->getDate()); ?></td>                <td><?php echo Outils::getJourAnByDate($def->getDate()); ?></td>                <td><?php if ($def->getNum_lot() != '') {                            echo $def->getNum_lot();                        } else { echo '&mdash;'; }; ?>                </td>                <td><?php if ($def->getCode_froid() != '') {						echo $def->getCode_froid();					} else { echo '&mdash;'; }; ?>                </td>                <td><?php echo $def->getQte(); ?></td>            </tr>        <?php } // FIN boucle defectueux        ?>        </tbody>    </table>    <?php    exit;} // FIN mode/* ------------------------------------------MODE - Export en PDF-------------------------------------------*/function modeExportPdf() {	global $tiersManager;	$type = isset($_REQUEST['type']) ? trim(strtolower($_REQUEST['type'])) : 'lots';	require_once(__CBO_ROOT_PATH__.'/vendor/html2pdf/html2pdf.class.php');	ob_start();	$content = genereContenuPdf($type);	$content .= ob_get_clean();	// On supprime tous les fichiers du même genre sur le serveur	foreach (glob(__CBO_ROOT_PATH__.'/temp/iprexemb-*.pdf') as $fichier) {		unlink($fichier);	}	try {		$nom_fichier = 'iprexemb-'.date('is').'.pdf';		$html2pdf = new HTML2PDF('P', 'A4', 'fr', false, 'ISO-8859-15');		$html2pdf->pdf->SetAutoPageBreak(false, 0);		$html2pdf->setDefaultFont('helvetica');		$html2pdf->writeHTML(utf8_decode($content));;		$savefilepath = __CBO_ROOT_PATH__.'/temp/'.$nom_fichier;		$html2pdf->Output($savefilepath, 'F');		echo __CBO_TEMP_URL__.$nom_fichier;	}	catch(HTML2PDF_exception $e) {		exit;	}	exit;} // FIN mode/* ----------------------------------------------------------------------------FONCTION DEPORTEE - Génère le contenu HTML pour le PDF-----------------------------------------------------------------------------*/function genereContenuPdf($type = 'lots') {	global $cnx, $consommablesManager;	// HEAD	$contenu = '<!DOCTYPE html><html><head>  <meta http-equiv="Content-Type" content="text/html; charset=utf-8"/>  <style type="text/css">      * { margin:0; padding: 0; }      .header { border-bottom: 2px solid #ccc; }    .header img.logo { width: 200px; }    .text-right { text-align: right; }    .text-center { text-align: center; }    .table { border-collapse: collapse; }    .table-donnees th { font-size: 11px; }    .table-liste th { font-size: 9px; background-color: #d5d5d5; padding:3px; }    .table-liste td { font-size: 9px; padding-top: 3px; padding-bottom: 3px; border-bottom: 1px solid #ccc;}    .table-liste td.no-bb { border-bottom: none; padding-bottom: 0px; }    .titre {       background-color: teal;       color: #fff;       padding: 3px;       text-align: center;       font-weight: normal;       font-size: 14px;    }    .recap {       background-color: #ccc;       padding: 3px;       text-align: center;       font-weight: normal;       font-size: 10px;    }        .w100 { width: 100%; }    .w75 { width: 75%; }    .w50 { width: 50%; }    .w45 { width: 45%; }    .w40 { width: 40%; }    .w25 { width: 25%; }    .w35 { width: 35%; }    .w33 { width: 33%; }    .w34 { width: 34%; }    .w30 { width: 30%; }    .w20 { width: 20%; }    .w30 { width: 30%; }    .w15 { width: 15%; }    .w35 { width: 35%; }    .w5 { width: 5%; }    .w10 { width: 10%; }    .w15 { width: 15%; }        .text-6 { font-size: 6px; }    .text-7 { font-size: 7px; }    .text-8 { font-size: 8px; }    .text-9 { font-size: 9px; }    .text-10 { font-size: 10px; }    .text-11 { font-size: 11px; }    .text-12 { font-size: 12px; }    .text-14 { font-size: 14px; }    .text-16 { font-size: 16px; }    .text-18 { font-size: 18px; }    .text-20 { font-size: 20px; }        .gris-3 { color:#333; }    .gris-5 { color:#555; }    .gris-7 { color:#777; }    .gris-9 { color:#999; }    .gris-c { color:#ccc; }    .gris-d { color:#d5d5d5; }    .gris-e { color:#e5e5e5; }        .mt-0 { margin-top: 0px; }    .mt-2 { margin-top: 2px; }    .mt-5 { margin-top: 5px; }    .mt-10 { margin-top: 10px; }    .mt-15 { margin-top: 15px; }    .mt-20 { margin-top: 20px; }    .mt-25 { margin-top: 25px; }    .mt-50 { margin-top: 50px; }        .mb-0 { margin-bottom: 0px; }    .mb-2 { margin-bottom: 2px; }    .mb-5 { margin-bottom: 5px; }    .mb-10 { margin-bottom: 10px; }    .mb-15 { margin-bottom: 15px; }    .mb-20 { margin-bottom: 20px; }    .mb-25 { margin-bottom: 25px; }    .mb-50 { margin-bottom: 50px; }        .mr-0 { margin-right: 0px; }    .mr-2 { margin-right: 2px; }    .mr-5 { margin-right: 5px; }    .mr-10 { margin-right: 10px; }    .mr-15 { margin-right: 15px; }    .mr-20 { margin-right: 20px; }    .mr-25 { margin-right: 25px; }    .mr-50 { margin-right: 50px; }        .ml-0 { margin-left: 0px; }    .ml-2 { margin-left: 2px; }    .ml-5 { margin-left: 5px; }    .ml-10 { margin-left: 10px; }    .ml-15 { margin-left: 15px; }    .ml-20 { margin-left: 20px; }    .ml-25 { margin-left: 25px; }    .ml-50 { margin-left: 50px; }        .pt-0 { padding-top: 0px; }    .pt-2 { padding-top: 2px; }    .pt-5 { padding-top: 5px; }    .pt-10 { padding-top: 10px; }    .pt-15 { padding-top: 15px; }    .pt-20 { padding-top: 20px; }    .pt-25 { padding-top: 25px; }    .pt-50 { padding-top: 50px; }        .pb-0 { padding-bottom: 0px; }    .pb-2 { padding-bottom: 2px; }    .pb-5 { padding-bottom: 5px; }    .pb-10 { padding-bottom: 10px; }    .pb-15 { padding-bottom: 15px; }    .pb-20 { padding-bottom: 20px; }    .pb-25 { padding-bottom: 25px; }    .pb-50 { padding-bottom: 50px; }        .pr-0 { padding-right: 0px; }    .pr-2 { padding-right: 2px; }    .pr-5 { padding-right: 5px; }    .pr-10 { padding-right: 10px; }    .pr-15 { padding-right: 15px; }    .pr-20 { padding-right: 20px; }    .pr-25 { padding-right: 25px; }    .pr-50 { padding-right: 50px; }        .pl-0 { padding-left: 0px; }    .pl-2 { padding-left: 2px; }    .pl-5 { padding-left: 5px; }    .pl-10 { padding-left: 10px; }    .pl-15 { padding-left: 15px; }    .pl-20 { padding-left: 20px; }    .pl-25 { padding-left: 25px; }    .pl-50 { padding-left: 50px; }        .text-danger { color: #d9534f; }      </style> </head><body>';	$contenu.=  genereEntetePagePdf($type);	// PAGE 1	// GENERAL	// Préparation des variables	$na             = '<span class="gris-9 text-11"><i>Non renseigné</i></span>';	$tiret          = '<span class="gris-9 text-11"><i>-</i></span>';	// Préparation des variables	$params = $type == 'lots'        ? []        : [            'show_inactifs'  => true,            'show_supprimes' => false,            'get_nonconso'   => true	    ];	$liste = $type == 'lots' ?  $consommablesManager->getListeEmballages($params) : $consommablesManager->getListeConsommablesFamilles($params);	// Génération du contenu HTML	$contenu.= '<table class="table table-liste w100 mt-10">';	// Aucun item	if (empty($liste)) {		$contenu.= '<tr><td class="w100 text-center gris-9 text-11"><i>Aucun '.$type.' d\'emballage</i></td></tr>';		// Liste des items	} else {		$contenu.= $type == 'lots'            ? '<tr>                    <th class="w15">Numéro de lot</th>                    <th class="w30">Famille</th>                    <th class="w20">Fournisseur</th>                    <th class="w10">Date réception</th>                    <th class="w5 text-center">Reçu</th>                    <th class="w5 text-center">Qté</th>                    <th class="w10 text-center">Defectueux</th>                    <th class="w5 text-center">En cours</th>                </tr>'            :  '<tr>                    <th class="w45">Nom</th>                    <th class="w15">Code</th>                    <th class="w35">Vues</th>                    <th class="w5 text-center">Actif</th>                </tr>';		foreach ($liste as $item) {			if ($type == 'lots') {			    $encours = $item->getEncours() == 1  ? 'Oui' : 'Non';            } else {				$actif        = $item->getActif() > 0 ? 'Oui' : 'Non';			    $vues = '';			    foreach ($item->getVues() as $famvue) {					$vues.= $famvue->getNom() . ', ';                }			    if (strlen($vues) > 2) {					$vues = substr($vues,0,-2);                }            }			$contenu.= $type == 'lots'                ? '<tr>                        <td class="w15">' . $item->getNumlot_frs() . '</td>                        <td class="w30">' . $item->getNom_famille() . '</td>                        <td class="w20">' . $item->getNom_frs() . '</td>                        <td class="w10">' . Outils::dateSqlToFr($item->getDate_rcp()) . '</td>                        <td class="w5 text-center">' . $item->getStock_initial() . '</td>                        <td class="w5 text-center">' . $item->getStock_actuel() . '</td>                        <td class="w10 text-center">' . count($item->getDefectueux()) . '</td>                        <td class="w5 text-center">' . $encours  . '</td>                   </tr>'                : '<tr>                        <td class="w45">' . $item->getNom() . '</td>                        <td class="w15">' . $item->getCode() . '</td>                        <td class="w35">' . $vues . '</td>                        <td class="w5 text-center">' . $actif . '</td>                    </tr>';		} // FIN boucle sur les items	} // FIN test produits	$contenu.= '</table>';	$contenu.= '<table class="table w100 mt-15"><tr><th class="w100 recap">Nombre de '.$type.' : '. count($liste) .'</th></tr></table>';	// FOOTER	$contenu.= '<table class="w100 gris-9">                    <tr>                        <td class="w50 text-8">Document édité le '.date('d/m/Y').' à '.date('H:i:s').'</td>                        <td class="w50 text-right text-6">&copy; 2019 IPREX / INTERSED </td>                    </tr>                </table>            </body>        </html>';	// RETOUR CONTENU	return $contenu;} // FIN fonction déportée/* ----------------------------------------------------------------------------FONCTION DEPORTEE - Génère le header du PDF (logo...)-----------------------------------------------------------------------------*/function genereEntetePagePdf($type = 'lots') {	global $cnx;	$entete = '<div class="header">                <table class="table w100">                    <tr>                        <td class="w33"><img src="'.__CBO_ROOT_URL__.'img/logo-pe-350.jpg" alt="PROFIL EXPORT" class="logo"/></td>                        <td class="w34 text-center pt-10">                            Liste des '.$type.' d\'emballages au '.date("d/m/Y").'                        </td>                        <td class="w33 text-right text-14">                            <p class="text-18"><b>IPREX</b></p>                            <p class="text-12 gris-7">Intranet PROFIL EXPORT</p>                        </td>                    </tr>                                </table>               </div>';	return $entete;} // FIN fonction déportée