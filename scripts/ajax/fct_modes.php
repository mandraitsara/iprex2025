<?php/*   _|_|_|  _|_|_|    _| _|        _|    _|  _|        CBO FrameWork _|        _|_|_|    _|        (c) 2018 Cédric Bouillon _|        _|    _|  _|   _|_|_|  _|_|_|    _|_|_|_|--------------------------------------------------------Contrôleur Ajax MODES------------------------------------------------------*/// Initialisation du mode d'appel$mode       = isset($_REQUEST['mode']) ? $_REQUEST['mode'] : '';// Intégration de la configuration du FrameWork et des autorisationsrequire_once '../php/config.php';// Instanciation des Managers$modesReglementManager = new ModesReglementManager($cnx);$fonctionNom = 'mode'.ucfirst($mode);if (function_exists($fonctionNom)) {	$fonctionNom();}/* --------------------------------------MODE - Modale Mode--------------------------------------*/function modeModalModeReglement() {	global $modesReglementManager;	// On vérifie qu'on est bien loggé	if (!isset($_SESSION['logged_user'])) { exit;}	$id_mode     = isset($_REQUEST['id']) ? intval($_REQUEST['id']) : 0;	$mode        = $id_mode > 0 ? $modesReglementManager->getModeReglement($id_mode) : new ModeReglement([]);	// Retour Titre	echo '<i class="fa fa-folder-open"></i>';	echo $id_mode > 0 ? $mode->getNom() : "Nouveau mode de règlement&hellip;";	// Séparateur Titre/Body pour le callback aJax	echo '^';	// Retour Body ?>    <form class="container-fluid" id="formModeAddUpd">        <input type="hidden" name="mode" value="saveMode"/>        <input type="hidden" name="id_mode" id="input_id" value="<?php echo $id_mode; ?>"/>        <div class="row">            <div class="col-12 input-group mb-2">                <div class="input-group-prepend">                    <span class="input-group-text">Libellé</span>                </div>                <input type="text" class="form-control" placeholder="Nom du mode de règlement" name="nom" id="input_nom" value="<?php echo $mode->getNom(); ?>">                <div class="invalid-feedback">Un nom est obligatoire.</div>            </div>        </div>    </form>	<?php	// Séparateur Body/Footer pour le callback aJax	echo '^';	// Retour boutons footer si mode  existant (bouton supprimer)	if ($id_mode > 0) {		?>        <button type="button" class="btn btn-danger btn-sm btnSupprimeMode">            <i class="fa fa-times fa-lg vmiddle mr-1"></i> Supprimer        </button>		<?php	} // FIN test édition utilisateur existant	exit;} // FIN mode/* -------------------------------------------------MODE - Enregistre un mode (add/upd)--------------------------------------------------*/function modeSaveMode() {	global $modesReglementManager, $cnx;	// Vérification des données	$id_mode   = isset($_REQUEST['id_mode'])  ? intval($_REQUEST['id_mode'])     : 0;	$nom           = isset($_REQUEST['nom'])            ? trim($_REQUEST['nom'])    : '';	// Si pas de nom on ne vas pas plus loin...	if ($nom == '') {		$nom = 'Sans nom';		exit;	} // FIN test champs requis	$nom = htmlspecialchars(str_replace('#et#', '&', $nom));	// Instanciation de l'objet PRODUITECATEGORIE (hydraté ou vide)	$mode = $id_mode > 0 ? $modesReglementManager->getModeReglement($id_mode) : new ModeReglement([]);	// mise à jour des champs de base	$mode->setNom($nom);	// Enregistrement et retour pour callBack ajax	$retour = $modesReglementManager->saveModeReglement($mode);	// Logs	$logsManager = new LogManager($cnx);	$log = new Log([]);	if ($retour) {		$log->setLog_type('info');		if ($id_mode == 0) {			$log->setLog_texte("Création d'un nouveau mode de règlement : " . $nom);		} else {			$log->setLog_texte("Renommage du mode de règlement ID #" . (int)$id_mode);		}	} else {		$log->setLog_type('danger');		if ($id_mode == 0) {			$log->setLog_texte("ERREUR lors de la création d'un nouveau mode de règlement : " . $nom);		} else {			$log->setLog_texte("ERREUR lors du renommage du mode de règlement ID #" . (int)$id_mode);		}	} // FIN test retour création/maj pour log	$logsManager->saveLog($log);	echo $retour !== false ? '1' : '0';	exit;} // FIN mode/* ----------------------------------------------MODE - Affiche la liste des modes-----------------------------------------------*/function modeShowListeModes() {	global $modesReglementManager, $utilisateur;	$liste = $modesReglementManager->getListeModesReglements();	// Si aucun mode a afficher	if (empty($liste)) { ?>        <div class="alert alert-danger">            <i class="fa fa-times-circle text-28 vmiddle mr-1"></i> <strong>Aucun mode de règlement !</strong>        </div>		<?php	// Sinon, affichage de la liste des modes	} else { ?>        <div class="alert alert-danger d-md-none text-center">            <i class="fa fa-exclamation-circle text-28 mb-1"></i> <p>Connectez-vous depuis un apareil permettant un affichage plus large pour afficher cet écran&hellip;</p>        </div>        <table class="admin w-100 d-none d-md-table">            <thead>            <tr>				<?php				// On affiche l'ID que si on est développeur				if ($utilisateur->isDev()) { ?><th class="w-court-admin-cell d-none d-xl-table-cell">ID</th><?php } ?>                <th>Nom</th>                <th class="t-actions w-court-admin-cell">Modifier</th>            </tr>            </thead>            <tbody>			<?php			// Boucle sur les modes			foreach ($liste as $mode) {				?>                <tr>					<?php					// On affiche l'ID que si on est développeur					if ($utilisateur->isDev()) { ?>                        <td class="w-court-admin-cell d-none d-xl-table-cell"><span class="badge badge-pill badge-warning"><?php echo $mode->getId();?></span></td>					<?php } ?>                    <td class="text-18"><?php echo $mode->getNom();?></td>                    <td class="t-actions w-court-admin-cell"><button type="button" class="btn btn-sm btn-secondary" data-toggle="modal" data-target="#modalModes" data-mode-id="<?php echo $mode->getId(); ?>"><i class="fa fa-edit"></i> </button></td>                </tr>				<?php			} // FIN boucle modes ?>            </tbody>        </table>	<?php } // FIN test mdoes à afficher	exit;} // FIN mode/* ---------------------------------------MODE - Supprime un mode---------------------------------------*/function modeSupprModeReglement() {	global $modesReglementManager,$cnx;	//  -> On ne supprime pas réellement pour les raisons de traçabilité, on passe le champ "supprime" à 1    // On récupère l'ID de la catégorie, si il n'est pas clairement identifié, on ne va pas plus loin	$id_mode = isset($_REQUEST['id_mode']) ? intval($_REQUEST['id_mode']) : 0;	if ($id_mode == 0) { exit; }	// Instanciation de l'objet	$mode = $modesReglementManager->getModeReglement($id_mode);	// Si on a pas un objet ModeReglement en retour, on ne va pas plus loin !	if (!$mode instanceof ModeReglement) { exit; }	// On passe le statut à supprimé	$mode->setSupprime(1);	// Si la mise à jour s'est bien passé en BDD	if ($modesReglementManager->saveModeReglement($mode)) {		$logsManager = new LogManager($cnx);		// On sauvegarde dans les LOGS		$log = new Log([]);		$log->setLog_texte("Suppression d'un mode de règlement (champ 'supprime' à 1) : ID #" . $id_mode . "");		$log->setLog_type('warning');		$logsManager->saveLog($log);	} // FIN test suppression OK pour Log	exit;} // FIN mode