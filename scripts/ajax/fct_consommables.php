<?php/*   _|_|_|  _|_|_|    _| _|        _|    _|  _|        CBO FrameWork _|        _|_|_|    _|        (c) 2018 Cédric Bouillon _|        _|    _|  _|   _|_|_|  _|_|_|    _|_|_|_|--------------------------------------------------------Contrôleur Ajax CONSOMMABLES (Hors emballages)------------------------------------------------------*/ini_set('display_errors',1);error_reporting(0);// Évite les problèmes de génération de PDF suite à des Warning// Initialisation du mode d'appel$mode       = isset($_REQUEST['mode']) ? $_REQUEST['mode'] : '';// Intégration de la configuration du FrameWork et des autorisationsrequire_once '../php/config.php';// Instanciation des Managers$consommablesManager = new ConsommablesManager($cnx);$logsManager = new LogManager($cnx);$fonctionNom = 'mode'.ucfirst($mode);if (function_exists($fonctionNom)) {	$fonctionNom();}/* ----------------------------------------------------------------------MODE - Enregistre une famille de consommable (add/upd) - hors Emballages-----------------------------------------------------------------------*/function modeSaveConsommablesFamille() {    global $consommablesManager, $cnx;	// Vérification des données	$famille_id      = isset($_REQUEST['famille_id'])     ? intval($_REQUEST['famille_id'])     : 0;	$id_type         = isset($_REQUEST['type_id'])        ? intval($_REQUEST['type_id'])        : 0;	$nom             = isset($_REQUEST['nom'])            ? trim($_REQUEST['nom'])              : '';	$activation      = isset($_REQUEST['activation'])     ? 1 : 0;	// Si pas de code ou de nom, on ne vas pas plus loin...	if ($nom == '' || $id_type == 0) { echo '-1'; exit; } // FIN test champs requis	$nom = str_replace('#et#', '&', $nom);	// Instanciation de l'objet (hydraté ou vide)	$consommablesFamille = $famille_id > 0 ? $consommablesManager->getConsommablesFamille($famille_id) : new ConsommablesFamille([]);	// mise à jour des champs de base	$consommablesFamille->setNom($nom);	$consommablesFamille->setDate_maj(date('Y-m-d H:i:s'));	$consommablesFamille->setActif($activation);	// Si création, on enregistre la date et le type	if ($famille_id == 0) {		$consommablesFamille->setId_type($id_type);		$consommablesFamille->setDate_add(date('Y-m-d H:i:s'));	}    // Enregistrement et retour pour callBack ajax    $retour = $consommablesManager->saveConsommablesFamille($consommablesFamille);    // Logs    $logsManager = new LogManager($cnx);    $log = new Log([]);    if ($retour) {		$log->setLog_type('info');		if ($famille_id == 0) {		    $log->setLog_texte("Création d'une nouvelle famille de consommables : " . $nom);        } else {			$log->setLog_texte("Mise à jour des informations de la famille dde consommables #" . (int)$famille_id);        }    } else {		$log->setLog_type('danger');		if ($famille_id == 0) {			$log->setLog_texte("ERREUR lors de la création d'une nouvelle famille de consommables : " . $nom);		} else {			$log->setLog_texte("ERREUR lors de la mise à jour des informations de la famille dde consommables #" . (int)$famille_id);		}    } // FIN test retour création/maj pour log	$logsManager->saveLog($log);	echo $retour !== false ? '1' : '0';	exit;} // FIN mode/* -----------------------------------------------MODE - Affiche la liste des types de consommables------------------------------------------------*/function modeShowListeTypesConsommables() {    global	    $utilisateur,	    $consommablesManager;    $params = [            'show_inactifs' => true,            'show_supprimes' => false    ];	$liste = $consommablesManager->getListeTypesConsommables($params);	// Si aucun emballage a afficher	if (empty($liste)) { ?>        <div class="alert alert-danger">            <i class="fa fa-times-circle text-28 vmiddle mr-1"></i> <strong>Aucun type de consommable !</strong>        </div>    <?php	// Sinon, affichage de la liste des familles d'emballages	} else { ?>        <div class="alert alert-danger d-md-none text-center">            <i class="fa fa-exclamation-circle text-28 mb-1"></i> <p>Connectez-vous depuis un apareil permettant un affichage plus large pour afficher cet écran&hellip;</p>        </div>        <table class="admin w-100 d-none d-md-table">            <thead>                <tr>				    <?php                    // On affiche l'ID que si on est développeur                    if ($utilisateur->isDev()) { ?><th class="w-court-admin-cell d-none d-xl-table-cell">ID</th><?php } ?>                    <th>Type de consommables</th>                    <th class="text-center">Familles</th>                    <th class="text-center">Sous-familles</th>                    <th class="text-center">Quantité</th>                    <th class="text-center w-court-admin-cell">Actif</th>                    <th class="t-actions text-center w-mini-admin-cell">Modifier</th>                    <th class="t-actions text-center w-mini-admin-cell">Afficher</th>                </tr>            </thead>            <tbody>			    <?php                // Boucle sur les types de consommables				foreach ($liste as $consommablesType) {				    $urlFamilleAdmin = $consommablesType->getId() == 1 ? 'admin-emballages-familles.php' : 'admin-consommables-familles.php';					?>                    <tr<?php echo $consommablesType->getStock_actuel() < 1 ? ' class="tr-stock-vide"' : ''; ?>>						<?php						// On affiche l'ID que si on est développeur                        if ($utilisateur->isDev()) { ?>                            <td class="w-court-admin-cell d-none d-xl-table-cell"><span class="badge badge-pill badge-warning"><?php echo $consommablesType->getId();?></span></td>                        <?php } ?>                        <td class="text-18"><a href="<?php echo __CBO_ROOT_URL__.$urlFamilleAdmin; ?>?f=<?php echo base64_encode($consommablesType->getId()); ?>" class=""><?php echo $consommablesType->getNom();?></a></td>                        <td class="w-court-admin-cell text-center"><?php echo $consommablesType->getNbFamilles(); ?></td>                        <td class="w-court-admin-cell text-center"><?php echo $consommablesType->getNbConsommables(); ?></td>                        <td class="w-court-admin-cell text-center"><span class="badge badge-pill badge-<?php echo $consommablesType->getStock_actuel() > 0 ? 'secondary' : 'danger'; ?> text-14"><?php echo $consommablesType->getStock_actuel(); ?></span></td>                        <td class="text-center w-court-admin-cell"><i class="fa fa-fw fa-lg fa-<?php echo $consommablesType->isActif() ? 'check-circle text-success' : 'times-circle text-danger'; ?>"></i></td>                        <td class="t-actions w-court-admin-cell"><button type="button" class="btn btn-sm btn-secondary" data-toggle="modal" data-target="#modalTypeConsommable" data-type-id="<?php							echo $consommablesType->getId(); ?>" <?php echo $consommablesType->getId() < 3 ? 'disabled' : '';?>><i class="fa fa-edit"></i> </button>                        </td>                        <td class="t-actions w-court-admin-cell">                            <a href="<?php echo __CBO_ROOT_URL__.$urlFamilleAdmin; ?>?f=<?php echo base64_encode($consommablesType->getId()); ?>" class="btn btn-sm btn-secondary"><i class="fa fa-ellipsis-h"></i></a>                        </td>                        </tr>                <?php				} // FIN boucle emballages ?>            </tbody>        </table>        <div class="alert alert-info d-none">            <i class="fa fa-info-circle fa-lg mr-1"></i>            Afin d'assurer le fonctionnement optimal de l'application, le type "Emballages" n'est pas modifiable.        </div>	<?php } // FIN test emballages à afficher    exit;} // FIN mode/* -----------------------------------------------MODE - Affiche la liste des familles de consommables------------------------------------------------*/function modeShowListeFamillesConsommables() {	global $utilisateur, $consommablesManager;	$type_id = isset($_REQUEST['type_id']) ? intval($_REQUEST['type_id']) : 0;	if ($type_id == 0) { exit; }	$consType = $consommablesManager->getTypeConsommables($type_id);	if (!$consType instanceof ConsommablesTypes) { exit; }	$params = [		'show_inactifs'     => true,		'show_supprimes'    => false,        'get_stock'         => true,        'id_type'           => $type_id	];	$liste = $consommablesManager->getListeConsommablesFamilles($params);	// Si aucun emballage a afficher	if (empty($liste)) { ?>        <div class="alert alert-info padding-50 text-center">            <i class="fa fa-info-circle fa-3x vmiddle mb-2"></i>            <p class="text-22">Aucune famille de consommables en <?php echo strtolower($consType->getNom()); ?>.</p>            <p class="mt-2">Cliquez sur "Nouvelle famille&hellip;" pour en ajouter&hellip;</p>        </div>		<?php		// Sinon, affichage de la liste des familles d'emballages	} else { ?>        <div class="alert alert-danger d-md-none text-center">            <i class="fa fa-exclamation-circle text-28 mb-1"></i> <p>Connectez-vous depuis un apareil permettant un affichage plus large pour afficher cet écran&hellip;</p>        </div>        <table class="admin w-100 d-none d-md-table">            <thead>            <tr>				<?php				// On affiche l'ID que si on est développeur				if ($utilisateur->isDev()) { ?><th class="w-court-admin-cell d-none d-xl-table-cell">ID</th><?php } ?>                <th>Libellé</th>                <th class="text-center">Sous-familles</th>                <th class="text-center">Quantité</th>                <th class="text-center w-court-admin-cell">Actif</th>                <th class="t-actions text-center w-mini-admin-cell">Modifier</th>                <th class="t-actions text-center w-mini-admin-cell">Afficher</th>            </tr>            </thead>            <tbody>			<?php			// Boucle sur les familles de consommables			foreach ($liste as $consommablesFamille) {			    ?>                <tr<?php echo $consommablesFamille->isActif() && $consommablesFamille->getStock_actuel() < 1 ? ' class="tr-stock-vide"' : ''; ?>>					<?php					// On affiche l'ID que si on est développeur					if ($utilisateur->isDev()) { ?>                        <td class="w-court-admin-cell d-none d-xl-table-cell"><span class="badge badge-pill badge-warning"><?php echo $consommablesFamille->getId();?></span></td>					<?php } ?>                    <td class="text-18"><a href="<?php echo __CBO_ROOT_URL__; ?>admin-consommables.php?c=<?php echo base64_encode($consommablesFamille->getId()); ?>" class="<?php echo !$consommablesFamille->isActif() ? 'gris-5' : '';?>"><?php echo $consommablesFamille->getNom();?></a></td>                    <td class="w-court-admin-cell text-center <?php echo !$consommablesFamille->isActif() ? 'gris-5' : '';?>"><?php echo $consommablesFamille->getNb_consommables(); ?></td>                    <td class="w-court-admin-cell text-center <?php echo !$consommablesFamille->isActif() ? 'gris-5' : '';?>"><span class="badge badge-pill badge-<?php echo $consommablesFamille->getStock_actuel() > 0 ? 'secondary' : 'danger'; ?> text-14"><?php echo $consommablesFamille->getStock_actuel(); ?></span></td>                    <td class="text-center w-court-admin-cell"><i class="fa fa-fw fa-lg fa-<?php echo $consommablesFamille->isActif() ? 'check-circle text-success' : 'times-circle text-danger'; ?>"></i></td>                    <td class="t-actions w-court-admin-cell"><button type="button" class="btn btn-sm btn-secondary" data-toggle="modal" data-target="#modalFamilleConsommable" data-famille-id="<?php						echo $consommablesFamille->getId(); ?>" <?php echo $consommablesFamille->getId() == 1 ? 'disabled' : '';?>><i class="fa fa-edit"></i> </button>                    </td>                    <td class="t-actions w-court-admin-cell">                        <a href="<?php echo __CBO_ROOT_URL__; ?>admin-consommables.php?c=<?php echo base64_encode($consommablesFamille->getId()); ?>" class="btn btn-sm btn-secondary"><i class="fa fa-ellipsis-h"></i></a>                    </td>                </tr>				<?php			} // FIN boucle emballages ?>            </tbody>        </table>	<?php } // FIN test emballages à afficher	exit;} // FIN mode/* -----------------------------------------------MODE - Affiche la liste des consommables------------------------------------------------*/function modeShowListeConsommables() {	global $utilisateur, $consommablesManager;	$famille_id = isset($_REQUEST['famille_id']) ? intval($_REQUEST['famille_id']) : 0;	if ($famille_id == 0) { exit; }	$consFam = $consommablesManager->getConsommablesFamille($famille_id);	if (!$consFam instanceof ConsommablesFamille) { exit; }	$params = [		'show_inactifs'     => true,		'show_supprimes'    => false,		'id_famille'        => $famille_id	];	$liste = $consommablesManager->getListeConsommables($params);	// Si aucun emballage a afficher	if (empty($liste)) { ?>        <div class="alert alert-info padding-50 text-center">            <i class="fa fa-info-circle fa-3x vmiddle mb-2"></i>            <p class="text-22">Aucune référence en <?php echo strtolower($consFam->getNom()); ?>.</p>            <p class="mt-2">Cliquez sur "Nouvelle référence&hellip;" pour en ajouter&hellip;</p>        </div>		<?php	// Sinon, affichage de la liste des familles d'emballages	} else { ?>        <div class="alert alert-danger d-md-none text-center">            <i class="fa fa-exclamation-circle text-28 mb-1"></i> <p>Connectez-vous depuis un apareil permettant un affichage plus large pour afficher cet écran&hellip;</p>        </div>        <table class="admin w-100 d-none d-md-table">            <thead>            <tr>				<?php				// On affiche l'ID que si on est développeur				if ($utilisateur->isDev()) { ?><th class="w-court-admin-cell d-none d-xl-table-cell">ID</th><?php } ?>                <th>Fournisseur</th>                <th>Référence / Numéro de lot</th>                <th>Reçu le</th>                <th>DLC</th>                <th class="w-court-admin-cell text-center">Stock reçu</th>                <th class="w-court-admin-cell text-center">Quantité</th>                <th class="w-court-admin-cell text-center">Défectueux</th>                <th class="w-court-admin-cell text-center">En cours</th>                <th class="t-actions w-court-admin-cell">Détails</th>            </tr>            </thead>            <tbody>			<?php			// Boucle sur les consommables			foreach ($liste as $consommable) {				?>                <tr<?php echo $consommable->getStock_actuel() < 1 ? ' class="tr-stock-vide"' : ''; ?>>					<?php					// On affiche l'ID que si on est développeur					if ($utilisateur->isDev()) { ?>                        <td class="w-court-admin-cell d-none d-xl-table-cell"><span class="badge badge-pill badge-warning text-14"><?php echo $consommable->getId();?></span></td>					<?php } ?>                    <td><?php echo $consommable->getNom_frs();?></td>                    <td><?php echo $consommable->getNumlot_frs();?></td>                    <td><?php echo $consommable->getDate_rcp() != '' ? Outils::dateSqlToFr($consommable->getDate_rcp()) : '&mdash;';?></td>                    <td><?php echo $consommable->getDate_dlc() != '' ? Outils::dateSqlToFr($consommable->getDate_dlc()) : '&mdash;';?></td>                    <td class="text-center text-16"><?php echo $consommable->getStock_initial(); ?></td>                    <td class="text-center"><?php						$cssBadge = 'secondary';						if ($consommable->getStock_actuel() < 1) {							$cssBadge = 'danger';						} else if ($consommable->getStock_actuel() == $consommable->getStock_initial()) {							$cssBadge = 'success';						}						if ($consommable->getStock_actuel() > 0 && $consommable->getStock_actuel() < 3) {							$cssBadge = 'warning';						}						echo '<span class="badge badge-pill badge-'.$cssBadge.' text-14">';						echo $consommable->getStock_actuel();						echo '</span>';						?>                    </td>                    <td class="text-center">						<?php if (count($consommable->getDefectueux()) > 0) { ?>                            <span class="badge-pill badge badge-danger text-14 pointeur" data-toggle="modal" data-target="#modalDefectueux" data-id-emb="<?php echo $consommable->getId(); ?>"><?php echo $consommable->getTotalDefectueux(); ?></span>						<?php } else { ?>                            <i class="fa fa-minus fa-fw fa-lg gris-c"></i>						<?php } ?>                    </td>                    <td class="text-center"><?php echo $consommable->getEncours() == 1 ? '<i class="fa fa-check fa-lg text-success"></i>' : '&mdash;';?></td>                    <td class="t-actions w-court-admin-cell"><button type="button" class="btn btn-sm btn-secondary" data-toggle="modal" data-target="#modalConsommable" data-consommable-id="<?php						echo $consommable->getId(); ?>"><i class="fa fa-edit"></i> </button></td>                </tr>				<?php			} // FIN boucle emballages ?>            </tbody>        </table>	<?php } // FIN test emballages à afficher	exit;} // FIN mode/* -----------------------------------------MODE - Modale Type Consommable (admin)-----------------------------------------*/function modeModalTypeConsommable() {	global $cnx, $utilisateur, $consommablesManager;	// On vérifie qu'on est bien loggé	if (!isset($_SESSION['logged_user'])) { exit;}	$type_id         = isset($_REQUEST['id']) ? intval($_REQUEST['id']) : 0;	$consommableType = $type_id > 0 ? $consommablesManager->getTypeConsommables($type_id) : new ConsommablesTypes([]);	// On instancie l'utilisateur en session s'il ne l'est pas déjà	if (!isset($utilisateur)) {		$utilisateur = unserialize($_SESSION['logged_user']);	}	// Retour Titre	echo '<i class="fa fa-leaf"></i>';	echo $type_id > 0 ? 'Type ' . $consommableType->getNom() : "Nouveau type de consommables&hellip;";	// Séparateur Titre/Body pour le callback aJax	echo '^';	// Retour Body ?>    <form class="container-fluid" id="formConsommablesTypesAddUpd">        <input type="hidden" name="mode" value="saveConsommablesType"/>        <input type="hidden" name="type_id" id="input_id" value="<?php echo $type_id; ?>"/>        <div class="row">            <div class="col-12 col-lg-10 input-group mb-2">                <div class="input-group-prepend">                    <span class="input-group-text">Libellé</span>                </div>                <input type="text" class="form-control" placeholder="Nom du type" name="nom" id="input_nom" value="<?php echo str_replace('"', "''",$consommableType->getNom()); ?>">                <div class="invalid-feedback">Le libellé est obligatoire.</div>            </div>            <div class="col-12 col-lg-2 mb-2 text-right">                <input type="checkbox" class="togglemaster" data-toggle="toggle" name="activation"					<?php                    echo $consommableType->isActif() ? 'checked' : '';                    echo $consommableType->getId()  == 1 ? 'disabled' : ''; //  (normalement on arrive pas sur cette modale sur le type 1 "emballages" mais on ne sais jamais)                    ?>                       data-on="Activé"                       data-off="Désactivé"                       data-onstyle="success"                       data-offstyle="danger"                />            </div>        </div>    </form>	<?php	// Séparateur Body/Footer pour le callback aJax	echo '^';	// Retour boutons footer si une famille d'emballage existant (bouton supprimer)	if ($type_id > 1 // > 1 pour ne jamais proposer sur le type Emballage (normalement on arrive pas sur cette modale mais on ne sais jamais)        && $consommableType->getNbFamilles() == 0 && $consommableType->getNbConsommables() == 0) { // On ne peut supprimer que les types reliés à aucune famille ni consommables		?>        <button type="button" class="btn btn-danger btn-sm btnSupprimeTypeEmballage">            <i class="fa fa-times fa-lg vmiddle mr-1"></i> Supprimer        </button>		<?php	} // FIN test édition utilisateur existant	exit;} // FIN mode/* -----------------------------------------MODE - Modale Famille Consommable (admin)-----------------------------------------*/function modeModalFamilleConsommable() {	global $cnx, $consommablesManager;	// On vérifie qu'on est bien loggé	if (!isset($_SESSION['logged_user'])) { ?>		ERREUR^<div class="alert alert-danger">Accès non autorisé !</div>^    <?php exit;} // FIN gestion des erreurs	$type_id         = isset($_REQUEST['type_id']) ? intval($_REQUEST['type_id']) : 0;	if ($type_id < 2) { ?>        ERREUR^<div class="alert alert-danger">Identification du type impossible !<br>Code erreur : EKO55DXC</div>^		<?php exit;} // FIN gestion des erreurs	$consommableType = $consommablesManager->getTypeConsommables($type_id);	if (!$consommableType instanceof ConsommablesTypes) { ?>        ERREUR^<div class="alert alert-danger">Instanciation du type impossible !<br>Code erreur : 3LEH9HWR</div>^		<?php exit;} // FIN gestion des erreurs    $famille_id = isset($_REQUEST['famille_id']) ? intval($_REQUEST['famille_id']) : 0;	$famille = $famille_id > 0 ? $consommablesManager->getConsommablesFamille($famille_id) : new ConsommablesFamille([]);	if (!$famille instanceof ConsommablesFamille) { ?>        ERREUR^<div class="alert alert-danger">Instanciation de la famille impossible !<br>Code erreur : H8U2CZGR</div>^		<?php exit;} // FIN gestion des erreurs	// Retour Titre	echo '<i class="fa fa-leaf"></i>';	echo $famille_id > 0 ? $consommableType->getNom() . ' : ' . $famille->getNom() : "Nouvelle famille de " . strtolower($consommableType->getNom()) ."&hellip;";	// Séparateur Titre/Body pour le callback aJax	echo '^';	// Retour Body ?>    <form class="container-fluid" id="formConsommablesFamillesAddUpd">        <input type="hidden" name="mode" value="saveConsommablesFamille"/>        <input type="hidden" name="type_id"  value="<?php echo $type_id; ?>"/>        <input type="hidden" name="famille_id" id="input_id" value="<?php echo $famille_id; ?>"/>        <div class="row">            <div class="col-12 col-lg-10 input-group mb-2">                <div class="input-group-prepend">                    <span class="input-group-text">Libellé</span>                </div>                <input type="text" class="form-control" placeholder="Exemples : Etiquettes 10x20, Bombe Airsec, etc..." name="nom" id="input_nom" value="<?php echo str_replace('"', "''",$famille->getNom()); ?>">                <div class="invalid-feedback">Le libellé est obligatoire.</div>            </div>            <div class="col-12 col-lg-2 mb-2 text-right">                <input type="checkbox" class="togglemaster" data-toggle="toggle" name="activation"					<?php					echo $famille->isActif() ? 'checked' : '';					?>                       data-on="Activé"                       data-off="Désactivé"                       data-onstyle="success"                       data-offstyle="danger"                />            </div>        </div>    </form>	<?php	// Séparateur Body/Footer pour le callback aJax	echo '^';	// Retour boutons footer si une famille d'emballage existant (bouton supprimer)	if ($famille->getNb_consommables() == 0) { // On ne peut supprimer que les familles reliés à aucun consommable		?>        <button type="button" class="btn btn-danger btn-sm btnSupprimeFamilleConsommable">            <i class="fa fa-times fa-lg vmiddle mr-1"></i> Supprimer        </button>		<?php	} // FIN test édition utilisateur existant	exit;} // FIN mode/* -----------------------------------------MODE - Modale Consommable (admin)-----------------------------------------*/function modeModalConsommable() {	global $cnx, $consommablesManager;	// On vérifie qu'on est bien loggé	if (!isset($_SESSION['logged_user'])) { exit;}	$famille_id  = isset($_REQUEST['famille_id']) ? intval($_REQUEST['famille_id']) : 0;	if ($famille_id == 0) { ?>        ERREUR^<div class="alert alert-danger">Identification de la famille impossible !<br>Code erreur : U5ANUX59</div>^		<?php exit;} // FIN gestion des erreurs	$consommableFamille = $consommablesManager->getConsommablesFamille($famille_id);	if (!$consommableFamille instanceof ConsommablesFamille) { ?>        ERREUR^<div class="alert alert-danger">Instanciation de la famille impossible !<br>Code erreur : 6IPNCOIF</div>^		<?php exit;} // FIN gestion des erreurs	$consommable_id = isset($_REQUEST['consommable_id']) ? intval($_REQUEST['consommable_id']) : 0;	$consommable = $consommable_id > 0 ? $consommablesManager->getConsommable($consommable_id) : new Consommable([]);	if (!$consommable instanceof Consommable){ ?>        ERREUR^<div class="alert alert-danger">Instanciation du consommable impossible !<br>Code erreur : L2L5EOHQ</div>^		<?php exit;} // FIN gestion des erreurs	// Retour Titre	echo '<i class="fa fa-leaf"></i>';	echo $consommable_id > 0 ? $consommableFamille->getNom() . ' ' . $consommable->getNumlot_frs()  : "Nouvelle référence de " . strtolower($consommableFamille->getNom()) ."&hellip;";	// Séparateur Titre/Body pour le callback aJax	echo '^';	// Retour Body	$tiersManager = new TiersManager($cnx);	$idFamilleTiersFournisseurs = $tiersManager->getIdFamilleTiersConsommable();    ?>    <form class="container-fluid" id="formConsommableAddUpd">        <input type="hidden" name="mode" value="saveConsommable"/>        <input type="hidden" name="famille_id" id="input_id" value="<?php echo $famille_id; ?>"/>        <input type="hidden" name="consommable_id" value="<?php echo $consommable_id; ?>"/>        <div class="row">            <div class="col-6">                <label class="mb-0 gris-7 texte-fin text-13">Fournisseur :</label>                <div class="input-group mb-3">                    <select class="selectpicker form-control show-tick" id="input_id_fournisseur" name="id_fournisseur" title="Fournisseur">						<?php						foreach ($tiersManager->getListeFournisseurs(['famille' => $idFamilleTiersFournisseurs]) as $frs) {							?>                            <option value="<?php echo $frs->getId();?>" <?php							    echo $consommable_id > 0 && $consommable->getId_fournisseur() == $frs->getId() ? 'selected' : '';							?>><?php echo $frs->getNom();?></option>						<?php } // FIN boucle sur les fournisseurs d'emballages ?>                    </select>                    <input type="hidden" id="input_id_fournisseur_fb" class="form-control" />                    <div class="invalid-feedback">Sélectionnez le fournisseur.</div>                </div>            </div>            <div class="col-6 mt-1">                <label class="mb-0 gris-7 texte-fin text-13">Référence ou numéro de lot :</label>                <div class="input-group mb-3">                    <div class="input-group-prepend">                        <span class="input-group-text"><i class="fa fa-barcode gris-9"></i></span>                    </div>                    <input type="text" class="form-control" id="input_numlot_frs" placeholder="Code ou référence" name="numlot_frs" value="<?php echo $consommable->getNumlot_frs(); ?>">                    <div class="invalid-feedback">La référence ou numéro de lot est obligatoire.</div>                </div>            </div>        </div>        <div class="row">            <div class="col-3 mt-1">                <label class="mb-0 gris-7 texte-fin text-13">Quantité réceptionnée :</label>                <div class="input-group mb-3">                    <input type="text" class="form-control text-center" id="input_stock_initial" placeholder="0" name="stock_initial" value="<?php echo $consommable->getStock_initial();?>">                    <div class="input-group-append">                        <span class="input-group-text"><i class="fa fa-cart-arrow-down gris-9"></i></span>                    </div>                </div>            </div>            <div class="col-3 mt-1">                <label class="mb-0 gris-7 texte-fin text-13">Quantité disponible :</label>                <div class="input-group mb-3">                    <input type="text" class="form-control text-center" id="input_stock_actuel" placeholder="0" name="stock_actuel" value="<?php echo $consommable->getStock_actuel();?>">                    <div class="input-group-append">                        <span class="input-group-text"><i class="fa fa-calendar-check gris-9"></i></span>                    </div>                </div>            </div>            <div class="col-3 mt-1">                <label class="mb-0 gris-7 texte-fin text-13">Date de réception :</label>                <div class="input-group mb-3">                    <div class="input-group-prepend">                        <span class="input-group-text"><i class="fa fa-calendar-alt gris-9"></i></span>                    </div>                    <input type="text" class="datepicker form-control" id="input_date_rcp" placeholder="JJ/MM/AAAA" name="date_rcp" value="<?php                        echo $consommable->getDate_rcp() != '' ? Outils::dateSqlToFr($consommable->getDate_rcp()) : date('d/m/Y'); ?>">                </div>            </div>            <div class="col-3 mt-1">                <label class="mb-0 gris-7 texte-fin text-13">DLC :</label>                <div class="input-group mb-3">                    <div class="input-group-prepend">                        <span class="input-group-text"><i class="fa fa-calendar-alt gris-9"></i></span>                    </div>                    <input type="text" class="datepicker form-control" id="input_date_dlc" placeholder="N/A" name="date_dlc" value="<?php					echo $consommable->getDate_dlc() != '' ? Outils::dateSqlToFr($consommable->getDate_dlc()) : ''; ?>">                </div>            </div>        </div>        </div>    </form>	<?php	// Séparateur Body/Footer pour le callback aJax	echo '^';	// Retour boutons footer si consommable existant (bouton supprimer)	if ($consommable_id > 0) {		?>        <button type="button" class="btn btn-danger btn-sm btnSupprimeConsommable">            <i class="fa fa-times fa-lg vmiddle mr-1"></i> Supprimer        </button>		<?php	} // FIN test édition utilisateur existant	exit;} // FIN mode/* -------------------------------------------------MODE - Enregistre un type de consommable (add/upd)--------------------------------------------------*/function modeSaveConsommablesType() {	global $consommablesManager, $cnx;	// Vérification des données	$type_id            = isset($_REQUEST['type_id'])           ? intval($_REQUEST['type_id'])   : 0;	$nom                = isset($_REQUEST['nom'])               ? trim($_REQUEST['nom'])         : '';	$activation         = isset($_REQUEST['activation'])        ? 1 : 0;	// Si pas de code ou de nom, on ne vas pas plus loin...	if ($nom == '') {		echo '-1';		exit;	} // FIN test champs requis    // On remet l'esperluette si elle a été échappée pour l'ajax    $nom = str_replace('#et#', '&', $nom);	// Instanciation de l'objet ConsommablesTypes (hydraté ou vide)	$consommableType = $type_id > 0 ? $consommablesManager->getTypeConsommables($type_id) : new ConsommablesTypes([]);	// mise à jour des champs de base	$consommableType->setNom($nom);	$consommableType->setActif($activation);	// Enregistrement et retour pour callBack ajax	$retour = $consommablesManager->saveConsommablesTypes($consommableType);	// Logs	$logsManager = new LogManager($cnx);	$log = new Log([]);	if ($retour) {		$log->setLog_type('info');		if ($type_id == 0) {			$log->setLog_texte("Création d'un nouveau type de consommables : " . $nom);		} else {			$log->setLog_texte("Mise à jour des informations du type de consommables #" . $type_id);		}	} else {		$log->setLog_type('danger');		if ($type_id == 0) {			$log->setLog_texte("ERREUR lors de la création du nouveau type de consommables : " . $nom);		} else {			$log->setLog_texte("ERREUR lors de la mise à jour des informations du type de consommables ID #" . $type_id);		}	} // FIN test retour création/maj pour log	$logsManager->saveLog($log);	echo $retour !== false ? '1' : '0';	exit;} // FIN mode/* -------------------------------------------------MODE - Enregistre un consommable (add/upd)--------------------------------------------------*/function modeSaveConsommable() {	global $consommablesManager, $cnx;	// Vérification des données	$consommable_id      = isset($_REQUEST['consommable_id'])   ? intval($_REQUEST['consommable_id'])       : 0;	$famille_id          = isset($_REQUEST['famille_id'])       ? intval($_REQUEST['famille_id'])           : 0;	$id_fournisseur      = isset($_REQUEST['id_fournisseur'])   ? intval($_REQUEST['id_fournisseur'])       : 0;	$stock_initial       = isset($_REQUEST['stock_initial'])    ? intval($_REQUEST['stock_initial'])        : 0;	$stock_actuel        = isset($_REQUEST['stock_actuel'])     ? intval($_REQUEST['stock_actuel'])         : 0;	$numlot_frs          = isset($_REQUEST['numlot_frs'])       ? strtoupper(trim($_REQUEST['numlot_frs'])) : '';	$date_rcp            = isset($_REQUEST['date_rcp'])         ? Outils::dateFrToSql(trim($_REQUEST['date_rcp']))  : date('Y-m-d');	$date_dlc            = isset($_REQUEST['date_dlc'])         ? Outils::dateFrToSql(trim($_REQUEST['date_dlc']))  : '';	// Si pas de famille ou de référence ou de fournisseur, on ne vas pas plus loin...	if ($famille_id == 0 || $id_fournisseur == 0 || $numlot_frs == '') {		echo '-1';		exit;	} // FIN test champs requis	// On remet l'esperluette si elle a été échappée pour l'ajax	$numlot_frs = str_replace('#et#', '&', $numlot_frs);	// Instanciation de l'objet  (hydraté ou vide)	$consommable = $consommable_id > 0 ? $consommablesManager->getConsommable($consommable_id) : new Consommable([]);	// mise à jour des champs de base pour la création    if ($consommable_id == 0) {		$consommable->setId_famille($famille_id);	}    // SI on a changé le stock actuel    $mouvementStock = $stock_actuel - $consommable->getStock_actuel();    // Mise à jour des champs d'update	$consommable->setStock_initial($stock_initial);	$consommable->setStock_actuel($stock_actuel);	$consommable->setId_fournisseur($id_fournisseur);	$consommable->setDate_rcp($date_rcp);	$consommable->setDate_dlc($date_dlc);	$consommable->setNumlot_frs($numlot_frs);	$retour = $consommablesManager->saveConsommable($consommable);	// Historisation du mouvement de stock	if ($consommable_id > 0 && $retour && $mouvementStock != 0) {		$consommablesManager->saveConsommablesHisto($consommable->getId(), $mouvementStock, 0);    } // FIN historisation du mouvement de stock	// Logs	$logsManager = new LogManager($cnx);	$log = new Log([]);	if ($retour) {		$log->setLog_type('info');		if ($consommable_id == 0) {			$log->setLog_texte("Création d'un nouveau consommable : " . $numlot_frs);		} else {			$log->setLog_texte("Mise à jour des informations du consommable #" . $consommable_id);		}	} else {		$log->setLog_type('danger');		if ($consommable_id == 0) {			$log->setLog_texte("ERREUR lors de la création du nouveau consommable : " . $numlot_frs);		} else {			$log->setLog_texte("ERREUR lors de la mise à jour des informations du consommable ID #" . $consommable_id);		}	} // FIN test retour création/maj pour log	$logsManager->saveLog($log);	echo $retour !== false ? '1' : '0';	exit;} // FIN mode/* ----------------------------------------MODE - Supprime une famille de consommables----------------------------------------*/function modeSupprConsommablesFamille() {	global $consommablesManager, $logsManager;	//  -> On ne supprime pas réellement pour les raisons de traçabilité, on passe le champ "supprime" à 1	$famille_id = isset($_REQUEST['famille_id']) ? intval($_REQUEST['famille_id']) : 0;	if ($famille_id == 0) { exit; }	// Instanciation de l'objet	$consFam = $consommablesManager->getConsommablesFamille($famille_id);	// On passe le statut à supprimé	$consFam->setSupprime(1);	// Si la mise à jour s'est bien passé en BDD	if ($consommablesManager->saveConsommablesFamille($consFam)) {		// On sauvegarde dans les LOGS		$log = new Log([]);		$log->setLog_texte("Suppression de la famille de consommable (champ 'supprime' à 1) : ID #" . $famille_id);		$log->setLog_type('warning');		$logsManager->saveLog($log);	} // FIN test suppression OK pour Log	exit;} // FIN mode/* ---------------------------------------MODE - Supprime un type de consommable---------------------------------------*/function modeSupprConsommablesTypes() {	global $consommablesManager, $logsManager;	//  -> On ne supprime pas réellement pour les raisons de traçabilité, on passe le champ "supprime" à 1	$type_id = isset($_REQUEST['type_id']) ? intval($_REQUEST['type_id']) : 0;	if ($type_id == 0) { exit; }	// Instanciation de l'objet ConsommablesTypes	$consType = $consommablesManager->getTypeConsommables($type_id);	// On passe le statut à supprimé	$consType->setSupprime(1);	// Si la mise à jour s'est bien passé en BDD	if ($consommablesManager->saveConsommablesTypes($consType)) {		// On sauvegarde dans les LOGS		$log = new Log([]);		$log->setLog_texte("Suppression du type de consommable (champ 'supprime' à 1) : ID #" . $type_id);		$log->setLog_type('warning');		$logsManager->saveLog($log);	} // FIN test suppression OK pour Log	exit;	/**     * Il y a deux sortes de gens : ceux qui comprennent la notion de récursivité et ceux qui ne comprennent pas qu’il y a deux sortes de gens : ceux qui comprennent la notion de récursivité et ceux qui ne comprennent pas qu’il y a deux sortes de gens : ceux qui comprennent la notion de récursivité et ceux qui ne comprennent pas qu’il y a deux sortes de gens...     */} // FIN mode/* ------------------------------------------MODE - Export en PDF-------------------------------------------*/function modeExportPdf() {	global $tiersManager;	$type = isset($_REQUEST['type']) ? trim(strtolower($_REQUEST['type'])) : 'types';	require_once(__CBO_ROOT_PATH__.'/vendor/html2pdf/html2pdf.class.php');	ob_start();	$content = genereContenuPdf($type);	$content .= ob_get_clean();	// On supprime tous les fichiers du même genre sur le serveur	foreach (glob(__CBO_ROOT_PATH__.'/temp/iprexcnsmbl-*.pdf') as $fichier) {		unlink($fichier);	}	try {		$nom_fichier = 'iprexcnsmbl-'.date('is').'.pdf';		$html2pdf = new HTML2PDF('P', 'A4', 'fr', false, 'ISO-8859-15');		$html2pdf->pdf->SetAutoPageBreak(false, 0);		$html2pdf->setDefaultFont('helvetica');		$html2pdf->writeHTML(utf8_decode($content));;		$savefilepath = __CBO_ROOT_PATH__.'/temp/'.$nom_fichier;		$html2pdf->Output($savefilepath, 'F');		echo __CBO_TEMP_URL__.$nom_fichier;	}	catch(HTML2PDF_exception $e) {		exit;	}	exit;} // FIN mode/* ----------------------------------------------------------------------------FONCTION DEPORTEE - Génère le contenu HTML pour le PDF-----------------------------------------------------------------------------*/function genereContenuPdf($type = 'types') {	global $cnx, $consommablesManager;	// HEAD	$contenu = '<!DOCTYPE html><html><head>  <meta http-equiv="Content-Type" content="text/html; charset=utf-8"/>  <style type="text/css">      * { margin:0; padding: 0; }      .header { border-bottom: 2px solid #ccc; }    .header img.logo { width: 200px; }    .text-right { text-align: right; }    .text-center { text-align: center; }    .table { border-collapse: collapse; }    .table-donnees th { font-size: 11px; }    .table-liste th { font-size: 9px; background-color: #d5d5d5; padding:3px; }    .table-liste td { font-size: 9px; padding-top: 3px; padding-bottom: 3px; border-bottom: 1px solid #ccc;}    .table-liste td.no-bb { border-bottom: none; padding-bottom: 0px; }    .titre {       background-color: teal;       color: #fff;       padding: 3px;       text-align: center;       font-weight: normal;       font-size: 14px;    }    .recap {       background-color: #ccc;       padding: 3px;       text-align: center;       font-weight: normal;       font-size: 10px;    }        .w100 { width: 100%; }    .w80 { width: 80%; }    .w75 { width: 75%; }    .w60 { width: 60%; }    .w50 { width: 50%; }    .w45 { width: 45%; }    .w40 { width: 40%; }    .w25 { width: 25%; }    .w35 { width: 35%; }    .w33 { width: 33%; }    .w34 { width: 34%; }    .w30 { width: 30%; }    .w20 { width: 20%; }    .w30 { width: 30%; }    .w15 { width: 15%; }    .w35 { width: 35%; }    .w5 { width: 5%; }    .w10 { width: 10%; }    .w15 { width: 15%; }        .text-6 { font-size: 6px; }    .text-7 { font-size: 7px; }    .text-8 { font-size: 8px; }    .text-9 { font-size: 9px; }    .text-10 { font-size: 10px; }    .text-11 { font-size: 11px; }    .text-12 { font-size: 12px; }    .text-14 { font-size: 14px; }    .text-16 { font-size: 16px; }    .text-18 { font-size: 18px; }    .text-20 { font-size: 20px; }        .gris-3 { color:#333; }    .gris-5 { color:#555; }    .gris-7 { color:#777; }    .gris-9 { color:#999; }    .gris-c { color:#ccc; }    .gris-d { color:#d5d5d5; }    .gris-e { color:#e5e5e5; }        .mt-0 { margin-top: 0px; }    .mt-2 { margin-top: 2px; }    .mt-5 { margin-top: 5px; }    .mt-10 { margin-top: 10px; }    .mt-15 { margin-top: 15px; }    .mt-20 { margin-top: 20px; }    .mt-25 { margin-top: 25px; }    .mt-50 { margin-top: 50px; }        .mb-0 { margin-bottom: 0px; }    .mb-2 { margin-bottom: 2px; }    .mb-5 { margin-bottom: 5px; }    .mb-10 { margin-bottom: 10px; }    .mb-15 { margin-bottom: 15px; }    .mb-20 { margin-bottom: 20px; }    .mb-25 { margin-bottom: 25px; }    .mb-50 { margin-bottom: 50px; }        .mr-0 { margin-right: 0px; }    .mr-2 { margin-right: 2px; }    .mr-5 { margin-right: 5px; }    .mr-10 { margin-right: 10px; }    .mr-15 { margin-right: 15px; }    .mr-20 { margin-right: 20px; }    .mr-25 { margin-right: 25px; }    .mr-50 { margin-right: 50px; }        .ml-0 { margin-left: 0px; }    .ml-2 { margin-left: 2px; }    .ml-5 { margin-left: 5px; }    .ml-10 { margin-left: 10px; }    .ml-15 { margin-left: 15px; }    .ml-20 { margin-left: 20px; }    .ml-25 { margin-left: 25px; }    .ml-50 { margin-left: 50px; }        .pt-0 { padding-top: 0px; }    .pt-2 { padding-top: 2px; }    .pt-5 { padding-top: 5px; }    .pt-10 { padding-top: 10px; }    .pt-15 { padding-top: 15px; }    .pt-20 { padding-top: 20px; }    .pt-25 { padding-top: 25px; }    .pt-50 { padding-top: 50px; }        .pb-0 { padding-bottom: 0px; }    .pb-2 { padding-bottom: 2px; }    .pb-5 { padding-bottom: 5px; }    .pb-10 { padding-bottom: 10px; }    .pb-15 { padding-bottom: 15px; }    .pb-20 { padding-bottom: 20px; }    .pb-25 { padding-bottom: 25px; }    .pb-50 { padding-bottom: 50px; }        .pr-0 { padding-right: 0px; }    .pr-2 { padding-right: 2px; }    .pr-5 { padding-right: 5px; }    .pr-10 { padding-right: 10px; }    .pr-15 { padding-right: 15px; }    .pr-20 { padding-right: 20px; }    .pr-25 { padding-right: 25px; }    .pr-50 { padding-right: 50px; }        .pl-0 { padding-left: 0px; }    .pl-2 { padding-left: 2px; }    .pl-5 { padding-left: 5px; }    .pl-10 { padding-left: 10px; }    .pl-15 { padding-left: 15px; }    .pl-20 { padding-left: 20px; }    .pl-25 { padding-left: 25px; }    .pl-50 { padding-left: 50px; }        .text-danger { color: #d9534f; }      </style> </head><body>';	switch($type) {        case 'familles':			$id_type = isset($_REQUEST['id_type']) ? intval($_REQUEST['id_type']) : 0;			$typeCons = $consommablesManager->getTypeConsommables($id_type);			if ($typeCons instanceof ConsommablesTypes) {				$sousTitre = $typeCons->getNom();			}			break;		case 'cons':			$id_famille = isset($_REQUEST['id_famille']) ? intval($_REQUEST['id_famille']) : 0;			$famille = $consommablesManager->getConsommablesFamille($id_famille);			if ($famille instanceof ConsommablesFamille) {				$sousTitre = $famille->getNom();			}			break;        default:			$sousTitre = '';	} // FIN swith sur type de données	$contenu.=  genereEntetePagePdf($type, $sousTitre);	// PAGE 1	// GENERAL	// Préparation des variables	$na             = '<span class="gris-9 text-11"><i>Non renseigné</i></span>';	$tiret          = '<span class="gris-9 text-11"><i>-</i></span>';    // Swith sur type de données    switch($type) {        case 'types':			$params = ['show_inactifs' => true];			$liste = $consommablesManager->getListeTypesConsommables($params);			break;		case 'familles':		    $id_type = isset($_REQUEST['id_type']) ? intval($_REQUEST['id_type']) : 0;			$params = ['show_inactifs' => true, 'id_type' => $id_type];			$liste = $consommablesManager->getListeConsommablesFamilles($params);			break;		case 'cons':			$id_famille = isset($_REQUEST['id_famille']) ? intval($_REQUEST['id_famille']) : 0;			$params = ['id_famille' => $id_famille];			$liste = $consommablesManager->getListeConsommables($params);			break;    } // FIN swith sur type de données	// Génération du contenu HTML	$contenu.= '<table class="table table-liste w100 mt-10">';	// Aucun item	if (empty($liste)) {		$txtType = $type == 'cons'      ? ''    :  $type . ' de';		$pluriel = $type == 'cons'      ? ''    : 's';		$feminin = $type == 'famille'   ? 'e'   : '';		$contenu.= '<tr><td class="w100 text-center gris-9 text-11"><i>Aucun'.$feminin . ' '. $txtType.' consommable'.$pluriel.'</i></td></tr>';		// Liste des items	} else {		// Swith sur type de données		switch($type) {			case 'types':				$contenu.= '<tr>                        <th class="w60">Libellé</th>                        <th class="w15 text-center">Familles</th>                        <th class="w15 text-center">Consommables</th>                        <th class="w10 text-center">Actif</th>                    </tr>';				break;			case 'familles':				$contenu.= '<tr>                        <th class="w75">Libellé</th>                        <th class="w15 text-center">Consommables</th>                        <th class="w10 text-center">Actif</th>                    </tr>';				break;			case 'cons':				$contenu.= '<tr>                        <th class="w35">Fournisseur</th>                        <th class="w30">Référence / Numéro de lot</th>                        <th class="w15">Date réception</th>                        <th class="w10 text-center">Reçu</th>                        <th class="w10 text-center">Qté</th>                    </tr>';				break;		} // FIN swith sur type de données		foreach ($liste as $item) {			// Swith sur type de données			switch($type) {				case 'types':					$actif = $item->getActif() > 0 ? 'Oui' : 'Non';					$contenu.= '<tr>                        <td class="w60">'.$item->getNom().'</td>                        <td class="w15 text-center">'.$item->getNbFamilles().'</td>                        <td class="w15 text-center">'.$item->getNbConsommables().'</td>                        <td class="w10 text-center">'.$actif.'</td>                   </tr>';					break;				case 'familles':					$actif = $item->getActif() > 0 ? 'Oui' : 'Non';					$contenu.= '<tr>                        <td class="w75">'.$item->getNom().'</td>                        <td class="w15 text-center">'.$item->getNb_consommables().'</td>                        <td class="w10 text-center">'.$actif.'</td>                   </tr>';					break;				case 'cons':					$contenu.= '<tr>                        <td class="w35">'.$item->getNom_frs().'</td>                        <td class="w30">'.$item->getNumlot_frs().'</td>                        <td class="w15">'.Outils::dateSqlToFr($item->getDate_rcp()).'</td>                        <td class="w10 text-center">'.$item->getStock_initial().'</td>                        <td class="w10 text-center">'.$item->getStock_actuel().'</td>                    </tr>';					break;			} // FIN swith sur type de données		} // FIN boucle sur les items	} // FIN test produits	$contenu.= '</table>';	$txtType = $sousTitre != '' ? strtolower($sousTitre) : $type . ' de consommables ';	$contenu.= '<table class="table w100 mt-15"><tr><th class="w100 recap">Nombre de '.$txtType.' : '. count($liste) .'</th></tr></table>';	// FOOTER	$contenu.= '<table class="w100 gris-9">                    <tr>                        <td class="w50 text-8">Document édité le '.date('d/m/Y').' à '.date('H:i:s').'</td>                        <td class="w50 text-right text-6">&copy; 2019 IPREX / INTERSED </td>                    </tr>                </table>            </body>        </html>';	// RETOUR CONTENU	return $contenu;} // FIN fonction déportée/* ----------------------------------------------------------------------------FONCTION DEPORTEE - Génère le header du PDF (logo...)-----------------------------------------------------------------------------*/function genereEntetePagePdf($type = 'types', $sousTitre = '') {	global $cnx;	$txtType = $sousTitre != '' ? strtolower($sousTitre) : $type . ' de consommables ';	$entete = '<div class="header">                <table class="table w100">                    <tr>                        <td class="w33"><img src="'.__CBO_ROOT_URL__.'img/logo-pe-350.jpg" alt="PROFIL EXPORT" class="logo"/></td>                        <td class="w34 text-center pt-10">                            Liste des '.$txtType.' au '.date("d/m/Y").'                        </td>                        <td class="w33 text-right text-14">                            <p class="text-18"><b>IPREX</b></p>                            <p class="text-12 gris-7">Intranet PROFIL EXPORT</p>                        </td>                    </tr>                                </table>               </div>';	return $entete;} // FIN fonction déportée/* ----------------------------------------------------------------------------MODE - Décompte une 1 unité du stock d'un consommable (Front)-----------------------------------------------------------------------------*/function modeStockFront() {    global $cnx, $consommablesManager;    $id_consommable = isset($_REQUEST['id_consommable']) ? intval($_REQUEST['id_consommable']) : 0;    if ($id_consommable == 0) { exit('PTOFN0H5'); }    $consommable = $consommablesManager->getConsommable($id_consommable);    if (!$consommable instanceof Consommable) { exit('RAY5YYFE'); }    $stock = $consommable->getStock_actuel() - 1;    if ($stock < 0) { exit('TH45ZZBL'); }    $consommable->setStock_actuel($stock);	if (!$consommablesManager->saveConsommable($consommable)) { exit('6F21RZ9M'); }	// On historise le mouvement de stock	$vueManager = new VueManager($cnx);	$vue = $vueManager->getVueByCode('emb');	$id_vue = $vue instanceof Vue ? $vue->getId() : 0;	if (!$consommablesManager->saveConsommablesHisto($id_consommable, -1, $id_vue)) { exit('YS5LRZ32'); }    // Retour positif du stock restant pour le callBack Ajax :    echo $stock;	exit;} // FIN mode/* ------------------------------------------MODE - Modale Changement consommable (Front)-------------------------------------------*/function modeModalChangementConsommable() {	global $consommablesManager;	// Récupéarion des variables	$id_fam     = isset($_REQUEST['id_fam']) ? intval($_REQUEST['id_fam']) : 0 ;	$id_old_con = isset($_REQUEST['id_old_con']) ? intval($_REQUEST['id_old_con']) : 0;	$oldCon = $id_old_con > 0 ? $consommablesManager->getConsommable($id_old_con) : false;	$fam = $consommablesManager->getConsommablesFamille($id_fam);	if (!$fam instanceof ConsommablesFamille) { echo "Identifiaction de la famille impossible !<br>Code Erreur : LJL3RLT3"; exit; }	// On récupère les emballages de la famille qui n'est pas par défaut	$params = [		'id_famille'    => $id_fam,        'en_stock'      => true	];	$cons = $consommablesManager->getListeConsommables($params);	// Si aucun autre emballage disponible	if (empty($cons)) { ?>        <div class="alert alert-danger">            <h4><span class="badge badge-danger"><?php echo $fam->getNom(); ?></span></h4>            <i class="fa fa-times-circle text-28 vmiddle mb-2 mt-2"></i><br><strong>Aucune référence disponible en stock !</strong>            <p class="text-16">Contactez un administrateur&hellip;</p>        </div>		<?php		exit;	} // FIN aucune emballage en stock	// Emballages en stock de la famille	?>    <div class="row">        <div class="col">            <h4 class="form-control text-20 bg-dark text-white">                <div class="nomargin nopadding"><?php echo $fam->getNom(); ?></div>				<?php if ($oldCon) { ?>                    <div class="badge badge-success border border-light text-18 texte-fin padding-5"><?php echo $oldCon->getNumlot_frs();?></div>                    <div class="texte-fin text-14"><?php echo $oldCon->getNom_frs()?></div>                    <hr class="margin-5 border-white">                    <div class="text-14 texte-fin <?php echo $oldCon->getStock_actuel() < 1 ? 'text-warning' : '';?>">Stock restant : <?php echo $oldCon->getStock_actuel()?></div>				<?php } ?>            </h4>            <div><i class="fa fa-arrow-down mb-3"></i></div>        </div>    </div>    <div class="row justify-content-md-center">		<?php		foreach ($cons as $con) { ?>            <div class="col-4 mb-3">                <div class="card bg-secondary text-white pointeur carte-new-emb-defaut" data-id-emballage="<?php echo $con->getId();?>">                    <div class="card-header padding-5 text-16 gris-c"><?php echo $con->getNom_famille();?></div>                    <div class="card-body padding-5">                        <div class="badge badge-<?php                        if ($oldCon) {							echo $con->getId() == $oldCon->getId() ? 'success' : 'info';						} else {                            echo 'info';						}?> border border-light texte-fin text-18 padding-5"><?php echo $con->getNumlot_frs();?></div>                        <p class="text-14 texte-fin nomargin mb-2"><?php echo $con->getNom_frs(); ?></p>                        <hr class="margin-5 border-white">                        <p class="text-14 texte-fin">DLC : <?php echo $con->getDate_dlc() != '' && $con->getDate_dlc() != '0000-00-00' ? Outils::dateSqlToFr($con->getDate_dlc()) : '<span class="text-warning texte-fin">N/A</span>'; ?></p>                    </div>                    <div class="card-footer">                        Stock restant : <?php echo $con->getStock_actuel();?>                    </div>                </div>            </div>			<?php		} // FIN boucle familles		?>    </div>	<?php	exit;} // FIN mode/* ---------------------------------------MODE - Déclare un défectueux---------------------------------------*/function modeDeclareDefectueux() {	global $cnx, $consommablesManager;	$id_con = isset($_REQUEST['id_con']) ? intval($_REQUEST['id_con']) : 0;	if ($id_con == 0) { exit; }	$con = $consommablesManager->getConsommable($id_con);	if (!$con instanceof Consommable) { exit; }	$consommablesManager->addDefectueux($con);	// Log	$log = new Log([]);	$log->setLog_type('info');	$log->setLog_texte("[FO] Déclaration d'un consommable défectueur sur le consommable ID " . $id_con) ;	$logsManager = new LogManager($cnx);	$logsManager->saveLog($log);	exit;} // FIN mode