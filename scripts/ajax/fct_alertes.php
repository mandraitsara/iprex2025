<?php/*   _|_|_|  _|_|_|    _| _|        _|    _|  _|        CBO FrameWork _|        _|_|_|    _|        (c) 2018 Cédric Bouillon _|        _|    _|  _|   _|_|_|  _|_|_|    _|_|_|_|--------------------------------------------------------Contrôleur Ajax ABATTOIRS------------------------------------------------------*/// Initialisation du mode d'appel$mode       = isset($_REQUEST['mode']) ? $_REQUEST['mode'] : '';// Intégration de la configuration du FrameWork et des autorisationsrequire_once '../php/config.php';// Instanciation des Managers$logsManager    = new LogManager($cnx);$configManager  = new ConfigManager($cnx);$alerteManager  = new AlerteManager($cnx);$fonctionNom = 'mode'.ucfirst($mode);if (function_exists($fonctionNom)) {	$fonctionNom();}/* --------------------------------------MODE - Modifie l'activation d'une alerte---------------------------------------*/function modeActiveAlerte() {    global	    $cnx,	    $configManager;	// Vérification des données	$type    = isset($_REQUEST['type'])   ? intval($_REQUEST['type'])   : 0;	$active  = isset($_REQUEST['active']) ? intval($_REQUEST['active']) : -1;	if ($type == 0 || $active == -1) { echo -1; exit;}	$clef           = 'alerte'.$type.'_actif';	$alerte_config  = $configManager->getConfig($clef);	// Si config inexistante, erreur !	if (!$alerte_config instanceof Config) { echo -1; exit;	}	$alerte_config->setValeur($active);	$retour = $configManager->saveConfig($alerte_config);	// Logs	if ($retour) {	    $texte = $active == 1 ? 'Désactivation' : 'Activation';		$texte.= " de l'alerte ";		switch($type) {            case 1: $texte.= " de réception non conforme";break;            case 2: $texte.= " de température non conforme";break;            case 3: $texte.= " de temps de surgélation";break;            case 4: $texte.= " de contrôle Loma";break;        }		$logsManager = new LogManager($cnx);		$log = new Log([]);		$log->setLog_type('info');		$log->setLog_texte($texte);		$logsManager->saveLog($log);    } // FIN test réussi pour log	echo $retour ? 1 : -1;	exit;} // FIN mode/* --------------------------------------MODE - Affiche l'historique d'un type---------------------------------------*/function modeShowHistorique() {    global	    $utilisateur,	    $alerteManager;	// Vérification des données	$type = isset($_REQUEST['type']) ? intval($_REQUEST['type']) : 0;	if ($type == 0) { exit; }	// Préparation pagination (Ajax)	$nbResultPpage      = 50;	$page               = isset($_REQUEST['page']) ? intval($_REQUEST['page']) : 1;	$filtresPagination  = '?mode=showHistorique';	$filtresPagination .= '&type='.$type;	$start              = ($page-1) * $nbResultPpage;	// On récupère la liste	$liste_alertes = $alerteManager->getListe($type, false, $start, $nbResultPpage);	// Si aucune alerte	if (empty($liste_alertes)) { ?>        <div class="alert alert-danger alert-dismissible fade show" role="alert"">            <button type="button" class="close" data-dismiss="alert" aria-label="Close">                <span aria-hidden="true">&times;</span>            </button>            <i class="fa fa-times-circle text-28 vmiddle mr-1"></i> <strong>Aucune alerte de ce type !</strong>        </div>    <?php exit; } // FIN aucune alerte    // Liste non vide, construction de la pagination...	$nbResults  = $alerteManager->getNb_results();	$pagination = new Pagination($page);	$pagination->setUrl($filtresPagination);	$pagination->setNb_results($nbResults);	$pagination->setAjax_function(true);	$pagination->setNb_results_page($nbResultPpage);	// Texte pour la légende du tableau    $texteAlertes = [            1 => "Alertes de réception non conforme :",            2 => "Alertes de saisie d'une température non conforme :",            3 => "Alertes de dépassement du nombre d'heures maximum en surgélation automatique :",            4 => "Alertes de test de détéction de corps étrangé non détecté :"    ]; ?>    <div class="alert alert-danger mb-0 text-center">        <?php echo $texteAlertes[(int)$type]; ?>    </div>    <table class="admin w-100" data-type="<?php echo $type; ?>" data-page="<?php echo $page; ?>">    <thead>    <tr>		<?php		// On affiche l'ID que si on est développeur		if ($utilisateur->isDev()) { ?><th class="w-court-admin-cell">ID</th><?php } ?>        <th>Date</th>        <th>Lot N°</th>        <?php        // On affiche la valeur que pour les types 1 et 2        if ($type == 1 || $type == 2) { ?>            <th>Valeur</th>        <?php } ?>        <th>Utilisateur</th>        <th class="t-actions w-court-admin-cell">Supprimer</th>    </tr>    </thead>    <tbody>    <?php    foreach ($liste_alertes as $alerte) { ?>        <tr>			<?php			// On affiche l'ID que si on est développeur			if ($utilisateur->isDev()) { ?>                <td class="w-court-admin-cell"><span class="badge badge-pill badge-warning"><?php echo $alerte->getId(); ?></span></td>            <?php } ?>            <td><?php echo ucfirst(Outils::getDate_verbose($alerte->getDate()));?></td>            <td><?php echo $alerte->getNumlot(); ?></td>			<?php			// On affiche la valeur que pour les types 1 et 2			if ($type == 1 || $type == 2) { ?>                <td><?php echo $alerte->getValeur_verbose(); ?></td>			<?php } ?>            <td><?php echo $alerte->getNom_user(); ?></td>            <td class="t-actions w-court-admin-cell">                <button type="button" class="btn btn-sm btn-danger btnSupprimeAlerte" data-id-alerte="<?php echo $alerte->getId(); ?>"><i class="fa fa-times"></i></button>            </td>        </tr>    <?php    } // FIN boucle    ?>    </tbody>    </table>    <?php    // Pagination (aJax)	if (isset($pagination)) {		// Pagination bas de page, verbose...		$pagination->setVerbose_pagination(1);		$pagination->setVerbose_position('right');		$pagination->setNature_resultats('alerte');		$pagination->setNb_apres(2);		$pagination->setNb_avant(2);		echo ($pagination->getPaginationHtml());	} // FIN test pagination    exit;} // FIN mode/* ---------------------------------------MODE - Supprime une alerte---------------------------------------*/function modeDelAlerte() {    global	    $logsManager,		$alerteManager;	//  -> On ne supprime pas réellement pour les raisons de traçabilité, on passe le champ "supprime" à 1	$id_alerte = isset($_REQUEST['id']) ? intval($_REQUEST['id']) : 0;    if ($id_alerte == 0) { exit; }	$alerte = $alerteManager->getAlerte($id_alerte);    if (!$alerte instanceof Alerte) { exit; }	$alerte->setSupprime(1);	if ($alerteManager->saveAlerte($alerte)) {		// On sauvegarde dans les LOGS		$log = new Log([]);		$log->setLog_texte("Suppression d'une alerte enregistrée (champ 'supprime' à 1) : ID #" . $id_alerte);		$log->setLog_type('warning');		$logsManager->saveLog($log);    } // FIN suppression réussie    exit;} // FIN mode