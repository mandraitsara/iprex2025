<?php/**   ------------------------------------------------------------------------   API de liaison vers l'application mobile   Copyright (C) 2018 Intersed   http://www.intersed.fr/   ------------------------------------------------------------------------   @author    Cédric Bouillon   @copyright Copyright (c) 2018 Intersed   @version   1.0   @since     2018   ------------------------------------------------------------------------ */header('Access-Control-Allow-Origin: *');// Intégration des dépendancesrequire_once ('inc.config.php');require_once ('inc.connect.php');require_once ('AppAPI.class.php');// Instanciation de l'objet API$api = new AppAPI($cnx);// On vérifie le mode maintenance du site pour désactiver l'API si besoinif ($api->isModeMaintenance()) {	echo json_encode(['maintenance']);	exit;}// On récupère le mode (variable action)$mode = $api->getMode($_REQUEST);// Si aucune requête, affichage de la documentation si autorisée.if ($mode == '') {	$api->showDoc();	exit;} // FIN affichage DOC// Initialisation du mode debug$mode_debug = isset($_REQUEST['debug']) ? true : $mode_debug;// Intégration de l'en-tête HTML du mode debugecho $api->debugHeader();$fonctionNom = 'mode'.ucfirst($mode);if (function_exists($fonctionNom)) {	$fonctionNom();}/** -------------------------------------------------------------------- * ACTION : Crée la table en BDD et ajoute la source de la demande-------------------------------------------------------------------- */if ($mode == 'test') {	include('test.php');	exit;} // FIN mode/** -------------------------------------------------------------------- * ACTION : Crée la table en BDD et ajoute la source de la demande-------------------------------------------------------------------- */if ($mode == 'install' || $first_install) {	$api->install_tokens();} // FIN mode/** -------------------------------------------------------------------- * ACTION : Retourne la liste des lots pour lesquels on attends une photo-------------------------------------------------------------------- */function modeGetlotsapi()  {	global $api;	// On purge d'abord les tokens expirés (ce qui évite une tâche cron)	$api->delToken(['purge' => true]);	$listeLotsReception = $api->getListeLotsReception();	// Si on a des lots, on genère un nouveau token pour accompagner la liste	if (!empty($listeLotsReception)) {		$retour = $listeLotsReception;	} else {		$retour = [];	}	// FIN test lots	echo json_encode($retour, JSON_UNESCAPED_UNICODE);	exit;} // FIN mode/** -------------------------------------------------------------------- * ACTION : Génère un token anonyme (sans ID utilisateur)-------------------------------------------------------------------- */function modeGetToken() {	global $api;	$newToken = $api->saveToken(0);	$api->showDebug(true, 'Token anonyme généré', '', $newToken, true);	echo $newToken !== false ? json_encode($newToken) : json_encode(0);	exit;} // FIN mode/** -------------------------------------------------------------------- * ACTION : Vérifie la validité d'un token-------------------------------------------------------------------- */function modeCheckToken() {	global $api;	$token 	= isset($_REQUEST['token']) ? $_REQUEST['token'] : false;	$res	= $api->checkToken($token);	$api->showDebug($res, 'Token valide', 'Token invalide', $token, true);	echo json_encode((int)$res);	exit;} // FIN mode/** -------------------------------------------------------------------- * ACTION : Supprime un token-------------------------------------------------------------------- */function modeDelToken() {	global $api;	$params = [];	if (isset($_REQUEST['token'])) {		$params['token'] = preg_replace("/[^a-zA-Z0-9]/", "", $_REQUEST['token']); ;	}	if (isset($_REQUEST['ip']) && preg_match('/^\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}\z/', $_REQUEST['ip'])) {		$params['ip'] = $_REQUEST['ip'];	}	if (isset($_REQUEST['date']) && preg_match('/([12]\d{3}-(0[1-9]|1[0-2])-(0[1-9]|[12]\d|3[01]))/', $_REQUEST['date'])) {		$params['date'] = $_REQUEST['date'];	}	$res = $api->delToken($params);	$api->showDebug($res, 'Token supprimé', 'Erreur lors de la suppression du token', $params, true);	echo json_encode((int)$res);	exit;} // FIN mode/** -------------------------------------------------------------------- * ACTION : Supprime tous les tokens-------------------------------------------------------------------- */function modePurge() {	global $api;	$params = [];	$params['purge'] = true;	if (isset($_REQUEST['avant']) && preg_match('/([12]\d{3}-(0[1-9]|1[0-2])-(0[1-9]|[12]\d|3[01]))/', $_REQUEST['avant'])) {		$params['avant'] = $_REQUEST['avant'];	}	if (isset($_REQUEST['apres']) && preg_match('/([12]\d{3}-(0[1-9]|1[0-2])-(0[1-9]|[12]\d|3[01]))/', $_REQUEST['apres'])) {		$params['apres'] = $_REQUEST['apres'];	}	$res = $api->delToken($params);	$api->showDebug($res, 'Tokens purgés', 'Erreur lors de la suppression des tokens', $params, true);	echo json_encode((int)$res);	exit;} // FIN mode/** -------------------------------------------------------------------- * ACTION : Recupère les photos envoyées depuis Android-------------------------------------------------------------------- */function modeSendLotsCaptures() {	global $api;	/*	 * Codes Erreur en retour	 * */	$codesErreur = [		'ET0' => 'Token Absent',		'EL0' => 'ID lot absent',		'EP0' => 'Photos absentes',		'ET1' => 'Token invalide',		'EP1' => 'Erreur formatage retour photos (array)',		'EP2' => 'Extension photo invalide (Autorisés : jpg/jpeg/gif/png)',		'EP3' => 'Base64 corrompue',		'EP4' => 'Base64 invalide',		'EP5' => 'Echec durant l\'upload',		'EB0' => 'Echec de récupération du type de document',		'EB1' => 'Echec d\'enregistrement du document en BDD',	];	$token = isset($_REQUEST['token']) ? $_REQUEST['token'] : '';	if ($token == '') { echo json_encode($codesErreur['ET0']); exit;}	$id_lot = isset($_REQUEST['id_lot']) ? intval($_REQUEST['id_lot']) : 0;	if ($id_lot == 0) { echo json_encode($codesErreur['EL0']); exit;}	$vue = isset($_REQUEST['vue']) ? strtolower(trim(strip_tags($_REQUEST['vue']))) : '';	$photos = isset($_REQUEST['photos']) ? json_decode($_REQUEST['photos']) : [];	if (!is_array($photos) || empty($photos)) { echo json_encode($codesErreur['EP0']); exit;}	// On vérifie la validité du token (expiration) et qu'il correspond au numéro de lot	if (!$api->checkTokenLot($token, $id_lot)) { echo json_encode($codesErreur['ET1']); exit; }	// On récupère les photos en base 64	foreach ($photos as $photo_b64) {		if ($photo_b64 != '') {			if (!$api->savePhoto($photo_b64, $id_lot, $vue, $codesErreur)) {				exit;			} else {				echo json_encode('OK');			} // FIN test upload photo		} else {			echo json_encode('BASE64Vide');		} // FIN test photo non vide	} // FIN boucle sur les photos} // FIN mode// Retour visuel pour le mode Débugecho $api->debugFooter();