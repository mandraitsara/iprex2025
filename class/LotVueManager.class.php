<?php/*   _|_|_|  _|_|_|      _|_| _|        _|    _|  _|    _|  CBO FrameWork _|        _|_|_|    _|    _|  (c) 2018 Cédric Bouillon _|        _|    _|  _|    _|   _|_|_|  _|_|_|      _|_|--------------------------------------------------------Manager de l'Objet LotVue------------------------------------------------------*/class LotVueManager {	protected	$db, $nb_results;	public function __construct($db) {		$this->setDb($db);	}		//##### GETTERS #####	public function getNb_results() {		return $this->nb_results;	}		//##### SETTERS #####	public function setDb(PDO $db) {		$this->db = $db;	}	public function setNb_results($nb_results) {		$this->nb_results = (int)$nb_results;	}		/****************	 * METHODES	 ***************/	// Retourne un lot/vue par son ID	public function getLotVue($id) {		$query_lotvue = 'SELECT  `id`, `id_lot`, `vue_code`, `date_entree`							FROM `pe_lot_vues`							WHERE `id` = ' . $id;		$query = $this->db->prepare($query_lotvue);		$query->execute();		$donnees = $query->fetch();		if ($donnees && !empty($donnees)) {			$lotvue = new LotVue($donnees);			// On intègre l'objet Vue correspondant			$vuesManager = new VueManager($this->db);			$vue = $vuesManager->getVue($lotvue->getId_vue());			if ($vue instanceof Vue) {				$lotvue->setVue($vue);			}			return  $lotvue;		} else {			return false;		}	} // FIN méthode	// Retourne les vues d'un lot par objet lot ou ID du lot	public function getLotVuesByLot($lot) {		$lot_id = $lot instanceof Lot ? $lot->getId() : intval($lot);		$query_lotvues = 'SELECT  `id`, `id_lot`, `id_vue`, `date_entree`							FROM `pe_lot_vues`							WHERE `id_lot` = ' . $lot_id;		$query = $this->db->prepare($query_lotvues);		$query->execute();		$liste = [];		$vuesManager = new VueManager($this->db);		foreach ($query->fetchAll(PDO::FETCH_ASSOC) as $donnee) {			$lotvue = new LotVue($donnee);			// On intègre l'objet Vue correspondant			$vue = $vuesManager->getVue($lotvue->getId_vue());			if ($vue instanceof Vue) {				$lotvue->setVue($vue);			}			$liste[] = $lotvue;		}		return $liste;	} // FIN méthode	// Enregistre une reception de lot	public function saveLotVue(LotVue $objet) {		$table		= 'pe_lot_vues';	// Nom de la table		$champClef	= 'id';				// Nom du champ clef primaire		// FIN Configuration		$getter		= 'get'.ucfirst(strtolower($champClef));		$setter		= 'set'.ucfirst(strtolower($champClef));		if ($objet->$getter() == '' && !empty($objet->attributs)) {			$query_add = 'INSERT INTO `'.$table.'` (';			foreach ($objet->attributs as $attribut)	{				$query_add.= '`'.$attribut.'`,';			}			$query_add = substr($query_add,0,-1);			$query_add.=') VALUES (';			foreach ($objet->attributs as $attribut)	{				$query_add.= ':'.strtolower($attribut).' ,';			}			$query_add = substr($query_add,0,-1);			$query_add.=')';			$query = $this->db->prepare($query_add);			$query_log = $query_add;			foreach ($objet->attributs as $attribut)	{				$attributget = 'get'.ucfirst($attribut);				$query->bindvalue(':'.strtolower($attribut), $objet->$attributget());				$dq = is_numeric($objet->$attributget()) ? '' : '"';				$query_log = str_replace(':'.strtolower($attribut).' ', $dq.$objet->$attributget().$dq.' ', $query_log);			}			if ($query->execute()) {				$objet->$setter($this->db->lastInsertId());				Outils::saveLog($query_log);				return $objet->$getter();			}		} else if ($objet->$getter() != '' && !empty($objet->attributs)) {			$query_upd = 'UPDATE `'.$table.'` SET ';			foreach($objet->attributs as $attribut) {				$query_upd.= '`'.$attribut.'` = :'.strtolower($attribut).' ,';			}			$query_upd = substr($query_upd,0,-1);			$query_upd .= ' WHERE `'.$champClef.'` = '.$objet->$getter();			$query = $this->db->prepare($query_upd);			$query_log = $query_upd;			foreach($objet->attributs as $attribut) {				$attributget = 'get'.ucfirst($attribut);				$query->bindvalue(':'.strtolower($attribut), $objet->$attributget());				$dq = is_numeric($objet->$attributget()) ? '' : '"';				$query_log = str_replace(':'.strtolower($attribut).' ', $dq.$objet->$attributget().$dq.' ', $query_log);			}			try	{				$query->execute();				Outils::saveLog($query_log);				return true;			} catch(PDOExeption $e) {return false;}		}		return false;	} // FIN méthode	// Supprime toutes les vues d'un lot (pour le repasser en provisoire par exemple ou pour une sortie de lot)	public function purgeVuesLot($lot) {		$lot_id = $lot instanceof Lot ? $lot->getId() : intval($lot);		$query_del = 'DELETE FROM `pe_lot_vues` WHERE `id_lot` = ' . $lot_id;		$query = $this->db->prepare($query_del);		Outils::saveLog($query_del);		return $query->execute();	} // FIN méthode	// Retourne un objet LotVue pour un lot par son code de vue	public function getLotVuesByLotAndVue($lot, $code_vue) {		$lot_id = $lot instanceof Lot ? $lot->getId() : intval($lot);		$query_lotvue = 'SELECT  `id`, `id_lot`, `id_vue`, `date_entree`							FROM `pe_lot_vues`							WHERE `id_lot` = ' . $lot_id . ' AND `id_vue` = ( SELECT `id` FROM `pe_vues` WHERE `code` = "'.trim(strtolower($code_vue)).'" )';		$query = $this->db->prepare($query_lotvue);		$query->execute();		$donnees = $query->fetch();		if ($donnees && !empty($donnees)) {			$lotvue = new LotVue($donnees);			// On intègre l'objet Vue correspondant			$vuesManager = new VueManager($this->db);			$vue = $vuesManager->getVue($lotvue->getId_vue());			if ($vue instanceof Vue) {				$lotvue->setVue($vue);			}			return  $lotvue;		} else {			return false;		}	} // FIN méthode	// Supprime une vue lot	public function supprLotVue(LotVue $lotvue) {		$query_del  = 'DELETE FROM `pe_lot_vues` WHERE `id` = ' . $lotvue->getId();		$query = $this->db->prepare($query_del);		Outils::saveLog($query_del);		return $query->execute();	} // FIN méthode} // FIN classe