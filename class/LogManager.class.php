<?php/*   _|_|_|  _|_|_|      _|_| _|        _|    _|  _|    _|  CBO FrameWork _|        _|_|_|    _|    _|  (c) 2018 Cédric Bouillon _|        _|    _|  _|    _|   _|_|_|  _|_|_|      _|_|--------------------------------------------------------Manager de l'objet Log------------------------------------------------------*/class LogManager {	protected    $db, $nb_results;	public function __construct($db) {		$this->setDb($db);	}	/* ----------------- GETTERS ----------------- */	public function getNb_results() {		return $this->nb_results;	}	/* ----------------- SETTERS ----------------- */	public function setDb(PDO $db) {		$this->db = $db;	}	public function setNb_results($nb_results) {		$this->nb_results = (int)$nb_results;	}	/* ----------------- METHODES ----------------- */	// Retourne la liste des logs (avec gestion de la pagination)	public function getLogs($params) {		$start			= isset($params['start'])			? $params['start']			 	: 0;		$nb				= isset($params['nb_results_p_page']) ? $params['nb_results_p_page'] : 1000;		$filtre_user 	= isset($params['user']) 	? $params['user'] 	: false;		$filtre_type 	= isset($params['type']) 	? $params['type'] 	: false;		$filtre_desc 	= isset($params['desc']) 	? $params['desc'] 	: false;		$filtre_ip 		= isset($params['ip']) 		? $params['ip'] 	: false;		$filtre_debut 	= isset($params['debut']) 	? Outils::dateFrToSql($params['debut']) . ' 00:00:00' : false;		$filtre_fin 	= isset($params['fin']) 	? Outils::dateFrToSql($params['fin']) . '23:59:59' 	: false;		$query_liste = 'SELECT SQL_CALC_FOUND_ROWS                            l.`id`, l.`log_type`, l.`log_texte`, l.`log_user_id`, l.`log_datetime`, l.`log_ip`, CONCAT(u.`prenom`, " ", u.`nom`) AS nom_user							FROM `pe_logs` l								LEFT JOIN `pe_users` u ON u.`id` = l.`log_user_id` 							WHERE 1 = 1 ';		$query_liste.= $filtre_user 	? ' AND l.`log_user_id` = ' . $filtre_user 				: '';		$query_liste.= $filtre_type 	? ' AND l.`log_type` = "' . $filtre_type . '"' 			: '';		$query_liste.= $filtre_desc 	? ' AND l.`log_texte` LIKE "%' . $filtre_desc . '%"' 	: '';		$query_liste.= $filtre_ip 		? ' AND l.`log_ip` LIKE "%' . $filtre_ip . '%"' 		: '';		$query_liste.= $filtre_debut 	? ' AND l.`log_datetime` >= "' . $filtre_debut . '"' 	: '';		$query_liste.= $filtre_fin 		? ' AND l.`log_datetime` <= "' . $filtre_fin . '"' 		: '';		$query_liste.= '	ORDER BY l.`log_datetime` DESC ';		$query_liste.= 'LIMIT ' . $start . ',' . $nb;		$query = $this->db->prepare($query_liste);		$query->execute();		$this->setNb_results($this->db->query('SELECT FOUND_ROWS()')->fetchColumn());		$logs = array();		while ($donnees = $query->fetch(PDO::FETCH_ASSOC)) {			$logs[] = new Log($donnees);		}		return $logs;	} // FIN méthode	// Enregistre & sauvegarde (Méthode Save)	public function saveLog(Log $objet) {		$table      = 'pe_logs'; // Nom de la table		$champClef  = 'id'; // Nom du champ clef		// FIN Configuration		// Spécificités LOG		$objet->setLog_datetime(date('Y-m-d H:i:s'));		$objet->setLog_ip($_SERVER['REMOTE_ADDR']);		if (isset($_SESSION['logged_user'])){			$utilisateur = unserialize($_SESSION['logged_user']);		}		if (isset($utilisateur) && $utilisateur instanceof User) {			$objet->setLog_user_id($utilisateur->getId());		}		$getter     = 'get'.ucfirst(strtolower($champClef));		$setter     = 'set'.ucfirst(strtolower($champClef));		if ($objet->$getter() == '' && !empty($objet->attributs)) {			$query_add = 'INSERT INTO `'.$table.'` (';			foreach ($objet->attributs as $attribut)	{				$query_add.= '`'.$attribut.'`,';			}			$query_add = substr($query_add,0,-1);			$query_add.=') VALUES (';			foreach ($objet->attributs as $attribut)	{				$query_add.= ':'.strtolower($attribut).' ,';			}			$query_add = substr($query_add,0,-1);			$query_add.=')';			$query = $this->db->prepare($query_add);			foreach ($objet->attributs as $attribut)	{				$attributget = 'get'.ucfirst($attribut);				$query->bindvalue(':'.strtolower($attribut), $objet->$attributget());			}			if ($query->execute()) {				$objet->$setter($this->db->lastInsertId());				return $objet->$getter();			}		} else if ($objet->$getter() != '' && !empty($objet->attributs)) {			$query_upd = 'UPDATE `'.$table.'` SET ';			foreach($objet->attributs as $attribut) {				$query_upd.= '`'.$attribut.'` = :'.strtolower($attribut).' ,';			}			$query_upd = substr($query_upd,0,-1);			$query_upd .= ' WHERE `'.$champClef.'` = '.$objet->$getter();			$query = $this->db->prepare($query_upd);			foreach($objet->attributs as $attribut) {				$attributget = 'get'.ucfirst($attribut);				$query->bindvalue(':'.strtolower($attribut), $objet->$attributget());			}			try	{				$query->execute();				return true;			} catch(PDOExeption $e) {return false;}		}		return false;	} // FIN méthode	// Purge des logs	public function purgeLogs() {		$query_del = 'TRUNCATE `pe_logs`';		$query = $this->db->prepare($query_del);		Outils::saveLog($query_del);		return $query->execute();	} // FIN méthode} // FIN classe