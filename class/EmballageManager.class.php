<?php/*   _|_|_|  _|_|_|      _|_| _|        _|    _|  _|    _|  CBO FrameWork _|        _|_|_|    _|    _|  (c) 2018 Cédric Bouillon _|        _|    _|  _|    _|   _|_|_|  _|_|_|      _|_|--------------------------------------------------------Manager de l'Objet Emballage------------------------------------------------------*/class EmballageManager {	protected	$db, $nb_results;	public function __construct($db) {		$this->setDb($db);	}	//##### GETTERS #####	public function getNb_results() {		return $this->nb_results;	}	//##### SETTERS #####	public function setDb(PDO $db) {		$this->db = $db;	}	public function setNb_results($nb_results) {		$this->nb_results = (int)$nb_results;	}	/****************	 * METHODES	 ***************/	// Retourne une famille d'emballage par son ID	public function getEmballageFamille($id) {		$query_emballage = 'SELECT `id`, `nom`, `code`,`actif`, `supprime`, `date_add`, `date_maj` FROM `pe_emballages_familles` WHERE `id` = :id';		$query = $this->db->prepare($query_emballage);		$query->bindValue(':id', (int)$id);		$query->execute();		// Log de la requête pour le mode Dev		if (isset($_SESSION['devmode']) && $_SESSION['devmode']) {			$_SESSION['pdoq'][get_class($this)][] = ['q' => $query->queryString, 'v' => ':id = "'.$id.'" '];		}		$donnee = $query->fetch();		if (!$donnee || empty($donnee)) { return false; }		$fam = new EmballageFamille($donnee);		// On récupère les vues associées à cette famille pour disponibilité		$fam->setVues($this->getEbmallageFamillesVues($fam));		return $fam;	} // FIN méthode	// Retourne la liste des familles d'emballages	public function getListeEmballagesFamilles($params) {		$show_inactifs 	= isset($params['show_inactifs']) 	? boolval($params['show_inactifs'])  : false;		$show_supprime 	= isset($params['show_supprimes']) 	? boolval($params['show_supprimes']) : false;		$get_nonconso 	= isset($params['get_nonconso']) 	? boolval($params['get_nonconso']) 	 : false;		$get_emb 		= isset($params['get_emb']) 		? boolval($params['get_emb']) 		 : false;		$no_stock 		= isset($params['no_stock']) 		? boolval($params['no_stock']) 		 : false;		$has_encours 	= isset($params['has_encours']) 	? boolval($params['has_encours']) 	 : false;		$recherche  	= isset($params['recherche']) 		? trim($params['$recherche']) 		 : '';		$id_vue 		= isset($params['id_vue']) 			? intval($params['id_vue']) 		 : 0;		$lot_nonsuppr 	= isset($params['lot_nonsuppr']);		// Pagination		$start 			= isset($params['start']) 			? intval($params['start']) 			: 0;		$nb 			= isset($params['nb_result_page']) 	? intval($params['nb_result_page']) : 10000000;		$query_liste = 'SELECT SQL_CALC_FOUND_ROWS ef.`id`, ef.`nom`, ef.`code`, ef.`actif`, ef.`supprime`, ef.`date_add`, ef.`date_maj` 						FROM `pe_emballages_familles` ef							LEFT JOIN `pe_emballages_famille_vues` efv ON efv.`id_famille_emballage` = ef.`id`							LEFT JOIN  `pe_emballages_lots` e ON e.`id_famille` = ef.`id` AND e.`encours` > 0						WHERE 1 = 1 ';		$query_liste.= $recherche != '' ? 'AND ef.`nom` LIKE "%'.$recherche.'%"' : '';		$query_liste.= !$show_inactifs != '' ? 'AND ef.`actif` = 1 ' : '';		$query_liste.= !$show_supprime != '' ? 'AND ef.`supprime` = 0 ' : '';		$query_liste.= $id_vue > 0 ? 'AND efv.`id_vue` = ' . $id_vue . ' ' : '';		$query_liste.= $has_encours ? 'AND e.`id` IS NOT NULL AND e.`id` > 0 ' : '';		$query_liste.= $no_stock ? 'AND (SELECT `stock` FROM `pe_emballages_stock` WHERE `id_emballage_lot` = e.`id` ORDER BY `date` DESC LIMIT 0,1) = 0 ' : '';		$query_liste.= $lot_nonsuppr ? 'AND e.`supprime` = 0 ' : '';		$query_liste.= 'GROUP BY ef.`id`, ef.`nom`, ef.`code`, ef.`actif`, ef.`supprime`, ef.`date_add`, ef.`date_maj` ';		$query_liste.= 'ORDER BY ef.`nom` ASC ';		$query_liste.= 'LIMIT ' . $start . ',' . $nb;		$query = $this->db->prepare($query_liste);		$query->execute();		// Log de la requête pour le mode Dev		if (isset($_SESSION['devmode']) && $_SESSION['devmode']) { $_SESSION['pdoq'][get_class($this)][] = $query->queryString; }		$this->setNb_results($this->db->query('SELECT FOUND_ROWS()')->fetchColumn());		$liste = [];		foreach ($donnees = $query->fetchAll(PDO::FETCH_ASSOC) as $donnee) {			$fam = new EmballageFamille($donnee);			// On récupère les vues associées à cette famille pour disponibilité			$fam->setVues($this->getEbmallageFamillesVues($fam));			// Si besoin, on récupère l'emballage en cours (ou si besoin test stock)			if ($get_emb || $no_stock || $has_encours) {				$emb = $this->getEmballageEnCoursByFamille($fam);				if ($emb instanceof EmballageLot) {					$fam->setEmb_encours($emb);				}			} // FIN récup emballage en cours			// On récupère le nombre d'emballages non consomés			if ($get_nonconso) {				$query_non_conso = 'SELECT COUNT(*) AS nb FROM `pe_emballages_lots` WHERE `id_famille` = ' . $fam->getId() . ' AND `encours` = 0 AND `supprime` = 0 AND `consomme` = 0';				$querync = $this->db->prepare($query_non_conso);				$querync->execute();				$donneenc = $querync->fetch();				if ($donneenc && isset($donneenc['nb'])) {					$nbnonconso = intval($donneenc['nb']);					$fam->setNon_consommes($nbnonconso);				}			} // FIN récup non consommés			$liste[] = $fam;		} // FIN boucle		return $liste;	} // FIN getListe	// Enregistre un nouvel emballage	public function saveEmballageFamille(EmballageFamille $objet) {		$table		= 'pe_emballages_familles';	// Nom de la table		$champClef	= 'id';				// Nom du champ clef primaire		// FIN Configuration		$getter		= 'get'.ucfirst(strtolower($champClef));		$setter		= 'set'.ucfirst(strtolower($champClef));		if ($objet->$getter() == '' && !empty($objet->attributs)) {			$query_add = 'INSERT INTO '.$table.' (';			foreach ($objet->attributs as $attribut)	{	            $query_add.= strtoupper($attribut).',';			}			$query_add = substr($query_add,0,-1);			$query_add.=') VALUES (';			foreach ($objet->attributs as $attribut)	{	            $query_add.= ':'.strtolower($attribut).',';			}			$query_add = substr($query_add,0,-1);			$query_add.=')';			$query = $this->db->prepare($query_add);			foreach ($objet->attributs as $attribut)	{				$attributget = 'get'.ucfirst($attribut);				$query->bindvalue(':'.strtolower($attribut), $objet->$attributget());			}			if ($query->execute()) {				// Log de la requête pour le mode Dev				if (isset($_SESSION['devmode']) && $_SESSION['devmode']) { $_SESSION['pdoq'][get_class($this)][] = $query->queryString; }				$objet->$setter($this->db->lastInsertId());				return $objet->$getter();			}		} else if ($objet->$getter() != '' && !empty($objet->attributs)) {			$query_upd = 'UPDATE '.$table.' SET ';			foreach($objet->attributs as $attribut) {	            $query_upd.= strtoupper($attribut).' = :'.strtolower($attribut).',';			}			$query_upd = substr($query_upd,0,-1);			$query_upd .= ' WHERE '.$champClef.' = '.$objet->$getter();			$query = $this->db->prepare($query_upd);			foreach($objet->attributs as $attribut) {				$attributget = 'get'.ucfirst($attribut);	            $query->bindvalue(':'.strtolower($attribut), $objet->$attributget());			}			try	{				$query->execute();				// Log de la requête pour le mode Dev				if (isset($_SESSION['devmode']) && $_SESSION['devmode']) { $_SESSION['pdoq'][get_class($this)][] = $query->queryString; }				return true;			} catch(PDOExeption $e) {return false;}		}		return false;	} // FIN méthode	// Vérifie si une famille d'emballage existe déjà avec ce code	public function checkFamilleExisteDeja($code, $id_exclu = 0) {		$query_check = 'SELECT COUNT(*) AS nb FROM `pe_emballages_familles` WHERE (LOWER(`code`) = :code )';		$query_check.= (int)$id_exclu > 0 ? ' AND `id` != ' . (int)$id_exclu : '';		$query = $this->db->prepare($query_check);		$query->bindValue(':code', trim(strtolower($code)));		$query->execute();		// Log de la requête pour le mode Dev		if (isset($_SESSION['devmode']) && $_SESSION['devmode']) {			$_SESSION['pdoq'][get_class($this)][] = ['q' => $query->queryString, 'v' => ':code = "'.$code.'" '];		}		$donnee = $query->fetchAll(PDO::FETCH_ASSOC);		if ($donnee && isset($donnee[0]) && isset($donnee[0]['nb']) && intval($donnee[0]['nb']) > 0) {			return true;		}		return false;	} // FIN méthode	// Retourne un array des vues associées à la famille d'emballage	public function getEbmallageFamillesVues(EmballageFamille $fam) {		$query_liste = 'SELECT v.`id`, v.`code`, v.`bs_color`, v.`fa`, v.`maintenance`, v.`nom`, v.`url`, v.`ordre`, v.`emballage`							FROM `pe_vues` v								JOIN `pe_emballages_famille_vues` fv ON fv.`id_vue` = v.`id`							WHERE fv.`id_famille_emballage` = :idfam								ORDER BY v.`ordre`';		$query = $this->db->prepare($query_liste);		$query->bindValue(':idfam',$fam->getId());		$query->execute();		// Log de la requête pour le mode Dev		if (isset($_SESSION['devmode']) && $_SESSION['devmode']) {			$_SESSION['pdoq'][get_class($this)][] = ['q' => $query->queryString, 'v' => ':idfam = "'.$fam->getId().'" '];		}		$liste = [];		foreach ($donnees = $query->fetchAll(PDO::FETCH_ASSOC) as $donnee) {			$liste[] = new Vue($donnee);		}		return $liste;	} // FIN méthode	// Associe les vues à une famille d'emballage	public function saveEmballagesFamillesVues(EmballageFamille $fam, $vues) {		if (!is_array($vues)) { return false; }		$query_del = 'DELETE FROM `pe_emballages_famille_vues` WHERE `id_famille_emballage` = :idfam';		$query1 = $this->db->prepare($query_del);		$query1->bindValue(':idfam',$fam->getId());		if ($query1->execute()) {			// Log de la requête pour le mode Dev			if (isset($_SESSION['devmode']) && $_SESSION['devmode']) {				$_SESSION['pdoq'][get_class($this)][] = ['q' => $query1->queryString, 'v' => ':idfam = "'.$fam->getId().'" '];			}			if (empty($vues)) { return true; }			$query_add = 'INSERT INTO `pe_emballages_famille_vues` (`id_famille_emballage`, `id_vue`) VALUES ';			foreach ($vues as $vue_id) {				$query_add.= '('.$fam->getId().', '.intval($vue_id).'),';			}			$query_add = substr($query_add,0,-1);			$query2 = $this->db->prepare($query_add);			// Log de la requête pour le mode Dev			if (isset($_SESSION['devmode']) && $_SESSION['devmode']) { $_SESSION['pdoq'][get_class($this)][] = $query2->queryString; }			return $query2->execute();		} // FIN réussite suppression		return false;	} // FIN méthode	// Retourne la liste des emaballage pour la MAJ sur ticket (lot/froid)	public function getListeEmballagesTicket($params) {		$filtre_lot		= isset($params['id_lot'])		? intval($params['id_lot']) 			: 0;		$filtre_froid	= isset($params['id_froid'])	? intval($params['id_froid']) 			: 0;		$query_liste = 'SELECT `id_emballage_lot` AS id FROM `pe_emballages_prod` WHERE ';		$query_liste.= $filtre_lot > 0 ? '`id_lot` = ' . $filtre_lot : '';		$query_liste.= $filtre_froid > 0 ? '`id_froid` = ' . $filtre_froid : '';		$query = $this->db->prepare($query_liste);		$query->execute();		$liste = [];		foreach ($donnees = $query->fetchAll(PDO::FETCH_ASSOC) as $donnee) {			$tmp = $this->getEmballageLot($donnee['id']);			if ($tmp instanceof EmballageLot) {				$liste[] = $tmp;			}		} // FIN boucle		return $liste;	} // FIN méthode	// Retourne la liste des emballages	public function getListeEmballages($params) {		// Limites sur statuts		$show_supprime 	= isset($params['show_supprime']) 	? $params['show_supprime'] 			: false;		// Filtres		$filtre_famille = isset($params['id_famille']) 	? intval($params['id_famille']) 		: 0;		$filtre_frs		= isset($params['id_frs']) 		? intval($params['id_frs']) 			: 0;		$filtre_ref		= isset($params['ref']) 		? preg_replace("/[^0-9a-z]/", "",$params['ref']) : '';		$filtre_lot		= isset($params['id_lot'])		? intval($params['id_lot']) 			: 0;		$filtre_froid	= isset($params['id_froid'])	? intval($params['id_froid']) 			: 0;		$filtre_vue		= isset($params['id_vue'])		? intval($params['id_vue']) 			: 0;		// Autres filtres		$conso 			= isset($params['conso']) 		? intval($params['conso']) 				: 0;		$not_encours 	= isset($params['not_encours']) ? boolval($params['not_encours']) 		: false;		$encours 		= isset($params['encours']) 	? boolval($params['encours']) 			: false;		//$defectueux 	= isset($params['defectueux'])  ? boolval($params['defectueux']) 		: false;	// Gestion bool des défectueux pour les perfs front		$defectval		= isset($params['defec'])  		? intval($params['defec']) 				: 0;		// Gestion par entier pour les filtres d'admin		// Pagination		$start 			= isset($params['start']) 			? intval($params['start']) 			: 0;		$nb 			= isset($params['nb_result_page']) 	? intval($params['nb_result_page']) : 10000000;		$query_liste = 'SELECT SQL_CALC_FOUND_ROWS e.`id`, e.`id_famille`, e.`id_fournisseur`, e.`numlot_frs`, e.`supprime`, fam.`nom` AS nom_famille,                            frs.`nom` AS nom_frs, e.`encours`, ep.`qte` AS qte_prod, e.`id_precedent`, e.`date_upd`, e.`consomme`, e.`stock_initial`, e.`stock_actuel`, e.`date_rcp`, e.`date_out`							FROM `pe_emballages_lots` e								LEFT JOIN `pe_emballages_familles` fam ON fam.`id` = e.`id_famille`								LEFT JOIN `pe_emballages_famille_vues` famv ON famv.`id_famille_emballage` = fam.`id`								LEFT JOIN `pe_tiers` frs ON frs.`id` = e.`id_fournisseur`								LEFT JOIN `pe_emballages_prod` ep ON ep.`id_emballage_lot` = e.`id` 							WHERE 1 = 1 ';		// Filtres		$query_liste.= $filtre_ref  != ''  ? 'AND e.`numlot_frs` LIKE "%'.$filtre_ref.'%" ' 	: '';		$query_liste.= $filtre_famille > 0  ? 'AND e.`id_famille` = '.$filtre_famille.' ' 	: '';		$query_liste.= $filtre_frs > 0  ? 'AND e.`id_fournisseur` = '.$filtre_frs.' ' 	: '';		$query_liste.= $filtre_lot > 0  ? 'AND ep.`id_lot` = '.$filtre_lot.' ' 	: '';		$query_liste.= $filtre_froid > 0  ? 'AND ep.`id_froid` = '.$filtre_froid.' ' 	: '';		$query_liste.= $filtre_vue > 0  ? 'AND famv.`id_vue` = '.$filtre_vue.' ' 	: '';		// Autres filtres		$query_liste.= $not_encours ? 'AND e.`encours` = 0 ' : '';		$query_liste.= $encours 	? 'AND e.`encours` = 1 ' : '';		//$query_liste.= $defectueux ? 'AND e.`defectueux` > 0 ' : '';		$query_liste.= $conso == 1 ? 'AND e.`consomme` = 1 ' : '';		$query_liste.= $conso == -1 ? 'AND e.`consomme` = 0 ' : '';		//$query_liste.= $defectval == 1 ? 'AND e.`defectueux` > 0 ' : '';		//$query_liste.= $defectval == -1 ? 'AND e.`defectueux` = 0 ' : '';		// Limites sur statuts		$query_liste.= !$show_supprime != ''  ? 'AND e.`supprime`  = 0  ' : '';		// Tri et pagination		$query_liste.= 'GROUP BY e.`id`, e.`id_famille`, e.`id_fournisseur`, e.`numlot_frs`, e.`supprime`, fam.`nom`, frs.`nom`, e.`encours`, ep.`qte`, e.`id_precedent`, e.`date_upd`, e.`consomme`  ';		$query_liste.= 'ORDER BY fam.`nom` ASC,  e.`id` DESC  ';		$query_liste.= 'LIMIT ' . $start . ',' . $nb;		// Requête		$query = $this->db->prepare($query_liste);		$query->execute();		$this->setNb_results($this->db->query('SELECT FOUND_ROWS()')->fetchColumn());		// Log de la requête pour le mode Dev		if (isset($_SESSION['devmode']) && $_SESSION['devmode']) { $_SESSION['pdoq'][get_class($this)][] = $query->queryString; }		$liste = [];		foreach ($donnees = $query->fetchAll(PDO::FETCH_ASSOC) as $donnee) {			$skipEmballage = false;			$emb = new EmballageLot($donnee);			// On récupère les défectueux			$def = $this->getDefectueuxFromEmballage($emb);			$emb->setDefectueux($def);			if (!$skipEmballage) {				$liste[] = $emb;			}		}		return $liste;	} // FIN méthode	// Retourne les defectueux pour un emblallage	public function getDefectueuxFromEmballage(EmballageLot $emb) {		$query_liste = 'SELECT d.`id`, d.`id_emballage`, d.`date`, d.`qte`, d.`id_lot`, d.`id_froid`, IF (l.`numlot` IS NOT NULL, l.`numlot`, 0) AS num_lot,       							IF (f.`id` IS NOT NULL,       							    CONCAT(UPPER(ft.`code`), LPAD(f.`id`,4,0))       							    , "") AS code_froid							FROM `pe_emballages_defectueux` d								LEFT JOIN `pe_lots` l ON l.`id` = d.`id_lot`								LEFT JOIN `pe_froid` f ON f.`id` = d.`id_froid`								LEFT JOIN `pe_froid_types` ft ON ft.`id` = f.`id_type`							WHERE d.`id_emballage` = ' . $emb->getId() . '							ORDER BY d.`date`';		$query = $this->db->prepare($query_liste);		$query->execute();		$liste = [];		foreach ($query->fetchAll(PDO::FETCH_ASSOC) as $donnee) {			$liste[] = new EmballageDefectueux($donnee);		}		return $liste;	} // FIN méthode	// Retourne un emballage (lot)	public function getEmballageLot($id) {		$query_emb = 'SELECT e.`id`, e.`id_famille`, e.`id_fournisseur`, e.`numlot_frs`, e.`supprime`, fam.`nom` AS nom_famille, frs.`nom` AS nom_frs, e.`encours`, e.`id_precedent`, e.`date_upd`,       							e.`stock_initial`, e.`stock_actuel`, e.`date_rcp`, e.`date_out`							FROM `pe_emballages_lots` e								LEFT JOIN `pe_emballages_familles` fam ON fam.`id` = e.`id_famille`								LEFT JOIN `pe_tiers` frs ON frs.`id` = e.`id_fournisseur` 						WHERE e.`id` = '.$id;		// Requête		$query = $this->db->prepare($query_emb);		$query->execute();		// Log de la requête pour le mode Dev		if (isset($_SESSION['devmode']) && $_SESSION['devmode']) { $_SESSION['pdoq'][get_class($this)][] = $query->queryString; }		$donnee = $query->fetch();		if (!$donnee || empty($donnee)) { return false; }		$emb = new EmballageLot($donnee);		// Rattachement du stock		$emb->setStock_logs($this->getEmballageStocskLogs($emb));		$emb->setStock($this->getEmballageStock($emb));		// Rattachement des défectueyx		$emb->setDefectueux($this->getDefectueuxFromEmballage($emb));		return $emb;	} // FIN méthode	// Retourne le stock pour un emballage (derniere entrée dans les logs de stock)	public function getEmballageStock(EmballageLot $emb) {		$query_stock = 'SELECT `stock_mouvement` FROM `pe_emballages_stock` WHERE `id_emballage_lot` = :id ORDER BY `date` DESC LIMIT 0,1';		$query = $this->db->prepare($query_stock);		$query->bindValue(':id', $emb->getId());		$query->execute();		// Log de la requête pour le mode Dev		if (isset($_SESSION['devmode']) && $_SESSION['devmode']) {			$_SESSION['pdoq'][get_class($this)][] = ['q' => $query->queryString, 'v' => ':id = "'.$emb->getId().'" '];		}		$donnee = $query->fetch();		if (!$donnee || empty($donnee)) { return 0; }		return $donnee && isset($donnee['stock']) ? intval($donnee['stock']) : 0;	} // FIN méthode	// Retourne le log des stocks pour un emballage (	public function getEmballageStocskLogs(EmballageLot $emb, $limite = 10) {		$query_liste = 'SELECT s.`id`, s.`id_emballage_lot`, s.`stock_mouvement`, s.`date`, s.`user_id`, s.`id_vue`, IF (s.`id_vue` > 0, v.`nom`, "BackOffice") AS nom_vue							FROM `pe_emballages_stock` s 								LEFT JOIN `pe_vues` v ON v.`id` = s.`id_vue`							WHERE `id_emballage_lot` = :id 							ORDER BY `date` DESC							LIMIT 0,'.$limite;		$query = $this->db->prepare($query_liste);		$query->bindValue(':id', $emb->getId());		$query->execute();		// Log de la requête pour le mode Dev		if (isset($_SESSION['devmode']) && $_SESSION['devmode']) {			$_SESSION['pdoq'][get_class($this)][] = ['q' => $query->queryString, 'v' => ':id = "'.$emb->getId().'" '];		}		$liste = [];		$userManager = new UserManager($this->db);		foreach ($donnees = $query->fetchAll(PDO::FETCH_ASSOC) as $donnee) {			$stockLog = new EmballageStock($donnee);			// Rattachement de l'objet User			$userStock = $userManager->getUser($stockLog->getUser_id());			$stockLog->setUser($userStock instanceof User ? $userStock : new User([]));			$liste[] = $stockLog;		}		// On intègre les écarts d'une ligne à l'autre		$liste = array_reverse($liste);		$stockPrecedent = 0;		foreach ($liste as $k => $stock) {			$ecart = $stock->getStock() - $stockPrecedent;			$stock->setEcart($ecart);			$liste[$k] = $stock;			$stockPrecedent = $stock->getStock();		} // FIN boucle		$liste = array_reverse($liste);		return $liste;	} // FIN méthode	// Enregistre un nouvel emballage	public function saveEmballage(EmballageLot $objet) {		$table		= 'pe_emballages_lots';	// Nom de la table		$champClef	= 'id';				// Nom du champ clef primaire		// FIN Configuration		$getter		= 'get'.ucfirst(strtolower($champClef));		$setter		= 'set'.ucfirst(strtolower($champClef));		if ($objet->$getter() == '' && !empty($objet->attributs)) {			$query_add = 'INSERT IGNORE INTO '.$table.' (';			foreach ($objet->attributs as $attribut)	{				$query_add.= strtoupper($attribut).',';			}			$query_add = substr($query_add,0,-1);			$query_add.=') VALUES (';			foreach ($objet->attributs as $attribut)	{				$query_add.= ':'.strtolower($attribut).',';			}			$query_add = substr($query_add,0,-1);			$query_add.=')';			$query = $this->db->prepare($query_add);			foreach ($objet->attributs as $attribut)	{				$attributget = 'get'.ucfirst($attribut);				$query->bindvalue(':'.strtolower($attribut), $objet->$attributget());			}			if ($query->execute()) {				// Log de la requête pour le mode Dev				if (isset($_SESSION['devmode']) && $_SESSION['devmode']) { $_SESSION['pdoq'][get_class($this)][] = $query->queryString; }				$objet->$setter($this->db->lastInsertId());				return $objet->$getter();			}		} else if ($objet->$getter() != '' && !empty($objet->attributs)) {			$query_upd = 'UPDATE '.$table.' SET ';			foreach($objet->attributs as $attribut) {				$query_upd.= strtoupper($attribut).' = :'.strtolower($attribut).',';			}			$query_upd = substr($query_upd,0,-1);			$query_upd .= ' WHERE '.$champClef.' = '.$objet->$getter();			$query = $this->db->prepare($query_upd);			foreach($objet->attributs as $attribut) {				$attributget = 'get'.ucfirst($attribut);				$query->bindvalue(':'.strtolower($attribut), $objet->$attributget());			}			try	{				$query->execute();				// Log de la requête pour le mode Dev				if (isset($_SESSION['devmode']) && $_SESSION['devmode']) { $_SESSION['pdoq'][get_class($this)][] = $query->queryString; }				return $objet->$getter();			} catch(PDOExeption $e) {return false;}		}		return false;	} // FIN méthode	// Enregistre un log de stock emballage	public function saveEmballageStock($emb, $stock, $id_vue = 0) {		$id_emballage = $emb instanceof EmballageLot ? $emb->getId() : intval($emb);		if ($id_emballage == 0) { return false; }		$emballage = $this->getEmballageLot($id_emballage);		if (!$emballage instanceOf EmballageLot) { return false; }		$utilisateur = isset($_SESSION['logged_user']) ? unserialize($_SESSION['logged_user']) : false;		$user_id = $utilisateur && $utilisateur instanceof User ? $utilisateur->getId() : 0;		$query_add = 'INSERT IGNORE INTO `pe_emballages_stock` (`id_emballage_lot`, `stock_mouvement`, `date`, `user_id`, `id_vue`) 						VALUES ('.$id_emballage.', '.$stock.', "'.date('Y-m-d H:i:s').'", '.$user_id.', '.$id_vue.' )';		$query = $this->db->prepare($query_add);		// Log de la requête pour le mode Dev		if (isset($_SESSION['devmode']) && $_SESSION['devmode']) { $_SESSION['pdoq'][get_class($this)][] = $query->queryString; }		$res = $query->execute();		$this->setEmballageEnCours($emballage);		return $res;	} // FIN méthode	// Purge le stock d'un emballage	public function purgeEmballageStock(EmballageLot $emb) {		$query_del = 'DELETE FROM `pe_emballages_stock` WHERE `id_emballage_lot` = ' . $emb->getId();		$query = $this->db->prepare($query_del);		// Log de la requête pour le mode Dev		if (isset($_SESSION['devmode']) && $_SESSION['devmode']) { $_SESSION['pdoq'][get_class($this)][] = $query->queryString; }		return $query->execute();	} // FIN méthode	// Retourne l'emballage en cours pour une famille	public function getEmballageEnCoursByFamille($fam) {		$fam_id = $fam instanceof EmballageFamille ? $fam->getId() : intval($fam);		$query_emb = 'SELECT e.`id`, e.`id_famille`, e.`id_fournisseur`, e.`numlot_frs`, e.`supprime`, fam.`nom` AS nom_famille, frs.`nom` AS nom_frs, e.`encours`, e.`id_precedent`, e.`date_upd`,       						e.`stock_initial`, e.`stock_actuel`, e.`date_rcp`, e.`date_out`							FROM `pe_emballages_lots` e								LEFT JOIN `pe_emballages_familles` fam ON fam.`id` = e.`id_famille`								LEFT JOIN `pe_tiers` frs ON frs.`id` = e.`id_fournisseur` 						WHERE e.`encours` = 1 AND fam.`id` = '.$fam_id;		// Requête		$query = $this->db->prepare($query_emb);		$query->execute();		// Log de la requête pour le mode Dev		if (isset($_SESSION['devmode']) && $_SESSION['devmode']) { $_SESSION['pdoq'][get_class($this)][] = $query->queryString; }		$donnee = $query->fetch();		if (!$donnee || empty($donnee)) { return false; }		$emb = new EmballageLot($donnee);		return $emb;	} // FIN méthode	// Met à jour l'association Emballage/Lot/Froid	public function addUpdEmballageProd($params) {		$id_emb 	= isset($params['id_emb']) 		? intval($params['id_emb']) 	: 0;		$id_lot 	= isset($params['id_lot']) 		? intval($params['id_lot']) 	: 0;		$id_froid 	= isset($params['id_froid']) 	? intval($params['id_froid']) 	: 0;		$qte_upd 	= isset($params['qte_upd']) 	? intval($params['qte_upd']) 	: 0;		if ($id_emb == 0 || $qte_upd == 0) { return false; }		$operateur = $qte_upd > 0 ? '+' : '';		$query_addupd = 'INSERT INTO `pe_emballages_prod` (`id_emballage_lot`, `id_lot`, `id_froid`, `qte`) 							VALUES ('.$id_emb.', '.$id_lot.', '.$id_froid.', '.$qte_upd.') 						ON DUPLICATE KEY UPDATE `qte` = `qte` '.$operateur.' ' . $qte_upd;		$query = $this->db->prepare($query_addupd);		$retour = $query->execute();		// Log de la requête pour le mode Dev		if (isset($_SESSION['devmode']) && $_SESSION['devmode']) { $_SESSION['pdoq'][get_class($this)][] = $query->queryString; }		// On supprime si des lignes sont à zéro ou négatives en qauntité si on a retiré du stock		if ($qte_upd < 0) {			$this->purgeEmballageProdQteNulles();		}		return $retour;	} // FIN méthode	// Vide les entrées vides en quantité ou négatives dans la table d'association emballage/lot/froid	public function purgeEmballageProdQteNulles() {		$query_del = 'DELETE FROM `pe_emballages_prod` WHERE `qte` < 1';		$query = $this->db->prepare($query_del);		// Log de la requête pour le mode Dev		if (isset($_SESSION['devmode']) && $_SESSION['devmode']) { $_SESSION['pdoq'][get_class($this)][] = $query->queryString; }		return $query->execute();	} // FIN méthode	// Attribue un emballage comme en cours au sein de sa famille	public function setEmballageEnCours(EmballageLot $emb) {		// On retire le statut "en cours" aux autres emballages de la famille		$query_upd = 'UPDATE `pe_emballages_lots` SET `encours` = 0 WHERE `id_famille` = ' . $emb->getId_famille();		$query = $this->db->prepare($query_upd);		// Log de la requête pour le mode Dev		if (isset($_SESSION['devmode']) && $_SESSION['devmode']) { $_SESSION['pdoq'][get_class($this)][] = $query->queryString; }		if (!$query->execute()) { return false; }		// On attribue le statut au nouvel emballage		$emb->setEncours(1);		return $this->saveEmballage($emb);	} // FIN méthode	// Associe tous les lots d'emballages "en cours" de chaque famille d'emballage dont la vue est concernée (à un lot ou une op de froid - source)	public function setEmballagesVue(Vue $vue, $objet) {		// Vérification de la source (lot/froid)		if (!$objet instanceof Lot && !$objet instanceof Froid) { return false; }		// On récupère tous les lots d'emballage en cours pour les familles d'emballage concerné par la vue		$query_liste = 'SELECT DISTINCT er.`id`							FROM `pe_emballages_lots` er								JOIN `pe_emballages_familles` f ON f. `id` = er.`id_famille`								JOIN `pe_emballages_famille_vues` fv ON fv.`id_famille_emballage` = f.`id`							WHERE f.`actif` = 1 AND f.`supprime` = 0 AND er.`encours` = 1 AND er.`supprime` = 0 AND fv.`id_vue` = ' . $vue->getId();		$query = $this->db->prepare($query_liste);		$query->execute();		// Log de la requête pour le mode Dev		if (isset($_SESSION['devmode']) && $_SESSION['devmode']) { $_SESSION['pdoq'][get_class($this)][] = $query->queryString; }		$liste = [];		foreach ($donnees = $query->fetchAll(PDO::FETCH_ASSOC) as $donnee) {			$liste[] = $donnee['id'];		}		// SI aucun, on renvoie un array vide		if (empty($liste)) { return false;	}		$query_ins = 'INSERT IGNORE INTO `pe_emballages_prod` (`id_emballage_lot`, `id_lot`, `id_froid`) VALUES ';		foreach ($liste as $id) {			$query_ins.= '('.$id.', ';			$query_ins.= $objet instanceof Lot ? $objet->getId().',' : '0,';			$query_ins.= $objet instanceof Froid ? $objet->getId() : '0';			$query_ins.= '),';		}		$query_ins = substr($query_ins,0,-1);		$query2 = $this->db->prepare($query_ins);		return $query2->execute();	} // FIN méthode	// Purge l'info des changement de lots tous les jours	public function purgeChangementLotEmballage() {		$query_upd = 'UPDATE `pe_emballages_lots` SET `id_precedent` = 0, `date_upd` = null WHERE `date_upd` < CURDATE()' ;		$query = $this->db->prepare($query_upd);		// Log de la requête pour le mode Dev		if (isset($_SESSION['devmode']) && $_SESSION['devmode']) { $_SESSION['pdoq'][get_class($this)][] = $query->queryString; }		return $query->execute();	} // FIN méthode	// Met à jour l'information de changement de lot d'emballage	public function setChangementRouleau(EmballageLot $old, EmballageLot $new, $objet = null) {		// Clean ancien rouleau + consommé		$query_upd_old = 'UPDATE `pe_emballages_lots` SET `id_precedent` = 0, `date_upd` = null, `consomme` = 1 WHERE `id` = ' .$old->getId() ;		$query_old = $this->db->prepare($query_upd_old);		$res1 = $query_old->execute();		// Nouveau rouleau		$query_upd_new = 'UPDATE `pe_emballages_lots` SET `id_precedent` = '. $old->getId().', `date_upd` = CURDATE(), `encours` = 1 WHERE `id` = ' .$new->getId() ;		$query_new = $this->db->prepare($query_upd_new);		$res2 = $query_new->execute();		// ON enregistre la changement de rouleau pour cette famille d'emballage dans la table de suivi		echo $query_add = 'INSERT IGNORE INTO `pe_emballages_changements` (`id_emballage_famille`, `date`) VALUES ('.$new->getId_famille().', "'.date('Y-m-d').'");';		$query_new = $this->db->prepare($query_add);		$res3 = $query_new->execute();		// On rajoute l'attribution du lot ou de l'op de froid au nouveau rouleau		if (is_object($objet)) {			$query_ins_prod = 'INSERT IGNORE INTO `pe_emballages_prod` (`id_emballage_lot`, `id_lot`, `id_froid`) 						VALUES ('.$new->getId().', ';			$query_ins_prod.=   $objet instanceof Lot ? $objet->getId().',' : '0,';	// id_lot			$query_ins_prod.=  !$objet instanceof Lot ? $objet->getId().')' : '0)';	// id_froid			$query_ins = $this->db->prepare($query_ins_prod);			$res4 = $query_ins->execute();		} else { $res4 = true; }		return $res1 && $res2 && $res3 && $res4;	} // FIN méthode	// retourne le détails des rouleaux rattachés à un lot et ses op (admin détail lot)	public function getListeEmballagesByLot($params) {		$id_lot = isset($params['id_lot']) ? intval($params['id_lot']) : 0;		if ($id_lot == 0) { return []; }		// Pagination		$start 			= isset($params['start']) 			? intval($params['start']) 			: 0;		$nb 			= isset($params['nb_result_page']) 	? intval($params['nb_result_page']) : 10000000;		$query_liste = 'SELECT SQL_CALC_FOUND_ROWS `id` FROM `pe_emballages_lots` WHERE id IN (							SELECT `id_emballage_lot` FROM `pe_emballages_prod` WHERE `id_lot` = :id_lot    						UNION 							SELECT  `id_emballage_lot` FROM `pe_emballages_prod` WHERE `id_froid` IN (							    SELECT fp.`id_froid` FROM `pe_froid_produits` fp 							    	WHERE fp.`id_lot` = :id_lot							)        					)';		$query_liste.= 'LIMIT ' . $start . ',' . $nb;		$query = $this->db->prepare($query_liste);		$query->bindValue(':id_lot', $id_lot);		$query->execute();		// Log de la requête pour le mode Dev		if (isset($_SESSION['devmode']) && $_SESSION['devmode']) { $_SESSION['pdoq'][get_class($this)][] = $query->queryString; }		$this->setNb_results($this->db->query('SELECT FOUND_ROWS()')->fetchColumn());		$liste = [];		foreach ($query->fetchAll(PDO::FETCH_ASSOC) as $donnee) {			$emb = $this->getEmballageLot((int)$donnee['id']);			if ($emb instanceof EmballageLot) {				$liste[] = $emb;			}		}		return $liste;	} // FIN méthode	// Ajoute un défectueux	public function addDefectueux(EmballageLot $emb, $id_lot, $id_froid) {		$query_add = 'INSERT INTO `pe_emballages_defectueux` (`id_emballage`, `date`, `qte`, `id_lot`, `id_froid`) 						VALUES ('.$emb->getId().', CURDATE(), 1, '.$id_lot.', '.$id_froid.') ON DUPLICATE KEY UPDATE `qte` = `qte` + 1';		$query = $this->db->prepare($query_add);		return $query->execute();	} // FIN méthode	// Retourne la famille et le nb de défectueux du jour courant (ticket ATL)	public function getEmballagesDefectueuxJour($id_lot = 0, $id_froid = 0) {		$query_liste = 'SELECT DISTINCT f.nom, d.`qte`							FROM `pe_emballages_prod` p 							JOIN `pe_emballages_lots` l ON l.`id` = p.`id_emballage_lot` 							JOIN `pe_emballages_familles` f ON f.`id` = l.`id_famille`							JOIN `pe_emballages_defectueux` d ON d.`id_emballage` = p.`id_emballage_lot` 						WHERE d.`date` = CURDATE() ';		$query_liste.= $id_lot > 0 ? ' AND p.`id_lot` = ' . $id_lot : '' ;		$query_liste.= $id_froid > 0 ? ' AND p.`id_froid` = ' . $id_froid : '' ;		$query = $this->db->prepare($query_liste);		$query->execute();		// Log de la requête pour le mode Dev		if (isset($_SESSION['devmode']) && $_SESSION['devmode']) { $_SESSION['pdoq'][get_class($this)][] = $query->queryString; }		$liste = [];		foreach ($query->fetchAll(PDO::FETCH_ASSOC) as $donnee) {			$liste[] = $donnee;		}		return $liste;	} // FIN méthode	// Retourne la famille et le numlot de l'ancien et du nouveau pour un changment de rouleau du jour courant (ticket ATL)	public function getEmballagesChangementRouleauJour($id_lot = 0, $id_froid = 0) {		if ($id_lot > 0 || $id_froid > 0) {			$query_liste = 'SELECT ef.`nom`, ec.`id_emballage_famille` AS id							FROM `pe_emballages_changements` ec								JOIN `pe_emballages_familles` ef ON ef.`id` = ec.`id_emballage_famille` 							WHERE ec.`date` = CURDATE() AND  ec.`id_emballage_famille` IN (							    SELECT `id_emballage_famille` FROM `pe_emballages_prod` ep JOIN `pe_emballages_lots` el ON el.`id` = ep.`id_emballage_lot` WHERE 1 ';			$query_liste.= $id_lot > 0 ? ' AND ep.`id_lot` = ' . $id_lot . ' ' : '';			$query_liste.= $id_froid > 0 ? ' AND ep.`id_froid` = ' . $id_froid . ' ' : '';			$query_liste.= ')';		} else {			$query_liste = 'SELECT ef.`nom`, ec.`id_emballage_famille` AS id							FROM `pe_emballages_changements` ec								JOIN `pe_emballages_familles` ef ON ef.`id` = ec.`id_emballage_famille` 							WHERE ec.`date` = CURDATE() ';		}		$query = $this->db->prepare($query_liste);		$query->execute();		// Log de la requête pour le mode Dev		if (isset($_SESSION['devmode']) && $_SESSION['devmode']) { $_SESSION['pdoq'][get_class($this)][] = $query->queryString; }		$liste = [];		foreach ($query->fetchAll(PDO::FETCH_ASSOC) as $donnee) {			if (!isset($liste[$donnee['id']])) {				$liste[$donnee['id']] = [];				$liste[$donnee['id']]['nb'] = 0;			}			$liste[$donnee['id']]['nom'] = $donnee['nom'];			$liste[$donnee['id']]['nb'] = $liste[$donnee['id']]['nb'] + 1;		}		return $liste;		/*		$query_liste = 'SELECT f.nom, l.`numlot_frs` AS actuel, lp.`numlot_frs` AS precedent									FROM `pe_emballages_prod` p									JOIN `pe_emballages_lots` l ON l.`id` = p.`id_emballage_lot`									LEFT JOIN `pe_emballages_lots` lp ON lp.`id` = l.`id_precedent`									JOIN `pe_emballages_familles` f ON f.`id` = l.`id_famille`								WHERE l.`date_upd` = CURDATE() AND l.`encours` = 1 ';				$query_liste.= $id_lot > 0 ? ' AND p.`id_lot` = ' . $id_lot : '' ;				$query_liste.= $id_froid > 0 ? ' AND p.`id_froid` = ' . $id_froid : '' ;				$query = $this->db->prepare($query_liste);				$query->execute();				// Log de la requête pour le mode Dev				if (isset($_SESSION['devmode']) && $_SESSION['devmode']) { $_SESSION['pdoq'][get_class($this)][] = $query->queryString; }				$liste = [];				foreach ($query->fetchAll(PDO::FETCH_ASSOC) as $donnee) {					$liste[] = $donnee;				}				return $liste;*/	} // FIN méthode	// Des familles d'emballage se retrouvent avec aucun rouleau "en cours" !	// On vérifie  et on passe à "en cours" le rouleau qui le stock actuel le plus faible	public function repareEnCours() {		$query_familles = 'SELECT `id` FROM `pe_emballages_familles` WHERE `actif` = 1 AND `supprime` = 0';		$queryF = $this->db->prepare($query_familles);		$queryF->execute();		// On boucle sur les familles actives		foreach ($queryF->fetchAll(PDO::FETCH_ASSOC) as $famille) {			$query_lots = 'SELECT COUNT(*) AS nb FROM `pe_emballages_lots` WHERE `encours` = 1 AND  `supprime` = 0  AND `id_famille` = ' . $famille['id'];			$queryL = $this->db->prepare($query_lots);			$queryL->execute();			$lotsNb = $queryL->fetch();			if ($lotsNb && isset($lotsNb['nb'])) {				$nb_encours = intval($lotsNb['nb']);				if ($nb_encours == 0) {					$query_upd = 'UPDATE `pe_emballages_lots` SET `encours` = 1 WHERE `encours` = 0 AND `id_famille` = '. $famille['id'] . ' ORDER BY `stock_actuel` LIMIT 1';					$queryU = $this->db->prepare($query_upd);					$queryU->execute();				}			}		} // FIN boucle familles		return true;		} // FIN méthode} // FIN classe