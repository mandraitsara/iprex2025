<?php/*   _|_|_|  _|_|_|      _|_| _|        _|    _|  _|    _|  CBO FrameWork _|        _|_|_|    _|    _|  (c) 2018 Cédric Bouillon _|        _|    _|  _|    _|   _|_|_|  _|_|_|      _|_|--------------------------------------------------------Objet DetailsFroid------------------------------------------------------*/class DetailsFroid {	protected		$id,		$id_type,		$date_entree,		$date_sortie,		$temp_debut,		$temp_fin,		$conforme,		$id_visa_controleur,		$date_controle,		$id_user_maj,		$nom_controleur,		$produits,		$poids_total_cgl;	public       $attributs = array();	public function __construct(array $donnees)	{		$this->hydrate($donnees);	}	public function hydrate(array $donnees)	{		foreach ($donnees as $key => $value) {			$method = 'set'.ucfirst(strtolower($key));			if (method_exists($this,$method)) {				$this->$method($value);			}		}		$this->attributs = array();	}	/* ----------------- GETTERS ----------------- */	public function getId() {		return $this->id;	}	public function getId_type() {		return $this->id_type;	}	public function getDate_entree() {		return $this->date_entree;	}	public function getDate_sortie() {		return $this->date_sortie;	}	public function getTemp_debut() {		return $this->temp_debut;	}	public function getTemp_fin() {		return $this->temp_fin;	}	public function getConforme() {		return $this->conforme;	}	public function getId_visa_controleur() {		return $this->id_visa_controleur;	}	public function getDate_controle() {		return $this->date_controle;	}	public function getId_user_maj() {		return $this->id_user_maj;	}	public function getNom_controleur() {		return $this->nom_controleur;	}	public function getProduits() {		return $this->produits;	}	public function getPoids_total_cgl() {		return $this->poids_total_cgl;	}	/* ----------------- SETTERS ----------------- */	public function setId($id) {		$this->id = (int)$id;	}	public function setId_type($valeur) {		$this->id_type = (int)$valeur;		Outils::setAttributs('id_type',$this);	}	public function setDate_entree($valeur) {		$this->date_entree = (string)$valeur;		Outils::setAttributs('date_entree',$this);	}	public function setDate_sortie($valeur) {		$this->date_sortie = (string)$valeur;		Outils::setAttributs('date_sortie',$this);	}	public function setTemp_debut($valeur) {		$this->temp_debut = (string)$valeur;		Outils::setAttributs('temp_debut',$this);	}	public function setTemp_fin($valeur) {		$this->temp_fin = (string)$valeur;		Outils::setAttributs('temp_fin',$this);	}	public function setConforme($valeur) {		$this->conforme = (int)$valeur;		Outils::setAttributs('conforme',$this);	}	public function setId_visa_controleur($valeur) {		$this->id_visa_controleur = (int)$valeur;		Outils::setAttributs('id_visa_controleur',$this);	}	public function setDate_controle($valeur) {		$this->date_controle = (string)$valeur;		Outils::setAttributs('date_controle',$this);	}	public function setId_user_maj($valeur) {		$this->id_user_maj = (int)$valeur;		Outils::setAttributs('id_user_maj',$this);	}	public function setNom_controleur($valeur) {		$this->nom_controleur = (string)$valeur;	}	public function setProduits($listeObjets) {		$this->produits = $listeObjets;	}	public function setPoids_total_cgl($valeur) {		$this->poids_total_cgl = (string)$valeur;	}	/* ----------------- METHODES ----------------- */	public function isConforme() {		return (int)$this->conforme == 1;	}	public function getTempsFroid($enMinutes = false) {		$datetime_entree = new DateTime(substr($this->date_entree,0,-3)); // On retire les secondes pour éviter les problèmes d'arrondis		$datetime_sortie = new DateTime(substr($this->date_sortie,0,-3));		$intervale = $datetime_entree->diff($datetime_sortie);		return $enMinutes			? abs($datetime_entree->getTimestamp() - $datetime_sortie->getTimestamp()) / 60			: $intervale->format('%H:%I');	}	public function getType_machine() {		switch ($this->type) {			case 0:				return 'Congélateur';				break;			case 1:				return 'Surgélateur vertical';				break;			case 2:				return 'Surgélateur horizontal';				break;		}	}} // FIN classe