<?php/*   _|_|_|  _|_|_|      _|_| _|        _|    _|  _|    _|  CBO FrameWork _|        _|_|_|    _|    _|  (c) 2018 Cédric Bouillon _|        _|    _|  _|    _|   _|_|_|  _|_|_|      _|_|--------------------------------------------------------Manager de l'Objet ProduitCategorie------------------------------------------------------*/class ProduitCategoriesManager {	protected	$db;	public function __construct($db) {		$this->setDb($db);	}		//##### GETTERS #####	public function getNb_results() {		return $this->nb_results;	}		//##### SETTERS #####	public function setDb(PDO $db) {		$this->db = $db;	}		/****************	 * METHODES	 ***************/	// Retourne une catégorie de produits par son ID	public function getProduitCategorie($id) {		$query_categorie = 'SELECT `id`, `nom`, `actif`, `supprime`, `date_add`, `date_maj`									FROM `pe_produits_categories`								  WHERE `id` = :id';		$query = $this->db->prepare($query_categorie);		$query->bindValue(':id', (int)$id);		$query->execute();		$donnee = $query->fetch();		return $donnee && !empty($donnee) ? new ProduitCategorie($donnee) : false;	} // FIN méthode	// Retourne la liste des catégories de produits	public function getListeProduitCategories($show_inactifs = false, $show_supprime = false, $recherche = '') {		$query_liste = 'SELECT `id`, `nom`, `actif`, `supprime`, `date_add`, `date_maj`							FROM `pe_produits_categories`						WHERE 1 = 1 ';		$query_liste.= !$show_inactifs != '' ? 'AND `actif` = 1 ' : '';		$query_liste.= !$show_supprime != '' ? 'AND `supprime` = 0 ' : '';		$query_liste.= $recherche 	   != '' ? 'AND TRIM(LOWER(`nom`)) LIKE "%'.trim(strtolower($recherche)).'%" ' : '';		$query_liste.= 'ORDER BY `nom` ASC';		$query = $this->db->prepare($query_liste);		$query->execute();		$liste = [];		foreach ($query->fetchAll(PDO::FETCH_ASSOC) as $donnee) {			$liste[] = new ProduitCategorie($donnee);		}		return $liste;	} // FIN getListe		// Enregistre une nouvelle catégorie de produits	public function saveProduitCategorie(ProduitCategorie $objet) {				$table		= 'pe_produits_categories';	// Nom de la table		$champClef	= 'id';						// Nom du champ clef primaire		// FIN Configuration		$getter		= 'get'.ucfirst(strtolower($champClef));		$setter		= 'set'.ucfirst(strtolower($champClef));		if ($objet->$getter() == '' && !empty($objet->attributs)) {			$query_add = 'INSERT INTO `'.$table.'` (';			foreach ($objet->attributs as $attribut)	{				$query_add.= '`'.$attribut.'`,';			}			$query_add = substr($query_add,0,-1);			$query_add.=') VALUES (';			foreach ($objet->attributs as $attribut)	{				$query_add.= ':'.strtolower($attribut).' ,';			}			$query_add = substr($query_add,0,-1);			$query_add.=')';			$query = $this->db->prepare($query_add);			$query_log = $query_add;			foreach ($objet->attributs as $attribut)	{				$attributget = 'get'.ucfirst($attribut);				$query->bindvalue(':'.strtolower($attribut), $objet->$attributget());				$dq = is_numeric($objet->$attributget()) ? '' : '"';				$query_log = str_replace(':'.strtolower($attribut).' ', $dq.$objet->$attributget().$dq.' ', $query_log);			}			if ($query->execute()) {				$objet->$setter($this->db->lastInsertId());				Outils::saveLog($query_log);				return $objet->$getter();			}		} else if ($objet->$getter() != '' && !empty($objet->attributs)) {			$query_upd = 'UPDATE `'.$table.'` SET ';			foreach($objet->attributs as $attribut) {				$query_upd.= '`'.$attribut.'` = :'.strtolower($attribut).' ,';			}			$query_upd = substr($query_upd,0,-1);			$query_upd .= ' WHERE `'.$champClef.'` = '.$objet->$getter();			$query = $this->db->prepare($query_upd);			$query_log = $query_upd;			foreach($objet->attributs as $attribut) {				$attributget = 'get'.ucfirst($attribut);				$query->bindvalue(':'.strtolower($attribut), $objet->$attributget());				$dq = is_numeric($objet->$attributget()) ? '' : '"';				$query_log = str_replace(':'.strtolower($attribut).' ', $dq.$objet->$attributget().$dq.' ', $query_log);			}			try	{				$query->execute();				Outils::saveLog($query_log);				return true;			} catch(PDOExeption $e) {return false;}		}		return false;			} // FIN méthode	// Vérifie si une catégorie de produits existe déjà avec ce nom	public function checkExisteDeja($nom, $id_exclu = 0) {		$query_check = 'SELECT COUNT(*) AS nb FROM `pe_produits_categories` WHERE (LOWER(`nom`) = :nom )';		$query_check.= (int)$id_exclu > 0 ? ' AND `id` != ' . (int)$id_exclu : '';		$query = $this->db->prepare($query_check);		$query->bindValue(':code', trim(strtolower($nom)));		$query->execute();		$donnee = $query->fetchAll(PDO::FETCH_ASSOC);		if ($donnee && isset($donnee[0]) && isset($donnee[0]['nb']) && intval($donnee[0]['nb']) > 0) {			return true;		}		return false;	} // FIN méthode	// Retourne le nombre de produits dans une catégorie	public function getNbProduits($categorie) {		$id_categorie = $categorie instanceof ProduitCategorie ? $categorie->getId() : intval($categorie);		$query_nb = 'SELECT COUNT(*) AS nb FROM `pe_produits_categories_pdt` WHERE `id_categorie` = ' . $id_categorie;		$query = $this->db->prepare($query_nb);		$query->execute();		$donnee = $query->fetchAll(PDO::FETCH_ASSOC);		return $donnee && isset($donnee[0]) && isset($donnee[0]['nb']) ? intval($donnee[0]['nb']) : 0;	} // FIN méthode	// Supprime la liaison des produits d'une catégorie dans la table relationelle	// (lorsqu'on supprime une catégorie par un flag sur le champ)	public function razProduitsCategories($categorie_id) {		$query_del = 'DELETE FROM `pe_produits_categories_pdt` WHERE `id_categorie` = ' . intval($categorie_id);		$query = $this->db->prepare($query_del);		Outils::saveLog($query_del);		return $query->execute();	}  // FIN méthode	// Affecte ou met à jour la liaison entre un produit et une catégorie	public function liaisonProduitCategoriePdt($id_produit, $ids_categories) {		// On supprime les liaisons existantes		$query_del = 'DELETE FROM `pe_produits_categories_pdt` WHERE `id_produit` = ' . intval($id_produit);		$query1 = $this->db->prepare($query_del);		$resDel = $query1->execute();		Outils::saveLog($query_del);		// On rajoute le lien si on a des catégories		if (!empty($ids_categories)) {			$query_add = 'INSERT INTO `pe_produits_categories_pdt` (`id_produit`, `id_categorie`) VALUES ';			foreach ($ids_categories as $id_cate) {				$query_add.= '(' . intval($id_produit) . ', ' . intval($id_cate).'),';			}			$query_add = substr($query_add,0,-1);			$query2 = $this->db->prepare($query_add);			Outils::saveLog($query_add);			return $query2->execute();		} // FIN test catégorie		return $resDel;	} // FIN méthode	// Retourne un array des catégories d'un produit	public function getCategoriesByProduit(Produit $pdt) {		$query_liste = 'SELECT pc.`id`, pc.`nom`, pc.`actif`, pc.`supprime`, pc.`date_add`, pc.`date_maj`							FROM `pe_produits_categories` pc								JOIN `pe_produits_categories_pdt` pcp ON pcp.`id_categorie` = pc.`id`						WHERE pcp.`id_produit` = ' . $pdt->getId();		$query = $this->db->prepare($query_liste);		$query->execute();		$liste = [];		foreach ($query->fetchAll(PDO::FETCH_ASSOC) as $donnee) {			$liste[] = new ProduitCategorie($donnee);		}		return $liste;	} // FIN méthode} // FIN classe