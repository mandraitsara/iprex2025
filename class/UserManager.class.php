<?php/*   _|_|_|  _|_|_|      _|_| _|        _|    _|  _|    _|  CBO FrameWork _|        _|_|_|    _|    _|  (c) 2018 Cédric Bouillon _|        _|    _|  _|    _|   _|_|_|  _|_|_|      _|_|--------------------------------------------------------Manager de l'objet User------------------------------------------------------*/class UserManager {	protected    $db, $nb_results;	public function __construct($db) {		$this->setDb($db);	}	/* ----------------- GETTERS ----------------- */	public function getNb_results() {		return $this->nb_results;	}	/* ----------------- SETTERS ----------------- */	public function setDb(PDO $db) {		$this->db = $db;	}	/* ----------------- METHODES ----------------- */	// Retourne la liste des User	public function getListeUsers($params = []) {		$showDevs 		= isset($params['show_devs']) 		&& is_bool($params['show_devs']) 		? $params['show_devs'] 		: false;		$showSupprimes 	= isset($params['show_supprimes']) 	&& is_bool($params['show_supprimes']) 	? $params['show_supprimes'] : false;		$nett 			= isset($params['nett']) 			&& is_bool($params['nett']) 			? $params['nett'] : false;		$devSupprimes 	= isset($params['dev_supprimes']) ? $params['dev_supprimes'] 			: false;; // Pour DEV Voir les utilisateurs supprimés		$filtre_nom     = isset($params['filtre_nom'])    ? $params['filtre_nom'] 	  			: '';		$filtre_profil  = isset($params['filtre_profil']) ? $params['filtre_profil']  			: 0;		$filtre_actif 	= isset($params['filtre_actif']) ? intval($params['filtre_actif']) 	:	 -1;		$query_liste = "SELECT u.`id`, u.`nom`, u.`prenom`, u.`email`, u.`profil_id`, u.`code`, u.`actif`, u.`supprime` ,u.`date_creation`, u.`date_modif`, p.`is_resp`, p.`is_gescom`, p.`is_admin`, p.`is_nett`, p.`is_dev`, u.`alertes`							FROM `pe_users` u								LEFT JOIN `pe_profils` p ON p.`id` = u.`profil_id` 								WHERE 1 ";		$query_liste.= !$showDevs 		?  " AND p.`is_dev` = 0	" 	: "";		$query_liste.= !$showSupprimes 	?  " AND u.`supprime` = 0 " : "";		$query_liste.= $nett 	?  " AND p.`is_nett` = 1 " : "";		$query_liste.= $showSupprimes && $devSupprimes ?  " AND u.`supprime` = 1 " : "";		$query_liste.= $filtre_nom != '' 	?  ' AND (u.`nom` LIKE  "%'.$filtre_nom.'%" OR u.`prenom` LIKE  "%'.$filtre_nom.'%" OR CONCAT(u.`prenom`, " ", u.`nom`) LIKE  "%'.$filtre_nom.'%") ': "";		$query_liste.= $filtre_profil > 0	?  " AND u.`profil_id` = ".$filtre_profil." " : "";		$query_liste.= $filtre_actif > -1	?  " AND u.`actif` = ".$filtre_actif." " : "";		$query_liste.= "		ORDER BY u.`nom`, u.`prenom` ASC";		$query = $this->db->prepare($query_liste);		$query->execute();		$liste = [];		foreach ($query->fetchAll(PDO::FETCH_ASSOC) as $donnee) {			$liste[] = new User($donnee);		}		return $liste;	} // FIN liste des User	// Retourne un User	public function getUser($id) {		$query_object = "SELECT u.`id`, u.`nom`, u.`prenom`, u.`email`, u.`profil_id`, u.`code`, u.`actif`, u.`supprime`, u.`date_creation`,  u.`date_modif`, p.`is_resp`, p.`is_gescom`, p.`is_admin`, p.`is_dev`, u.`alertes`                FROM `pe_users` u                   LEFT JOIN `pe_profils` p ON p.`id` = u.`profil_id` 				WHERE u.`id` = " . (int)$id;		$query = $this->db->prepare($query_object);		if ($query->execute()) {			$donnee = $query->fetchAll(PDO::FETCH_ASSOC);			return $donnee && isset($donnee[0]) ? new User($donnee[0]) : false;		} else {			return false;        }	} // FIN get User	// Retourne un User par son e-mail (après check cnx admin)	public function getUserAdminByMail($mail) {		$query_user = "SELECT u.`id`, u.`nom`, u.`prenom`, u.`email`, u.`profil_id`, u.`code`, u.`actif`, u.`supprime`, u.`date_creation`,  u.`date_modif`, p.`is_resp`, p.`is_gescom`, p.`is_admin`, p.`is_dev`, u.`alertes`                FROM `pe_users` u JOIN `pe_profils` p ON p.`id` = u.`profil_id` WHERE u.`email` = :email";		$query = $this->db->prepare($query_user);		$query->bindValue(':email', $mail);		if ($query->execute()) {			$donnee = $query->fetchAll(PDO::FETCH_ASSOC);			return $donnee && isset($donnee[0]) ? new User($donnee[0]) : false;		} else {			return false;		}	} // FIN getUserAdminByMail	// Enregistre & sauvegarde (Méthode Save)	public function saveUser(User $objet) {		$table      = 'pe_users'; // Nom de la table		$champClef  = 'id'; // Nom du champ clef		// FIN Configuration		$getter     = 'get'.ucfirst(strtolower($champClef));		$setter     = 'set'.ucfirst(strtolower($champClef));		if ($objet->$getter() == '' && !empty($objet->attributs)) {			$query_add = 'INSERT INTO `'.$table.'` (';			foreach ($objet->attributs as $attribut)	{				$query_add.= '`'.$attribut.'`,';			}			$query_add = substr($query_add,0,-1);			$query_add.=') VALUES (';			foreach ($objet->attributs as $attribut)	{				$query_add.= ':'.strtolower($attribut).' ,';			}			$query_add = substr($query_add,0,-1);			$query_add.=')';			$query = $this->db->prepare($query_add);			$query_log = $query_add;			foreach ($objet->attributs as $attribut)	{				$attributget = 'get'.ucfirst($attribut);				$query->bindvalue(':'.strtolower($attribut), $objet->$attributget());				$dq = is_numeric($objet->$attributget()) ? '' : '"';				$query_log = str_replace(':'.strtolower($attribut).' ', $dq.$objet->$attributget().$dq.' ', $query_log);			}			if ($query->execute()) {				$objet->$setter($this->db->lastInsertId());				Outils::saveLog($query_log);				return $objet->$getter();			}		} else if ($objet->$getter() != '' && !empty($objet->attributs)) {			$query_upd = 'UPDATE `'.$table.'` SET ';			foreach($objet->attributs as $attribut) {				$query_upd.= '`'.$attribut.'` = :'.strtolower($attribut).' ,';			}			$query_upd = substr($query_upd,0,-1);			$query_upd .= ' WHERE `'.$champClef.'` = '.$objet->$getter();			$query = $this->db->prepare($query_upd);			$query_log = $query_upd;			foreach($objet->attributs as $attribut) {				$attributget = 'get'.ucfirst($attribut);				$query->bindvalue(':'.strtolower($attribut), $objet->$attributget());				$dq = is_numeric($objet->$attributget()) ? '' : '"';				$query_log = str_replace(':'.strtolower($attribut).' ', $dq.$objet->$attributget().$dq.' ', $query_log);			}			try	{				$query->execute();				Outils::saveLog($query_log);				return true;			} catch(PDOExeption $e) {return false;}		}		return false;	} // FIN méthode	// Vérifie le code d'un user actif pour connexion	public function checkLoginUser($code) {		if ($code == '') { return false; }		$query_check = 'SELECT `id` FROM `pe_users` WHERE `code` = :code AND `actif` = 1 AND `supprime` = 0';		$query = $this->db->prepare($query_check);		$query->bindValue(':code', $code);		$query->execute();		$donnee = $query->fetchAll(PDO::FETCH_ASSOC);		if ($donnee && isset($donnee[0]) && isset($donnee[0]['id']) && intval($donnee[0]['id']) > 0) {			return $this->getUser(intval($donnee[0]['id']));		}		return false;	} // FIN méthode	// Vérifie si un code existe déjà	public function checkCodeExiste($code) {		$query_check = 'SELECT COUNT(*) AS nb FROM `pe_users` WHERE `code` = :code ';		$query = $this->db->prepare($query_check);		$query->bindValue(':code', $code);		$query->execute();		$donnee = $query->fetchAll(PDO::FETCH_ASSOC);		if ($donnee && isset($donnee[0]) && isset($donnee[0]['nb']) && intval($donnee[0]['nb']) > 0) {			return true;		}		return false;	} // FIN méthode	// Vérifie si une adresse e-mail existe déjà	public function checkMailExiste($email) {		$query_check = 'SELECT COUNT(*) AS nb FROM `pe_users` WHERE LOWER(`email`) = :email';		$query = $this->db->prepare($query_check);		$query->bindValue(':email', trim(strtolower($email)));		$query->execute();		$donnee = $query->fetchAll(PDO::FETCH_ASSOC);		if ($donnee && isset($donnee[0]) && isset($donnee[0]['nb']) && intval($donnee[0]['nb']) > 0) {			return true;		}		return false;	} // FIN méthode	// Vérifie les identifiants pour une connexion admin	public function checkLoginAdmin($login, $mdp) {		// On récupère le hash du mdp de l'admin correspondant au mail :		$query_hash = 'SELECT u.`admin_hash` 						FROM `pe_users` u							JOIN `pe_profils` p ON p.`id` = u.`profil_id`						WHERE LOWER(u.`email`) = :email OR LOWER(SUBSTRING(u.`email`, 1, LOCATE("@", u.`email`) - 1)) = :email						  	AND u.`actif` = 1						  	AND u.`supprime` = 0							AND (p.`is_admin` = 1 OR p.`is_gescom` = 1)';		$query = $this->db->prepare($query_hash);		$query->bindValue(':email', strtolower($login));		$query->execute();		$donnee = $query->fetchAll(PDO::FETCH_ASSOC);		// Si résultat absent ou résultant d'une erreur		if (!$donnee || empty($donnee) || !isset($donnee[0]) || !isset($donnee[0]['admin_hash'])) {  return false; }		$hash = $donnee[0]['admin_hash'];		// On vérifie le hash		return password_verify($mdp, $hash);	} // FIN fonction	// Retoune l'adresse e-mail d'un utilisateur actif d'après son préfixe (hors domaine) s'il n'y en a qu'un qui correspond	public function getUniqueUserMailFromPrefix($prefixe) {		$query_mail = 'SELECT  LOWER(`email`) AS email						FROM `pe_users` 							WHERE `actif` = 1							  	AND `supprime` = 0								AND  LOWER(SUBSTRING(`email`, 1, LOCATE("@", `email`) - 1)) = "' . strtolower($prefixe) .'"';		$query = $this->db->prepare($query_mail);		$query->execute();		$liste =  $query->fetchAll(PDO::FETCH_ASSOC);		if (count($liste) != 1) { return false; }		return $liste[0]['email'];	} // FIN fonction	// Retourne l'utilisateur BOT (scan frais)	public function getUserBot() {		$query_object = 'SELECT u.`id`, u.`nom`, u.`prenom`, u.`email`, u.`profil_id`, u.`code`, u.`actif`, u.`supprime`, u.`date_creation`,  u.`date_modif`, p.`is_resp`, p.`is_admin`,  p.`is_gescom`, p.`is_dev`, u.`alertes`                FROM `pe_users` u                   LEFT JOIN `pe_profils` p ON p.`id` = u.`profil_id` 				WHERE TRIM(LOWER(u.`nom`)) = "bot" ';		$query = $this->db->prepare($query_object);		if ($query->execute()) {			$donnee = $query->fetchAll(PDO::FETCH_ASSOC);			return $donnee && isset($donnee[0]) ? new User($donnee[0]) : false;		} else {			return false;		}	} // FIN fonction} // FIN classe