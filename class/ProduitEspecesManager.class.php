<?php/*   _|_|_|  _|_|_|      _|_| _|        _|    _|  _|    _|  CBO FrameWork _|        _|_|_|    _|    _|  (c) 2018 Cédric Bouillon _|        _|    _|  _|    _|   _|_|_|  _|_|_|      _|_|--------------------------------------------------------Manager de l'Objet ProduitEspece------------------------------------------------------*/class ProduitEspecesManager {	protected	$db;	public function __construct($db) {		$this->setDb($db);	}		//##### GETTERS #####	public function getNb_results() {		return $this->nb_results;	}		//##### SETTERS #####	public function setDb(PDO $db) {		$this->db = $db;	}		/****************	 * METHODES	 ***************/	// Retourne une espèce de produits par son ID	public function getProduitEspece($id) {		$query_espece_produits = 'SELECT `id`, `nom`, `couleur`, `abats`, `actif`, `supprime`, `date_add`, `date_maj`									FROM `pe_produits_especes`								  WHERE `id` = :id';		$query = $this->db->prepare($query_espece_produits);		$query->bindValue(':id', (int)$id);		$query->execute();		$donnee = $query->fetch();		return $donnee && !empty($donnee) ? new ProduitEspece($donnee) : false;	} // FIN méthode	// Retourne la liste des especes de produits	public function getListeProduitEspeces($show_inactifs = false, $show_supprime = false, $recherche = '') {		$query_liste = 'SELECT `id`, `nom`, `couleur`, `abats`, `actif`, `supprime`, `date_add`, `date_maj`							FROM `pe_produits_especes`						WHERE 1 = 1 ';		$query_liste.= !$show_inactifs != '' ? 'AND `actif` = 1 ' : '';		$query_liste.= !$show_supprime != '' ? 'AND `supprime` = 0 ' : '';		$query_liste.= $recherche 	   != '' ? 'AND TRIM(LOWER(`nom`)) LIKE "%'.trim(strtolower($recherche)).'%" ' : '';		$query_liste.= 'ORDER BY `nom` ASC';		$query = $this->db->prepare($query_liste);		$query->execute();		$liste = [];		foreach ($query->fetchAll(PDO::FETCH_ASSOC) as $donnee) {			$liste[] = new ProduitEspece($donnee);		}		return $liste;	} // FIN getListe		// Enregistre une nouvelle espèce de produits	public function saveProduitEspeces(ProduitEspece $objet) {				$table		= 'pe_produits_especes';	// Nom de la table		$champClef	= 'id';						// Nom du champ clef primaire		// FIN Configuration		$getter		= 'get'.ucfirst(strtolower($champClef));		$setter		= 'set'.ucfirst(strtolower($champClef));		if ($objet->$getter() == '' && !empty($objet->attributs)) {			$query_add = 'INSERT INTO `'.$table.'` (';			foreach ($objet->attributs as $attribut)	{				$query_add.= '`'.$attribut.'`,';			}			$query_add = substr($query_add,0,-1);			$query_add.=') VALUES (';			foreach ($objet->attributs as $attribut)	{				$query_add.= ':'.strtolower($attribut).' ,';			}			$query_add = substr($query_add,0,-1);			$query_add.=')';			$query = $this->db->prepare($query_add);			$query_log = $query_add;			foreach ($objet->attributs as $attribut)	{				$attributget = 'get'.ucfirst($attribut);				$query->bindvalue(':'.strtolower($attribut), $objet->$attributget());				$dq = is_numeric($objet->$attributget()) ? '' : '"';				$query_log = str_replace(':'.strtolower($attribut).' ', $dq.$objet->$attributget().$dq.' ', $query_log);			}			if ($query->execute()) {				$objet->$setter($this->db->lastInsertId());				Outils::saveLog($query_log);				return $objet->$getter();			}		} else if ($objet->$getter() != '' && !empty($objet->attributs)) {			$query_upd = 'UPDATE `'.$table.'` SET ';			foreach($objet->attributs as $attribut) {				$query_upd.= '`'.$attribut.'` = :'.strtolower($attribut).' ,';			}			$query_upd = substr($query_upd,0,-1);			$query_upd .= ' WHERE `'.$champClef.'` = '.$objet->$getter();			$query = $this->db->prepare($query_upd);			$query_log = $query_upd;			foreach($objet->attributs as $attribut) {				$attributget = 'get'.ucfirst($attribut);				$query->bindvalue(':'.strtolower($attribut), $objet->$attributget());				$dq = is_numeric($objet->$attributget()) ? '' : '"';				$query_log = str_replace(':'.strtolower($attribut).' ', $dq.$objet->$attributget().$dq.' ', $query_log);			}			try	{				$query->execute();				Outils::saveLog($query_log);				return true;			} catch(PDOExeption $e) {return false;}		}		return false;			} // FIN méthode	// Vérifie si une espèce de produits existe déjà avec ce nom	public function checkExisteDeja($nom, $id_exclu = 0) {		$query_check = 'SELECT COUNT(*) AS nb FROM `pe_produits_especes` WHERE (LOWER(`nom`) = :nom )';		$query_check.= (int)$id_exclu > 0 ? ' AND `id` != ' . (int)$id_exclu : '';		$query = $this->db->prepare($query_check);		$query->bindValue(':code', trim(strtolower($nom)));		$query->execute();		$donnee = $query->fetchAll(PDO::FETCH_ASSOC);		if ($donnee && isset($donnee[0]) && isset($donnee[0]['nb']) && intval($donnee[0]['nb']) > 0) {			return true;		}		return false;	} // FIN méthode	// Retourne le nombre de produits de l'espèce	public function getNbProduits($espece) {		// On peux passer en paramètre soit l'objet, soit l'iD		$id_espece = $espece instanceof ProduitEspece ? $espece->getId() : intval($espece);		$query_nb = 'SELECT COUNT(*) AS nb FROM `pe_produits` WHERE `id_espece` = :id AND `supprime` = 0 AND `actif` = 1';		$query = $this->db->prepare($query_nb);		$query->bindValue(':id', $id_espece);		$query->execute();		$donnee = $query->fetch();		return $donnee && isset($donnee['nb']) ? intval($donnee['nb']) : 0;	} // FIN méthode	// Met à zéro l'ID de l'esp_ce sur les produits liés (suppression d'une espece de produits)	public function razProduitsEspece($espece) {		// On peux passer en paramètre soit l'objet, soit l'iD		$id_espece = $espece instanceof ProduitEspece ? $espece->getId() : intval($espece);		$query_update = 'UPDATE `pe_produits` SET `id_espece` = 0 WHERE `id_espece` = :id';		$query = $this->db->prepare($query_update);		$query->bindValue(':id', $id_espece);		$query_log = str_replace(':id', $id_espece,$query_update);		Outils::saveLog($query_log);		$query->execute();		return $query->rowCount();	} // FIN méthode	// Retourne une espèce d'après un nom court	public function getEspeceByNomCourt($nom_court) {		$query_espece = 'SELECT `nom` FROM `pe_produits_especes` WHERE `id` = (SELECT IF (`id_espece` IS NOT NULL, `id_espece`, 0) FROM `pe_produits` WHERE `nom_court` LIKE "%'.$nom_court.'%" LIMIT 0,1)';		$query = $this->db->prepare($query_espece);		$query->execute();		$donnee = $query->fetch();		return $donnee && !empty($donnee) ? $donnee['nom'] : '';	} // FIN méthode	// Retourne l'ID de l'espèce "Viande" par défaut	// Pour création d'un lot mixte Viande + Abats	public function getIdEspeceViande() {		$query_espece = 'SELECT `id` FROM `pe_produits_especes` WHERE `viande` = 1 LIMIT 0,1';		$query = $this->db->prepare($query_espece);		$query->execute();		$donnee = $query->fetch();		return $donnee && !empty($donnee) ? intval($donnee['id']) : 0;	} // FIN méthode	// Retourne l'ID de l'espèce "Abats" par défaut	// Pour création d'un lot mixte Viande + Abats	public function getIdEspeceAbats() {		$query_espece = 'SELECT `id` FROM `pe_produits_especes` WHERE `abats` = 1 LIMIT 0,1';		$query = $this->db->prepare($query_espece);		$query->execute();		$donnee = $query->fetch();		return $donnee && !empty($donnee) ? intval($donnee['id']) : 0;	} // FIN méthode} // FIN classe