<?php/*   _|_|_|  _|_|_|      _|_| _|        _|    _|  _|    _|  CBO FrameWork _|        _|_|_|    _|    _|  (c) 2021 Cédric Bouillon _|        _|    _|  _|    _|   _|_|_|  _|_|_|      _|_|--------------------------------------------------------Manager des Crons------------------------------------------------------*/class CronsManager {	protected	$db, $nb_results;	public function __construct($db) {		$this->setDb($db);	}		//##### GETTERS #####	public function getNb_results() {		return $this->nb_results;	}		//##### SETTERS #####	public function setDb(PDO $db) {		$this->db = $db;	}	public function setNb_results($nb_results) {		$this->nb_results = (int)$nb_results;	}		/****************	 * METHODES	 ***************/	// Retourne un cron	public function getCron($id) {		$query_abattoir = 'SELECT `id`, `fichier`, `chemin`, `description`, `actif`, `info`, `execution`, `minute`, `heure`, `mois`, `jour_sem`, `jour_mois` FROM `pe_cron` WHERE `id` = :id';		$query = $this->db->prepare($query_abattoir);		$query->bindValue(':id', (int)$id);		$query->execute();		$donnee = $query->fetch();		return $donnee && !empty($donnee) ? new Cron($donnee) : false;	} // FIN méthode	// Retourne un cron par le nom de fichier	public function getCronByFileName($fichier) {		$query_abattoir = 'SELECT `id`, `fichier`, `chemin`, `description`, `actif`, `info`, `execution`, `minute`, `heure`, `mois`, `jour_sem`, `jour_mois` FROM `pe_cron` WHERE `fichier` = :fichier';		$query = $this->db->prepare($query_abattoir);		$query->bindValue(':fichier', trim(strtolower(str_replace('.php','',$fichier))));		$query->execute();		$donnee = $query->fetch();		return $donnee && !empty($donnee) ? new Cron($donnee) : false;	} // FIN méthode	// Retourne la liste des crons	public function getListeCrons($params = []) {		$actives = isset($params['actives']) ? boolval($params['actives']) : false;		$query_liste = 'SELECT `id`, `fichier`, `chemin`, `description`, `actif`, `info`, `execution`, `minute`, `heure`, `mois`, `jour_sem`, `jour_mois` FROM `pe_cron` WHERE 1 ';		$query_liste.= $actives ? ' AND `actif` = 1 ' : '';		$query_liste.= ' ORDER BY  `fichier` ';		$query = $this->db->prepare($query_liste);		$query->execute();		$liste = [];		foreach ($query->fetchAll(PDO::FETCH_ASSOC) as $donnee) {			$liste[] = new Cron($donnee);		}		return $liste;	} // FIN getListe		// Enregistre	public function saveCron(Cron $objet) {				$table		= 'pe_cron';		// Nom de la table		$champClef	= 'id';				// Nom du champ clef primaire		// FIN Configuration		$getter		= 'get'.ucfirst(strtolower($champClef));		$setter		= 'set'.ucfirst(strtolower($champClef));				if ($objet->$getter() == '' && !empty($objet->attributs)) {			$query_add = 'INSERT INTO `'.$table.'` (';						foreach ($objet->attributs as $attribut)	{				$query_add.= '`'.$attribut.'`,';			}			$query_add = substr($query_add,0,-1);			$query_add.=') VALUES (';						foreach ($objet->attributs as $attribut)	{	            $query_add.= ':'.strtolower($attribut).' ,';			}			$query_add = substr($query_add,0,-1);			$query_add.=')';						$query = $this->db->prepare($query_add);			$query_log = $query_add;						foreach ($objet->attributs as $attribut)	{				$attributget = 'get'.ucfirst($attribut);				$query->bindvalue(':'.strtolower($attribut), $objet->$attributget());				$dq = is_numeric($objet->$attributget()) ? '' : '"';				$query_log = str_replace(':'.strtolower($attribut).' ', $dq.$objet->$attributget().$dq.' ', $query_log);			}						if ($query->execute()) {				Outils::saveLog($query_log);				$objet->$setter($this->db->lastInsertId());						return $objet->$getter();			}					} else if ($objet->$getter() != '' && !empty($objet->attributs)) {			$query_upd = 'UPDATE `'.$table.'` SET ';						foreach($objet->attributs as $attribut) {				$query_upd.= '`'.$attribut.'` = :'.strtolower($attribut).' ,';			}			$query_upd = substr($query_upd,0,-1);			$query_upd .= ' WHERE '.$champClef.' = '.$objet->$getter();							$query = $this->db->prepare($query_upd);			$query_log = $query_upd;						foreach($objet->attributs as $attribut) {				$attributget = 'get'.ucfirst($attribut);				$query->bindvalue(':'.strtolower($attribut), $objet->$attributget());				$dq = is_numeric($objet->$attributget()) ? '' : '"';				$query_log = str_replace(':'.strtolower($attribut).' ', $dq.$objet->$attributget().$dq.' ', $query_log);			}						try	{				$query->execute();				Outils::saveLog($query_log);				return true;			} catch(PDOExeption $e) {return false;}		}				return false;			} // FIN méthode} // FIN classe