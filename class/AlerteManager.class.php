<?php/*   _|_|_|  _|_|_|      _|_| _|        _|    _|  _|    _|  CBO FrameWork _|        _|_|_|    _|    _|  (c) 2018 Cédric Bouillon _|        _|    _|  _|    _|   _|_|_|  _|_|_|      _|_|--------------------------------------------------------Manager de l'Alerte------------------------------------------------------*/class AlerteManager {	protected    $db, $nb_results;	public function __construct($db) {		$this->setDb($db);	}	//##### GETTERS #####	public function getNb_results() {		return $this->nb_results;	}	//##### SETTERS #####	public function setDb(PDO $db) {		$this->db = $db;	}	public function setNb_results($nb_results) {		$this->nb_results = (int)$nb_results;	}	/****************	 * METHODES	 ***************/	public function getTypesAlertes() {		return [1 => 'Conformité réception', 2 => 'Température non conforme', 3 => 'Temps de surgélation', 4 => 'Contrôle Loma'];	}	// Retourne une alerte par son ID	public function getAlerte($id) {		$query_alerte = 'SELECT `id`, `type`, `date`, `valeur`, `id_user`, `id_lot`, `supprime`, `id_froid`, `id_froid_type` FROM `pe_alertes` WHERE `id` = :id';		$query = $this->db->prepare($query_alerte);		$query->bindValue(':id', (int)$id);		$query->execute();		// Log de la requête pour le mode Dev		if (isset($_SESSION['devmode']) && $_SESSION['devmode']) {			$_SESSION['pdoq'][get_class($this)][] = ['q' => $query->queryString, 'v' => ':id = "'.$id.'" '];		}		$donnee = $query->fetch();		return $donnee && !empty($donnee) ? new Alerte($donnee) : false;	} // FIN méthode	// Retourne la liste des alertes	public function getListe($params) {		$type 		= isset($params['type']) 		? intval($params['type']) 		: 0;		$debut 		= isset($params['debut']) 		? $params['debut'] 				: '';		$fin 		= isset($params['fin']) 		? $params['fin']				: '';		$supprimees = isset($params['supprimes']) 	? boolval($params['supprimes']) : false;		$start 		= isset($params['start']) 		? intval($params['start']) 		: 0;		$nb 		= isset($params['nb_result']) 	? intval($params['nb_result']) 	: 100000000;		$query_liste = 'SELECT SQL_CALC_FOUND_ROWS a.`id`, a.`type`, a.`date`, a.`valeur`, a.`id_user`, a.`id_lot`, a.`supprime`,                            				CONCAT(u.`prenom`, " ", u.`nom`) AS nom_user, l.`numlot`, a.`id_froid`, a.`id_froid_type`							FROM `pe_alertes` a								LEFT JOIN `pe_users` u ON u.`id` = a.`id_user`								LEFT JOIN `pe_lots` l ON l.`id` = a.`id_lot`						WHERE 1 ';		$query_liste.= intval($type) > 0 ? ' AND a.`type` = ' . (int)$type . ' ' : '';		$query_liste.= !$supprimees ? ' AND a.`supprime` = 0 ' : '';		$query_liste.= $debut != '' ? ' AND a.`date` >= "' . $debut . '" ' : '';		$query_liste.= $fin != '' ? ' AND a.`date` <= "' . $fin . '" ' : '';		$query_liste.= 'ORDER BY `id` DESC ';		$query_liste.= 'LIMIT ' . $start . ',' . $nb;		$query = $this->db->prepare($query_liste);		$query->execute();		$this->setNb_results($this->db->query('SELECT FOUND_ROWS()')->fetchColumn());		$liste = [];		foreach ($query->fetchAll(PDO::FETCH_ASSOC) as $donnee) {			$liste[] = new Alerte($donnee);		}		return $liste;	} // FIN getListe	// Enregistre une nouvelle Alerte	public function saveAlerte(Alerte $objet) {		$table		= 'pe_alertes';	// Nom de la table		$champClef	= 'id';			// Nom du champ cléf		// FIN Configuration		$getter		= 'get'.ucfirst(strtolower($champClef));		$setter		= 'set'.ucfirst(strtolower($champClef));		if ($objet->$getter() == '' && !empty($objet->attributs)) {			$query_add = 'INSERT INTO `'.$table.'` (';			foreach ($objet->attributs as $attribut)	{				$query_add.= '`'.$attribut.'`,';			}			$query_add = substr($query_add,0,-1);			$query_add.=') VALUES (';			foreach ($objet->attributs as $attribut)	{				$query_add.= ':'.strtolower($attribut).' ,';			}			$query_add = substr($query_add,0,-1);			$query_add.=')';			$query = $this->db->prepare($query_add);			$query_log = $query_add;			foreach ($objet->attributs as $attribut)	{				$attributget = 'get'.ucfirst($attribut);				$query->bindvalue(':'.strtolower($attribut), $objet->$attributget());				$dq = is_numeric($objet->$attributget()) ? '' : '"';				$query_log = str_replace(':'.strtolower($attribut).' ', $dq.$objet->$attributget().$dq.' ', $query_log);			}			if ($query->execute()) {				// Log de la requête pour le mode Dev				if (isset($_SESSION['devmode']) && $_SESSION['devmode']) { $_SESSION['pdoq'][get_class($this)][] = $query->queryString; }				$objet->$setter($this->db->lastInsertId());				Outils::saveLog($query_log);				return $objet->$getter();			}		} else if ($objet->$getter() != '' && !empty($objet->attributs)) {			$query_upd = 'UPDATE `'.$table.'` SET ';			foreach($objet->attributs as $attribut) {				$query_upd.= '`'.$attribut.'` = :'.strtolower($attribut).' ,';			}			$query_upd = substr($query_upd,0,-1);			$query_upd .= ' WHERE `'.$champClef.'` = '.$objet->$getter();			$query = $this->db->prepare($query_upd);			$query_log = $query_upd;			foreach($objet->attributs as $attribut) {				$attributget = 'get'.ucfirst($attribut);				$query->bindvalue(':'.strtolower($attribut), $objet->$attributget());				$dq = is_numeric($objet->$attributget()) ? '' : '"';				$query_log = str_replace(':'.strtolower($attribut).' ', $dq.$objet->$attributget().$dq.' ', $query_log);			}			try	{				$query->execute();				Outils::saveLog($query_log);				return true;			} catch(PDOExeption $e) {return false;}		}		return false;	} // FIN méthode	// Retourne le nombre d'alertes pour un type (compteur admin)	public function getNbAlertesByType($type, $supprimees = false) {		$query_nb = 'SELECT COUNT(*) AS nb FROM `pe_alertes` WHERE `type` = ' . (int)$type . ' ';		$query_nb.= !$supprimees ? ' AND `supprime` = 0 ' : '';		$query = $this->db->prepare($query_nb);		$query->execute();		// Log de la requête pour le mode Dev		if (isset($_SESSION['devmode']) && $_SESSION['devmode']) { $_SESSION['pdoq'][get_class($this)][] = $query->queryString; }		$donnee = $query->fetch();		return $donnee && isset($donnee['nb']) ? intval($donnee['nb']) : 0;	} // FIN méthode	// Retourne le nombre total d'alertes déclanchées par types	public function getTotalAlertesByType() {		$retour = [];		// Boucle sur les types d'alertes		foreach ($this->getTypesAlertes() as $type_id => $label) {			$retour[$label] = $this->getNbAlertesByType($type_id);		} // FIN boucle alertes		return $retour;	} // FIN méthode	// Envoie l'alerte par e-mail + save mail	public function envoiMailAlerte(Alerte $alerte, $observations = '') {		$expediteur = 'iprex@profilexport.fr';		$query_dests = 'SELECT DISTINCT `email` 							FROM `pe_users` 						WHERE `email` IS NOT NULL 						  	AND `email` != ""							AND `actif` = 1 						  	AND `supprime` = 0 						  	AND `alertes` = 1 						  	AND `profil_id` IN (						  	  	SELECT `id` FROM `pe_profils` WHERE `is_admin` = 1 OR  `is_dev` = 1						  	  )';		$query = $this->db->prepare($query_dests);		$query->execute();		// Log de la requête pour le mode Dev		if (isset($_SESSION['devmode']) && $_SESSION['devmode']) { $_SESSION['pdoq'][get_class($this)][] = $query->queryString; }		$destinataires = [];		foreach ($donnees = $query->fetchAll(PDO::FETCH_ASSOC) as $donnee) {			$email = trim(strtolower($donnee['email']));			if (Outils::verifMail($email))  {				$destinataires[] = $donnee['email'];			}		} // FIN boucle sur les destinataires		$traitement = '';		if ($alerte->getId_froid() > 0 && $alerte->getId_froid_type() > 0) {			$froidManager   = new FroidManager($this->db);			$codeFroid      = $froidManager->getFroidCodeById($alerte->getId_froid_type());			if ((string)$codeFroid != '') {				$traitement = strtoupper($codeFroid) . sprintf("%04d", $alerte->getId_froid());			}		}		$sujet = utf8_decode('[ALERTE] Lot ' . $alerte->getNumlot());		$message = '<img src="'.__CBO_IMG_URL__.'logo-mail.jpg" class="logo" alt="iPrex - Intranet Profil Export">';		$message.= '<hr><h2>Alerte de '.strtolower($this->getTypesAlertes()[$alerte->getType()]).' sur le lot '.$alerte->getNumlot().'</h2>';		$message.= '<p>Valeur : <b>'.$alerte->getValeur_verbose().'</b><p>';		$message.= $traitement != '' ? '<p>Traitement : <b>'.$traitement.'</b><p>' : '';		$message.= $observations != '' ? '<p style="background: #ddd;padding:8px;">Observations : <br>'.$observations.'</p>' : '';		$message.= '<p>Alerte déclanchée par '.$alerte->getNom_user().' le '.Outils::getDate_verbose($alerte->getDate()).' <p>';		$message.= "<p><br><br>Connectez-vous à l'intranet pour plus de détails.<br><a href='".__CBO_ROOT_URL__."admin-alertes.php'>Gestion des alertes</a></p><hr>";		$messageHtml = utf8_decode(Outils::formatContenuMail($message));		$envoi = Outils::envoiMail($destinataires, $expediteur, $sujet, $messageHtml);		// Log mail si OK		if ($envoi) {			// Enregistrement du log du mail en BO			$logMail = new LogMail([]);			$logMail->setExpediteur($expediteur);			$logMail->setDestinataires(implode(',', $destinataires));			$logMail->setMessage($message);			$logMail->setSujet($sujet);			$logMail->setType(2); // Type alerte			$logMail->setDate_envoi(date('Y-m-d H:i:s'));			$logMailManager = new LogMailManager($this->db);			$logMailManager->saveLogMail($logMail);		} // FIN log mail		return $envoi;	} // FIN méthode} // FIN classe