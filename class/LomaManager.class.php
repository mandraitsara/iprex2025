<?php/*   _|_|_|  _|_|_|      _|_| _|        _|    _|  _|    _|  CBO FrameWork _|        _|_|_|    _|    _|  (c) 2018 Cédric Bouillon _|        _|    _|  _|    _|   _|_|_|  _|_|_|      _|_|--------------------------------------------------------Manager de l'objet Loma------------------------------------------------------*/class LomaManager {	protected    $db, $nb_results;	public function __construct($db) {		$this->setDb($db);	}	/* ----------------- GETTERS ----------------- */	public function getNb_results() {		return $this->nb_results;	}	/* ----------------- SETTERS ----------------- */	public function setDb(PDO $db) {		$this->db = $db;	}	public function setNb_results($nb_results) {		$this->nb_results = (int)$nb_results;	}	/* ----------------- METHODES ----------------- */	// Retourne un loma	public function getLoma($id) {		$query_loma = 'SELECT                             l.`id`, fp.`id_froid`, l.`id_lot_pdt_froid`, l.`id_client`, l.`cond_debut`, l.`cond_fin`, l.`date_test`,  l.`test_pdt`,       						l.`commentaire`, l.`id_user_visa`, pt.`nom` AS nom_produit, CONCAT(u.`prenom`, " ", u.`nom`) AS nom_user							FROM `pe_loma` l								JOIN `pe_froid_produits` fp ON fp.`id_lot_pdt_froid` = l.`id_lot_pdt_froid`								JOIN `pe_produits` p ON p.`id` = fp.`id_pdt`								LEFT JOIN `pe_produit_trad` pt ON pt.`id_produit` = p.`id` AND pt.`id_langue` = 1								JOIN `pe_users` u ON u.`id` = l.`id_user_visa`							WHERE l.`id` = :id';		$query = $this->db->prepare($query_loma);		$query->bindValue(':id', (int)$id);		$query->execute();		$donnee = $query->fetch();		return $donnee && !empty($donnee) ? new Loma($donnee) : false;	} // FIN méthode	// Retourne la liste des loma (avec gestion de la pagination)	public function getLomaListe($params) {		$id_lot			= isset($params['id_lot'])			? intval($params['id_lot'])			 	: 0;		$start			= isset($params['start'])			? $params['start']			 	: 0;		$nb				= isset($params['nb_result_page']) ? $params['nb_result_page'] : 1000;		$query_liste = 'SELECT SQL_CALC_FOUND_ROWS                            l.`id`, fp.`id_froid`, l.`id_lot_pdt_froid`, l.`id_client`, l.`cond_debut`, l.`cond_fin`, l.`date_test`,l.`test_pdt`,                           l.`commentaire`, l.`id_user_visa`, CONCAT(u.`prenom`, " ", u.`nom`) AS nom_user, ptrad.`nom` AS nom_produit, ft.`code` AS code_froid							FROM `pe_loma` l								JOIN `pe_froid_produits` fp ON fp.`id_lot_pdt_froid` = l.`id_lot_pdt_froid`								JOIN `pe_users` u ON u.`id` = l.`id_user_visa`								JOIN `pe_produits` p ON p.`id` = fp.`id_pdt`								LEFT JOIN `pe_produit_trad` ptrad ON ptrad.`id_produit` = p.`id` AND `id_langue` = 1								JOIN `pe_froid` f ON f.`id` = fp.`id_froid`								JOIN `pe_froid_types` ft ON ft.`id` = f.`id_type`							WHERE 1 ';		$query_liste.= $id_lot > 0 ? 'AND fp.`id_lot` = ' . $id_lot . ' ' : '';		$query_liste.= 'ORDER BY l.`id` DESC ';		$query_liste.= 'LIMIT ' . $start . ',' . $nb;		$query = $this->db->prepare($query_liste);		$query->execute();		$this->setNb_results($this->db->query('SELECT FOUND_ROWS()')->fetchColumn());		$liste = array();		while ($donnees = $query->fetch(PDO::FETCH_ASSOC)) {			$liste[] = new Loma($donnees);		}		return $liste;	} // FIN méthode	// Enregistre & sauvegarde (Méthode Save)	public function saveLoma(Loma $objet) {		$table      = 'pe_loma'; // Nom de la table		$champClef  = 'id'; // Nom du champ clef		// FIN Configuration		$getter     = 'get'.ucfirst(strtolower($champClef));		$setter     = 'set'.ucfirst(strtolower($champClef));		if ($objet->$getter() == '' && !empty($objet->attributs)) {			$query_add = 'INSERT INTO `'.$table.'` (';			foreach ($objet->attributs as $attribut)	{				$query_add.= '`'.$attribut.'`,';			}			$query_add = substr($query_add,0,-1);			$query_add.=') VALUES (';			foreach ($objet->attributs as $attribut)	{				$query_add.= ':'.strtolower($attribut).' ,';			}			$query_add = substr($query_add,0,-1);			$query_add.=')';			$query = $this->db->prepare($query_add);			$query_log = $query_add;			foreach ($objet->attributs as $attribut)	{				$attributget = 'get'.ucfirst($attribut);				$query->bindvalue(':'.strtolower($attribut), $objet->$attributget());				$dq = is_numeric($objet->$attributget()) ? '' : '"';				$query_log = str_replace(':'.strtolower($attribut).' ', $dq.$objet->$attributget().$dq.' ', $query_log);			}			if ($query->execute()) {				$objet->$setter($this->db->lastInsertId());				Outils::saveLog($query_log);				return $objet->$getter();			}		} else if ($objet->$getter() != '' && !empty($objet->attributs)) {			$query_upd = 'UPDATE `'.$table.'` SET ';			foreach($objet->attributs as $attribut) {				$query_upd.= '`'.$attribut.'` = :'.strtolower($attribut).' ,';			}			$query_upd = substr($query_upd,0,-1);			$query_upd .= ' WHERE `'.$champClef.'` = '.$objet->$getter();			$query = $this->db->prepare($query_upd);			$query_log = $query_upd;			foreach($objet->attributs as $attribut) {				$attributget = 'get'.ucfirst($attribut);				$query->bindvalue(':'.strtolower($attribut), $objet->$attributget());				$dq = is_numeric($objet->$attributget()) ? '' : '"';				$query_log = str_replace(':'.strtolower($attribut).' ', $dq.$objet->$attributget().$dq.' ', $query_log);			}			try	{				$query->execute();				Outils::saveLog($query_log);				return true;			} catch(PDOExeption $e) {return false;}		}		return false;	} // FIN méthode	// Retourne un Loma par son l'id_lot_pdt_froid	public function getLomaByIdLotPdtFroid($id_lot_pdt_froid) {		$query_loma = 'SELECT  							`id`,`id_lot_pdt_froid`, `id_client`, `cond_debut`, `cond_fin`, `date_test`,  `test_pdt`, `commentaire`, `id_user_visa`						FROM `pe_loma` 						WHERE `id_lot_pdt_froid` =  ' . $id_lot_pdt_froid;		$query = $this->db->prepare($query_loma);		$query->execute();		$donnee = $query->fetch();		return $donnee && !empty($donnee) ? new Loma($donnee) : false;	} // FIN méthode} // FIN classe