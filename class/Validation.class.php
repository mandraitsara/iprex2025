<?php/*   _|_|_|  _|_|_|      _|_| _|        _|    _|  _|    _|  CBO FrameWork _|        _|_|_|    _|    _|  (c) 2018 Cédric Bouillon _|        _|    _|  _|    _|   _|_|_|  _|_|_|      _|_|--------------------------------------------------------Objet Validation------------------------------------------------------*/class Validation {	protected	$id,				$id_vue,				$type,				$id_liaison,				// ID de la ligne à valider dans la table de liason				$date, 						// Datetime controle				$resultat,					// Confirmité sortie congélation/surgélation / Résultat du test contrôle Loma				$poids,				$courbe_temp,				$vue,						// Objet Vue				$reception,					// Objet Réception				$lot_negoce,				// Objet LotNegoce				$validation_id_user,				$validation_date,				$nom_controleur,				$loma,					// Objet Loma				$lots;	public		$attributs = array();	public function __construct(array $donnees)	{		$this->hydrate($donnees);	}	public function hydrate(array $donnees)	{		foreach ($donnees as $key => $value) {			$method = 'set'.ucfirst(strtolower($key));			if (method_exists($this,$method)) {				$this->$method($value);			}		}		$this->attributs = array();	}	/*##### GETTERS #####*/	public function getId() {		return $this->id;	}	public function getId_vue() {		return $this->id_vue;	}	public function getId_liaison() {		return $this->id_liaison;	}	public function getType() {		return $this->type;	}	public function getDate() {		return $this->date;	}	public function getPoids() {		return $this->poids;	}	public function getCourbe_temp() {		return $this->courbe_temp;	}	public function getResultat() {		return $this->resultat;	}	public function getVue() {		return $this->vue;	}	public function getReception() {		return $this->reception;	}	public function getValidation_id_user() {		return $this->validation_id_user;	}	public function getValidation_date() {		return $this->validation_date;	}	public function getLots() {		return $this->lots;	}	public function getNom_controleur() {		return $this->nom_controleur;	}	public function getLoma() {		return $this->loma;	}	public function getLot_negoce() {		return $this->lot_negoce;	}/*##### SETTERS #####*/	public function setId($valeur) {		$this->id = (int)$valeur;	}	public function setId_vue($valeur) {		$this->id_vue = (int)$valeur;		Outils::setAttributs('id_vue',$this);	}	public function setType($valeur) {		$this->type = (int)$valeur;		Outils::setAttributs('type',$this);	}	public function setId_liaison($valeur) {		$this->id_liaison = (int)$valeur;		Outils::setAttributs('id_liaison',$this);	}	public function setCourbe_temp($valeur) {		$this->courbe_temp = (int)$valeur;		Outils::setAttributs('courbe_temp',$this);	}	public function setDate($valeur) {		$this->date = $valeur;	}	public function setPoids($valeur) {		$this->poids = (float)$valeur;	}	public function setResultat($valeur) {		$this->resultat = $valeur;	}	public function setVue($objet) {		$this->vue = $objet;	}	public function setReception($objet) {		$this->reception = $objet;	}	public function setLot_negoce($objet) {		$this->lot_negoce = $objet;	}	public function setValidation_id_user($valeur) {		$this->validation_id_user = (int)$valeur;		Outils::setAttributs('validation_id_user',$this);	}	public function setValidation_date($valeur) {		$this->validation_date = (string)$valeur;		Outils::setAttributs('validation_date',$this);	}	public function setLots($objets) {		$this->lots = $objets;	}	public function setLoma(Loma $objet) {		$this->loma = $objet;	}	public function setNom_controleur($valeur) {		$this->nom_controleur = (string)$valeur;	}	/*##### METHODES PROPRES A LA CLASSE #####*/	public function is_validee() {		return $this->validation_id_user > 0 && $this->validation_date != '' && $this->validation_date != '0000-00-00 00:00:00';	}	public function getResultat_verbose() {		switch($this->type) {			// Réception			case 1:				if ((int)$this->resultat < 0) { return 'Non testé'; }				return (int)$this->resultat == 1 ? 'Conforme' : 'Non conforme';				break;			// Froid			case 2:				if ((int)$this->resultat < 0) { return 'Non testé'; }				return (int)$this->resultat == 1 ? 'Conforme' : 'Non conforme';				break;			// Loma			case 3:				if ((int)$this->resultat < 0) { return 'Tests incomplets'; }				return (int)$this->resultat == 1 ? 'Contrôle OK' : 'Corps étranger';				break;			// Réception négoce			case 4:				if ((int)$this->resultat < 0) { return 'Non réceptionné'; }				return 'Réceptionné';				break;		}	}} // FIN classe