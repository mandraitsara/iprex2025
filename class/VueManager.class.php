<?php/*   _|_|_|  _|_|_|      _|_| _|        _|    _|  _|    _|  CBO FrameWork _|        _|_|_|    _|    _|  (c) 2018 Cédric Bouillon _|        _|    _|  _|    _|   _|_|_|  _|_|_|      _|_|--------------------------------------------------------Manager de l'Objet Vue------------------------------------------------------*/class VueManager {	protected	$db, $nb_results;	public function __construct($db) {		$this->setDb($db);	}		//##### GETTERS #####	public function getNb_results() {		return $this->nb_results;	}		//##### SETTERS #####	public function setDb(PDO $db) {		$this->db = $db;	}	public function setNb_results($nb_results) {		$this->nb_results = (int)$nb_results;	}		/****************	 * METHODES	 ***************/	// Retourne une vue par son ID	public function getVue($id) {		$query_vue = 'SELECT  `id`, `code`, `bs_color`, `fa`, `maintenance`, `nom`, `url`, `ordre`, `emballage`							FROM `pe_vues`							WHERE `id` = ' . $id;		$query = $this->db->prepare($query_vue);		$query->execute();		$donnees = $query->fetch();		if ($donnees && !empty($donnees)) {			return  new Vue($donnees);		} else {			return false;		}	} // FIN méthode	// Retourne une vue par son code	public function getVueByCode($code_vue) {		$query_vue = 'SELECT  `id`, `code`, `bs_color`, `fa`, `maintenance`, `nom`, `url`, `ordre`, `emballage`							FROM `pe_vues`							WHERE LOWER(`code`) = "' . strtolower(trim($code_vue)).'"';		$query = $this->db->prepare($query_vue);		$query->execute();		$donnees = $query->fetch();		if ($donnees && !empty($donnees)) {			return  new Vue($donnees);		} else {			return false;		}	} // FIN méthode	// Retourne les vues	public function getVuesListe($params = []) {		$emballages = isset($params['emballages']) ? boolval($params['emballages']) : false;		$query_liste = 'SELECT `id`, `code`, `bs_color`, `fa`, `maintenance`, `nom`, `url`, `ordre`, `emballage`							FROM `pe_vues`							WHERE  1 ';		$query_liste.= $emballages ? ' AND `emballage` = 1 ' : '';		$query_liste.= 'ORDER BY `ordre` ASC';		$query = $this->db->prepare($query_liste);		$query->execute();		$liste = [];		foreach ($query->fetchAll(PDO::FETCH_ASSOC) as $donnee) {			$liste[] = new Vue($donnee);		}		return $liste;	} // FIN méthode	// Retourne les vues sous forme de tableaux par code	public function getVuesListeArray() {		$query_liste = 'SELECT `code`, `nom` FROM `pe_vues`';		$query = $this->db->prepare($query_liste);		$query->execute();		$liste = [];		foreach ($query->fetchAll(PDO::FETCH_ASSOC) as $donnee) {			$liste[$donnee['code']] = $donnee['nom'];		}		return $liste;	} // FIN méthode	// Enregistre une reception de lot	public function saveVue(Vue $objet) {		$table		= 'pe_vues';	// Nom de la table		$champClef	= 'id';			// Nom du champ clef primaire		// FIN Configuration		$getter		= 'get'.ucfirst(strtolower($champClef));		$setter		= 'set'.ucfirst(strtolower($champClef));		if ($objet->$getter() == '' && !empty($objet->attributs)) {			$query_add = 'INSERT INTO `'.$table.'` (';			foreach ($objet->attributs as $attribut)	{				$query_add.= '`'.$attribut.'`,';			}			$query_add = substr($query_add,0,-1);			$query_add.=') VALUES (';			foreach ($objet->attributs as $attribut)	{				$query_add.= ':'.strtolower($attribut).' ,';			}			$query_add = substr($query_add,0,-1);			$query_add.=')';			$query = $this->db->prepare($query_add);			$query_log = $query_add;			foreach ($objet->attributs as $attribut)	{				$attributget = 'get'.ucfirst($attribut);				$query->bindvalue(':'.strtolower($attribut), $objet->$attributget());				$dq = is_numeric($objet->$attributget()) ? '' : '"';				$query_log = str_replace(':'.strtolower($attribut).' ', $dq.$objet->$attributget().$dq.' ', $query_log);			}			if ($query->execute()) {				$objet->$setter($this->db->lastInsertId());				Outils::saveLog($query_log);				return $objet->$getter();			}		} else if ($objet->$getter() != '' && !empty($objet->attributs)) {			$query_upd = 'UPDATE `'.$table.'` SET ';			foreach($objet->attributs as $attribut) {				$query_upd.= '`'.$attribut.'` = :'.strtolower($attribut).' ,';			}			$query_upd = substr($query_upd,0,-1);			$query_upd .= ' WHERE `'.$champClef.'` = '.$objet->$getter();			$query = $this->db->prepare($query_upd);			$query_log = $query_upd;			foreach($objet->attributs as $attribut) {				$attributget = 'get'.ucfirst($attribut);				$query->bindvalue(':'.strtolower($attribut), $objet->$attributget());				$dq = is_numeric($objet->$attributget()) ? '' : '"';				$query_log = str_replace(':'.strtolower($attribut).' ', $dq.$objet->$attributget().$dq.' ', $query_log);			}			try	{				$query->execute();				Outils::saveLog($query_log);				return true;			} catch(PDOExeption $e) {return false;}		}		return false;	} // FIN méthode	// Retourne les codes vues existants	public function getCodesVuesExistants() {		$query_liste = 'SELECT `code` FROM `pe_vues` WHERE `code` IS NOT NULL AND `CODE` != "" ORDER BY `ordre` ASC';		$query = $this->db->prepare($query_liste);		$query->execute();		$liste = [];		foreach ($query->fetchAll(PDO::FETCH_ASSOC) as $donnee) {			$liste[] = strtolower(trim($donnee['code']));		}		return $liste;	} // FIN méthode} // FIN classe