<?php/*   _|_|_|  _|_|_|      _|_| _|        _|    _|  _|    _|  CBO FrameWork _|        _|_|_|    _|    _|  (c) 2018 Cédric Bouillon _|        _|    _|  _|    _|   _|_|_|  _|_|_|      _|_|--------------------------------------------------------Manager de l'Objet Abattoir------------------------------------------------------*/class AbattoirManager {	protected	$db, $nb_results;	public function __construct($db) {		$this->setDb($db);	}		//##### GETTERS #####	public function getNb_results() {		return $this->nb_results;	}		//##### SETTERS #####	public function setDb(PDO $db) {		$this->db = $db;	}	public function setNb_results($nb_results) {		$this->nb_results = (int)$nb_results;	}		/****************	 * METHODES	 ***************/	// Retourne un abattoir par son ID	public function getAbattoir($id) {		$query_abattoir = 'SELECT `id`, `nom`, `numagr`, `adresse`, `cp`, `ville`, `pays`, `telephone`, `mobile`, `email`, `actif`, `genlot`, `supprime`, `date_add`, `date_maj` FROM `pe_abattoirs` WHERE `id` = :id';		$query = $this->db->prepare($query_abattoir);		$query->bindValue(':id', (int)$id);		$query->execute();		// Log de la requête pour le mode Dev		if (isset($_SESSION['devmode']) && $_SESSION['devmode']) {			$_SESSION['pdoq'][get_class($this)][] = ['q' => $query->queryString, 'v' => ':id = "'.$id.'" '];		}		$donnee = $query->fetch();		return $donnee && !empty($donnee) ? new Abattoir($donnee) : false;	} // FIN méthode	// Retourne la liste des abattoirs	public function getListeAbattoirs($params) {		$show_inactifs 	= isset($params['show_inactifs']) 	? boolval($params['show_inactifs'])  		: false;		$show_supprime 	= isset($params['show_supprime']) 	? boolval($params['show_supprime'])  		: false;		$recherche 		= isset($params['recherche']) 		? trim(strip_tags($params['recherche'])) 	: '';		$pays 			= isset($params['pays']) 			? trim(strip_tags($params['pays'])) 		: '';		$activation		= isset($params['actif']) 			? intval($params['actif']) 					: -1;		// Pagination		$start 			= isset($params['start']) 			? intval($params['start']) 			: 0;		$nb 			= isset($params['nb_result_page']) 	? intval($params['nb_result_page']) : 10000000;		$query_liste = 'SELECT SQL_CALC_FOUND_ROWS `id`, `nom`, `numagr`,  `adresse`, `cp`, `ville`, `pays`, `telephone`, `mobile`, `email`, `actif`, `genlot`, `supprime`, `date_add`, `date_maj` FROM `pe_abattoirs` WHERE 1 = 1 ';		$query_liste.= $recherche != '' ? 'AND (`nom` LIKE "%'.$recherche.'%" OR `numagr` LIKE "%'.$recherche.'%" OR `adresse` LIKE "%'.$recherche.'%" OR `ville` LIKE "%'.$recherche.'%" OR `cp` LIKE "%'.$recherche.'%") ' : '';		$query_liste.= $pays != '' ? 'AND TRIM(`pays`) = "'.$pays.'"  ' : '';		$query_liste.= $activation > -1 ? 'AND `actif` = '.$activation.' ' : '';		$query_liste.= !$show_inactifs != '' ? 'AND `actif` = 1 AND `genlot` IS NOT NULL AND `genlot` != "" AND  `numagr` IS NOT NULL AND  `numagr` != "" ' : '';		$query_liste.= !$show_supprime != '' ? 'AND `supprime` = 0 ' : '';		$query_liste.= 'ORDER BY `nom` ASC ';		$query_liste.= 'LIMIT ' . $start . ',' . $nb;		$query = $this->db->prepare($query_liste);		$query->execute();		$this->setNb_results($this->db->query('SELECT FOUND_ROWS()')->fetchColumn());		$liste = [];		foreach ($donnees = $query->fetchAll(PDO::FETCH_ASSOC) as $donnee) {			$liste[] = new Abattoir($donnee);		}		return $liste;	} // FIN getListe		// Enregistre un nouvel Abattoir	public function saveAbattoir(Abattoir $objet) {				$table		= 'pe_abattoirs';	// Nom de la table		$champClef	= 'id';				// Nom du champ clef primaire		// FIN Configuration		$getter		= 'get'.ucfirst(strtolower($champClef));		$setter		= 'set'.ucfirst(strtolower($champClef));				if ($objet->$getter() == '' && !empty($objet->attributs)) {			$query_add = 'INSERT INTO `'.$table.'` (';			foreach ($objet->attributs as $attribut)	{				$query_add.= '`'.$attribut.'`,';			}			$query_add = substr($query_add,0,-1);			$query_add.=') VALUES (';			foreach ($objet->attributs as $attribut)	{	            $query_add.= ':'.strtolower($attribut).' ,';			}			$query_add = substr($query_add,0,-1);			$query_add.=')';			$query = $this->db->prepare($query_add);			$query_log = $query_add;			foreach ($objet->attributs as $attribut)	{				$attributget = 'get'.ucfirst($attribut);				// Gestion des clefs unique et valeurs null sur numéro d'agréament et gen lot :				if ((strtolower($attribut) == 'genlot' || strtolower($attribut) == 'numagr') && $objet->$attributget() == '') {					$query->bindvalue(':'.strtolower($attribut), null, PDO::PARAM_INT);				} else {					$query->bindvalue(':'.strtolower($attribut), $objet->$attributget());				}				$dq = is_numeric($objet->$attributget()) ? '' : '"';				$query_log = str_replace(':'.strtolower($attribut).' ', $dq.$objet->$attributget().$dq.' ', $query_log);			}			if ($query->execute()) {				// Log de la requête pour le mode Dev				if (isset($_SESSION['devmode']) && $_SESSION['devmode']) { $_SESSION['pdoq'][get_class($this)][] = $query->queryString; }				Outils::saveLog($query_log);				$objet->$setter($this->db->lastInsertId());						return $objet->$getter();			}		} else if ($objet->$getter() != '' && !empty($objet->attributs)) {			$query_upd = 'UPDATE `'.$table.'` SET ';			foreach($objet->attributs as $attribut) {				$query_upd.= '`'.$attribut.'` = :'.strtolower($attribut).' ,';			}			$query_upd = substr($query_upd,0,-1);			$query_upd .= ' WHERE '.$champClef.' = '.$objet->$getter();			$query = $this->db->prepare($query_upd);			$query_log = $query_upd;			foreach($objet->attributs as $attribut) {				$attributget = 'get'.ucfirst($attribut);				// Gestion des clefs unique et valeurs null sur numéro d'agréament et gen lot :				if ((strtolower($attribut) == 'genlot' || strtolower($attribut) == 'numagr') && $objet->$attributget() == '') {					$query->bindvalue(':'.strtolower($attribut), null, PDO::PARAM_INT);				} else {					$query->bindvalue(':'.strtolower($attribut), $objet->$attributget());				}				$dq = is_numeric($objet->$attributget()) ? '' : '"';				$query_log = str_replace(':'.strtolower($attribut).' ', $dq.$objet->$attributget().$dq.' ', $query_log);			}			try	{				$query->execute();				Outils::saveLog($query_log);				return true;			} catch(PDOExeption $e) {return false;}		}				return false;			} // FIN méthode	// Vérifie si un abattoir existe déjà avec ce nom ou cet agrément	public function checkExisteDeja($genlot, $numagr, $id_exclu = 0) {		$query_check = 'SELECT COUNT(*) AS nb FROM `pe_abattoirs` WHERE (LOWER(`genlot`) = :genlot OR LOWER(`numagr`) = :numagr )';		$query_check.= (int)$id_exclu > 0 ? ' AND `id` != ' . (int)$id_exclu : '';		$query = $this->db->prepare($query_check);		$query->bindValue(':genlot', trim(strtolower($genlot)));		$query->bindValue(':numagr', trim(strtolower($numagr)));		$query->execute();		// Log de la requête pour le mode Dev		if (isset($_SESSION['devmode']) && $_SESSION['devmode']) { $_SESSION['pdoq'][get_class($this)][] = $query->queryString; }		$donnee = $query->fetchAll(PDO::FETCH_ASSOC);		if ($donnee && isset($donnee[0]) && isset($donnee[0]['nb']) && intval($donnee[0]['nb']) > 0) {			return true;		}		return false;	} // FIN méthode	// Reourne la liste des pays des abattoirs	public function getPaysAbattoirs() {		$query_liste = 'SELECT DISTINCT TRIM(UPPER(`pays`)) AS pays FROM `pe_abattoirs` ORDER BY `pays` ASC';		$query = $this->db->prepare($query_liste);		$query->execute();		$liste = [];		foreach ($donnees = $query->fetchAll(PDO::FETCH_ASSOC) as $donnee) {			if (isset($donnee['pays']) && trim($donnee['pays']) != '') {				$liste[] = $donnee['pays'];			}		}		return $liste;	} // FIN méthode} // FIN classe