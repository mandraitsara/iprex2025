<?php/*   _|_|_|  _|_|_|      _|_| _|        _|    _|  _|    _|  CBO FrameWork _|        _|_|_|    _|    _|  (c) 2018 Cédric Bouillon _|        _|    _|  _|    _|   _|_|_|  _|_|_|      _|_|--------------------------------------------------------Manager de l'objet LogMail------------------------------------------------------*/class LogMailManager {	protected    $db, $nb_results;	public function __construct($db) {		$this->setDb($db);	}	/* ----------------- GETTERS ----------------- */	public function getNb_results() {		return $this->nb_results;	}	/* ----------------- SETTERS ----------------- */	public function setDb(PDO $db) {		$this->db = $db;	}	public function setNb_results($nb_results) {		$this->nb_results = (int)$nb_results;	}	/* ----------------- METHODES ----------------- */	// Retourne la liste des e-mails envoyés (avec gestion de la pagination)	public function getLogsMail($params) {		$start			= isset($params['start'])			? $params['start']			 	: 0;		$nb				= isset($params['nb_results_p_page']) ? $params['nb_results_p_page'] : 1000;		$filtre_expediteur 		= isset($params['expediteur']) 		? $params['expediteur'] 	: '';		$filtre_destinataire 	= isset($params['destinataire']) 	? $params['destinataire'] 	: '';		$filtre_type 			= isset($params['type']) 			? intval($params['type'])	: 0;		$filtre_recherche		= isset($params['recherche']) 		? $params['recherche'] 		: '';		$filtre_debut 			= isset($params['debut']) 			? Outils::dateFrToSql($params['debut']) . ' 00:00:00' 	: false;		$filtre_fin 			= isset($params['fin']) 			? Outils::dateFrToSql($params['fin']) . '23:59:59' 		: false;		$query_liste = 'SELECT SQL_CALC_FOUND_ROWS                             `id`,`expediteur`, `destinataires`, `message`, `sujet`, `type`, `date_envoi`							FROM `pe_mails`							WHERE 1 = 1 ';		$query_liste.= $filtre_expediteur 	!= ''	? ' AND `expediteur`    LIKE "%' . $filtre_expediteur   . '%"' : '';		$query_liste.= $filtre_destinataire != ''	? ' AND `destinataires` LIKE "%' . $filtre_destinataire . '%"' : '';		$query_liste.= $filtre_recherche != '' 	? ' AND (`message` LIKE "%' . $filtre_recherche . '%" OR  `sujet` LIKE "%'.$filtre_recherche.'%") '	: '';		$query_liste.= $filtre_type > 0	? ' AND `type` = "' . $filtre_type . '"' 			: '';		$query_liste.= $filtre_debut 	? ' AND `date_envoi` >= "' . $filtre_debut . '"' 	: '';		$query_liste.= $filtre_fin 		? ' AND `date_envoi` <= "' . $filtre_fin . '"' 		: '';		$query_liste.= '	ORDER BY `date_envoi` DESC ';		$query_liste.= 'LIMIT ' . $start . ',' . $nb;		$query = $this->db->prepare($query_liste);		$query->execute();		// Log de la requête pour le mode Dev		if (isset($_SESSION['devmode']) && $_SESSION['devmode']) { $_SESSION['pdoq'][get_class($this)][] = $query->queryString; }		$this->setNb_results($this->db->query('SELECT FOUND_ROWS()')->fetchColumn());		$logsMails = array();		while ($donnees = $query->fetch(PDO::FETCH_ASSOC)) {			$logsMails[] = new LogMail($donnees);		}		return $logsMails;	} // FIN méthode	// Enregistre & sauvegarde (Méthode Save)	public function saveLogMail(LogMail $objet) {		$table      = 'pe_mails'; // Nom de la table		$champClef  = 'id'; // Nom du champ clef		// FIN Configuration		$getter     = 'get'.ucfirst(strtolower($champClef));		$setter     = 'set'.ucfirst(strtolower($champClef));		if ($objet->$getter() == '' && !empty($objet->attributs)) {			$query_add = 'INSERT INTO `'.$table.'` (';			foreach ($objet->attributs as $attribut)	{				$query_add.= '`'.$attribut.'`,';			}			$query_add = substr($query_add,0,-1);			$query_add.=') VALUES (';			foreach ($objet->attributs as $attribut)	{				$query_add.= ':'.strtolower($attribut).' ,';			}			$query_add = substr($query_add,0,-1);			$query_add.=')';			$query = $this->db->prepare($query_add);			$query_log = $query_add;			foreach ($objet->attributs as $attribut)	{				$attributget = 'get'.ucfirst($attribut);				$query->bindvalue(':'.strtolower($attribut), $objet->$attributget());				$dq = is_numeric($objet->$attributget()) ? '' : '"';				$query_log = str_replace(':'.strtolower($attribut).' ', $dq.$objet->$attributget().$dq.' ', $query_log);			}			if ($query->execute()) {				$objet->$setter($this->db->lastInsertId());				Outils::saveLog($query_log);				return $objet->$getter();			}		} else if ($objet->$getter() != '' && !empty($objet->attributs)) {			$query_upd = 'UPDATE `'.$table.'` SET ';			foreach($objet->attributs as $attribut) {				$query_upd.= '`'.$attribut.'` = :'.strtolower($attribut).' ,';			}			$query_upd = substr($query_upd,0,-1);			$query_upd .= ' WHERE `'.$champClef.'` = '.$objet->$getter();			$query = $this->db->prepare($query_upd);			$query_log = $query_upd;			foreach($objet->attributs as $attribut) {				$attributget = 'get'.ucfirst($attribut);				$query->bindvalue(':'.strtolower($attribut), $objet->$attributget());				$dq = is_numeric($objet->$attributget()) ? '' : '"';				$query_log = str_replace(':'.strtolower($attribut).' ', $dq.$objet->$attributget().$dq.' ', $query_log);			}			try	{				$query->execute();				Outils::saveLog($query_log);				return true;			} catch(PDOExeption $e) {return false;}		}		return false;	} // FIN méthode} // FIN classe