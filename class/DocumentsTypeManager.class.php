<?php/*   _|_|_|  _|_|_|      _|_| _|        _|    _|  _|    _|  CBO FrameWork _|        _|_|_|    _|    _|  (c) 2018 Cédric Bouillon _|        _|    _|  _|    _|   _|_|_|  _|_|_|      _|_|--------------------------------------------------------Manager de l'Objet DocumentsType------------------------------------------------------*/class DocumentsTypeManager {	protected	$db;	public function __construct($db) {		$this->setDb($db);	}		//##### GETTERS #####	public function getNb_results() {		return $this->nb_results;	}		//##### SETTERS #####	public function setDb(PDO $db) {		$this->db = $db;	}		/****************	 * METHODES	 ***************/	// Retourne un DocumentsTypes par son ID	public function getDocumentsType($id) {		$query_documents_types = 'SELECT `id`, `nom`,`actif`, `locked`, `api` FROM `pe_documents_types` WHERE `id` = :id';		$query = $this->db->prepare($query_documents_types);		$query->bindValue(':id', (int)$id);		$query->execute();		$donnee = $query->fetch();		return $donnee && !empty($donnee) ? new DocumentsType($donnee) : false;	} // FIN méthode	// Retourne la liste des DocumentsTypes	public function getListeDocumentsTypes($show_inactifs = true) {		$query_liste = 'SELECT `id`, `nom`, `actif`, `locked`, `api` FROM `pe_documents_types` WHERE 1 ';		$query_liste.= !$show_inactifs != '' ? 'AND `actif` = 1 ' : '';		$query_liste.= 'ORDER BY `nom` ASC';		$query = $this->db->prepare($query_liste);		$query->execute();		$liste = [];		foreach ($donnees = $query->fetchAll(PDO::FETCH_ASSOC) as $donnee) {			$liste[] = new DocumentsType($donnee);		}		return $liste;	} // FIN getListe		// Enregistre un nouveau type de document	public function saveDocumentsType(DocumentsType $objet) {				$table		= 'pe_documents_types';	// Nom de la table		$champClef	= 'id';				// Nom du champ clef primaire		// FIN Configuration		$getter		= 'get'.ucfirst(strtolower($champClef));		$setter		= 'set'.ucfirst(strtolower($champClef));		if ($objet->$getter() == '' && !empty($objet->attributs)) {			$query_add = 'INSERT INTO `'.$table.'` (';			foreach ($objet->attributs as $attribut)	{				$query_add.= '`'.$attribut.'`,';			}			$query_add = substr($query_add,0,-1);			$query_add.=') VALUES (';			foreach ($objet->attributs as $attribut)	{				$query_add.= ':'.strtolower($attribut).' ,';			}			$query_add = substr($query_add,0,-1);			$query_add.=')';			$query = $this->db->prepare($query_add);			$query_log = $query_add;			foreach ($objet->attributs as $attribut)	{				$attributget = 'get'.ucfirst($attribut);				$query->bindvalue(':'.strtolower($attribut), $objet->$attributget());				$dq = is_numeric($objet->$attributget()) ? '' : '"';				$query_log = str_replace(':'.strtolower($attribut).' ', $dq.$objet->$attributget().$dq.' ', $query_log);			}			if ($query->execute()) {				$objet->$setter($this->db->lastInsertId());				Outils::saveLog($query_log);				return $objet->$getter();			}		} else if ($objet->$getter() != '' && !empty($objet->attributs)) {			$query_upd = 'UPDATE `'.$table.'` SET ';			foreach($objet->attributs as $attribut) {				$query_upd.= '`'.$attribut.'` = :'.strtolower($attribut).' ,';			}			$query_upd = substr($query_upd,0,-1);			$query_upd .= ' WHERE `'.$champClef.'` = '.$objet->$getter();			$query = $this->db->prepare($query_upd);			$query_log = $query_upd;			foreach($objet->attributs as $attribut) {				$attributget = 'get'.ucfirst($attribut);				$query->bindvalue(':'.strtolower($attribut), $objet->$attributget());				$dq = is_numeric($objet->$attributget()) ? '' : '"';				$query_log = str_replace(':'.strtolower($attribut).' ', $dq.$objet->$attributget().$dq.' ', $query_log);			}			try	{				$query->execute();				Outils::saveLog($query_log);				return true;			} catch(PDOExeption $e) {return false;}		}		return false;			} // FIN méthode	// Vérifie si un documentsTypes existe déjà avec ce code	public function checkExisteDeja($nom, $id_exclu = 0) {		$query_check = 'SELECT COUNT(*) AS nb FROM `pe_documents_types` WHERE (LOWER(`nom`) = :nom )';		$query_check.= (int)$id_exclu > 0 ? ' AND `id` != ' . (int)$id_exclu : '';		$query = $this->db->prepare($query_check);		$query->bindValue(':nom', trim(strtolower($nom)));		$query->execute();		$donnee = $query->fetchAll(PDO::FETCH_ASSOC);		if ($donnee && isset($donnee[0]) && isset($donnee[0]['nb']) && intval($donnee[0]['nb']) > 0) {			return true;		}		return false;	} // FIN méthode	// Retourne le nombre de documents du type	public function getNbDocumentsByType(DocumentsType $documents_type) {		$query_nb = 'SELECT COUNT(*) AS nb FROM `pe_documents` WHERE `type_id` = :id ';		$query = $this->db->prepare($query_nb);		$query->bindValue(':id', $documents_type->getId());		$query->execute();		$donnee = $query->fetchAll(PDO::FETCH_ASSOC);		return $donnee && isset($donnee[0]) && isset($donnee[0]['nb']) ? intval($donnee[0]['nb']) : 0;	} // FIN méthode	// Supprime un type de document	public function supprimeDocumentsType(DocumentsType $documents_type) {		// On revérifie qu'il n'est pas utilisé par un doc...		if ($this::getNbDocumentsByType($documents_type) > 0) {			return false;		}		$query_del = 'DELETE FROM `pe_documents_types` WHERE `id` = ' . (int)$documents_type->getId();		$query = $this->db->prepare($query_del);		Outils::saveLog($query_del);		return $query->execute();	} // FIN méthode} // FIN classe